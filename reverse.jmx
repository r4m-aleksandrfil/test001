<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="optimization_problem.php">
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Settings">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Preparations" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">import org.apache.jmeter.util.JMeterUtils
import scala.tools.jline.*

terminalWidth = TerminalFactory.get().getWidth()
JMeterUtils.setProperty(&apos;ConsoleWidth&apos;,terminalWidth.toString())

new ProcessBuilder(&apos;clear&apos;).inheritIO().start().waitFor()</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <kg.apc.jmeter.config.VariablesFromCSV guiclass="kg.apc.jmeter.config.VariablesFromCSVGui" testclass="kg.apc.jmeter.config.VariablesFromCSV" testname="Global Variables" enabled="true">
          <collectionProp name="Arguments.arguments"/>
          <stringProp name="filename">/home/alex/Route4Me/Config/GlobalVariables.csv</stringProp>
          <stringProp name="variablesPrefix"></stringProp>
          <stringProp name="delimiter">,</stringProp>
          <intProp name="skipLines">1</intProp>
          <boolProp name="storeSysProp">false</boolProp>
        </kg.apc.jmeter.config.VariablesFromCSV>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Files Names defined by Aleksandr Chetverin" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="Payload" elementType="Argument">
              <stringProp name="Argument.name">Payload</stringProp>
              <stringProp name="Argument.value">api-request.json</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="POSTv4Response" elementType="Argument">
              <stringProp name="Argument.name">POSTv4Response</stringProp>
              <stringProp name="Argument.value">api-response.json</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="POSTv5Response" elementType="Argument">
              <stringProp name="Argument.name">POSTv5Response</stringProp>
              <stringProp name="Argument.value">api-response-v5.json</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="GETv4Response" elementType="Argument">
              <stringProp name="Argument.name">GETv4Response</stringProp>
              <stringProp name="Argument.value">api-final.json</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="GETv5Response" elementType="Argument">
              <stringProp name="Argument.name">GETv5Response</stringProp>
              <stringProp name="Argument.value">api-final-v5.json</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Files with PUT optimization_problem.php" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="PUTPayload" elementType="Argument">
              <stringProp name="Argument.name">PUTPayload</stringProp>
              <stringProp name="Argument.value">api-request-put.json</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PUTv4Response" elementType="Argument">
              <stringProp name="Argument.name">PUTv4Response</stringProp>
              <stringProp name="Argument.value">api-response-put.json</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="PUTv5Response" elementType="Argument">
              <stringProp name="Argument.name">PUTv5Response</stringProp>
              <stringProp name="Argument.value">api-response-v5-put.json</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="GETv4ResponsePUT" elementType="Argument">
              <stringProp name="Argument.name">GETv4ResponsePUT</stringProp>
              <stringProp name="Argument.value">api-final-put.json</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="GETv5ResponsePUT" elementType="Argument">
              <stringProp name="Argument.name">GETv5ResponsePUT</stringProp>
              <stringProp name="Argument.value">api-final-v5-put.json</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Local Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="OptimizationsDir" elementType="Argument">
              <stringProp name="Argument.name">OptimizationsDir</stringProp>
              <stringProp name="Argument.value">/home/alex/Route4Me/Spanner/Routes/optimization_problem_php</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc"></stringProp>
            </elementProp>
            <elementProp name="RoutesDir" elementType="Argument">
              <stringProp name="Argument.name">RoutesDir</stringProp>
              <stringProp name="Argument.value">/home/alex/Route4Me/Spanner/Routes/route.php</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ReOptimizeDir" elementType="Argument">
              <stringProp name="Argument.name">ReOptimizeDir</stringProp>
              <stringProp name="Argument.value">/home/alex/Route4Me/Spanner/Routes/Re-Optimize</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="MergeDir" elementType="Argument">
              <stringProp name="Argument.name">MergeDir</stringProp>
              <stringProp name="Argument.value">/home/alex/Route4Me/Spanner/Routes/merge_routes.php</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FileWithOptimizationProblemIDs" elementType="Argument">
              <stringProp name="Argument.name">FileWithOptimizationProblemIDs</stringProp>
              <stringProp name="Argument.value">OptimizationProblemIDs.txt</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="RequestsFile" elementType="Argument">
              <stringProp name="Argument.name">RequestsFile</stringProp>
              <stringProp name="Argument.value">RequestsResponses.txt</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FileWithx-request-id" elementType="Argument">
              <stringProp name="Argument.name">FileWithx-request-id</stringProp>
              <stringProp name="Argument.value">FileWithX-request-id.txt</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Spanner Routes Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="v4" elementType="Argument">
              <stringProp name="Argument.name">v4</stringProp>
              <stringProp name="Argument.value">${v4APIPath}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="v5Legacy" elementType="Argument">
              <stringProp name="Argument.name">v5Legacy</stringProp>
              <stringProp name="Argument.value">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Stage" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="APIKey" elementType="Argument">
              <stringProp name="Argument.value">BD586208135241879A65BBEDB4B97464</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.name">APIKey</stringProp>
            </elementProp>
            <elementProp name="" elementType="Argument">
              <stringProp name="Argument.name"></stringProp>
              <stringProp name="Argument.value">5870B7A961BD25935C52CBB2F8CEB2B8</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="" elementType="Argument">
              <stringProp name="Argument.name"></stringProp>
              <stringProp name="Argument.value">3497B8745E21BCBF6C185BC7920F8560</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="" elementType="Argument">
              <stringProp name="Argument.name"></stringProp>
              <stringProp name="Argument.value">33383266356664302D623934312D3131</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="" elementType="Argument">
              <stringProp name="Argument.name"></stringProp>
              <stringProp name="Argument.value">8B101E11765E571FC082EDB5374049AC</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
      </hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="GET v4 - v5Legacy Comparison" enabled="true">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">false</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">application/json</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Request Body"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="As File" enabled="false"/>
          <hashTree>
            <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="File">
              <collectionProp name="Arguments.arguments">
                <elementProp name="Body" elementType="Argument">
                  <stringProp name="Argument.name">Body</stringProp>
                  <stringProp name="Argument.value">/home/alex/Route4Me/Spanner/Routes/Body/FEDEX Cases for SDK plus Autotests/No Bugs/[STAGE] FEDEX Case 4 API Payload.json</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </Arguments>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Processing" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Request Body043024" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

FileName = new File(&apos;${Body}&apos;)

a = new JsonSlurper().parse(FileName)
a.&apos;parameters&apos;.remove(&apos;member_id&apos;)
a.&apos;parameters&apos;.remove(&apos;route_email&apos;)
a.&apos;parameters&apos;.remove(&apos;route_date&apos;)

b = JsonOutput.prettyPrint(JsonOutput.toJson([parameters: a.&apos;parameters&apos;, addresses: a.&apos;addresses&apos;])).toString()
vars.put(&apos;RequestBody&apos;, b)
(new File(&apos;${OptimizationsDir}/${Payload}&apos;)).text = b</stringProp>
                <stringProp name="TestPlan.comments">Simple</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Request Body" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">RequestBody = &apos;&apos;&apos;
/home/alex/Route4Me/Spanner/Routes/Body/PRE5 Optimizations Payload/3. Capacity, Weight, Pieces Constraints/3_1. Capacity Demands MDR params.json
&apos;&apos;&apos;
RequestBody = RequestBody.replace(&apos;\n&apos;, &apos;&apos;)
vars.put(&apos;Body&apos;, RequestBody)</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Request Body Processing" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import org.apache.commons.lang.RandomStringUtils
import groovy.json.*

FileName = new File(&apos;${Body}&apos;)

AddressStopType = [&apos;DELIVERY&apos;, &apos;PICKUP&apos;]

a1 = new JsonSlurper().parse(FileName)

a1.remove(&apos;optimization_problem_id&apos;)
a1.remove(&apos;smart_optimization_id&apos;)
a1.remove(&apos;user_errors&apos;)
a1.remove(&apos;optimization_errors&apos;)
a1.remove(&apos;state&apos;)
a1.remove(&apos;created_timestamp&apos;)
a1.remove(&apos;scheduled_for&apos;)
a1.remove(&apos;optimization_completed_timestamp&apos;)
a1.remove(&apos;sent_to_background&apos;)
a1.remove(&apos;total_addresses&apos;)
a1.remove(&apos;routes&apos;)
a1.remove(&apos;links&apos;)

a1.&apos;parameters&apos;.remove(&apos;member_id&apos;)

a1.&apos;parameters&apos;.put(&apos;route_date&apos;, (new Date().getTime() + 86400000).toString()[0..9].toInteger())

for (i in 0..a1.&apos;addresses&apos;.size() - 1){
	a2 = RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray())
	a1.&apos;addresses&apos;[i].put(&apos;alias&apos;, a2)
	a2 = RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray())
	a1.&apos;addresses&apos;[i].put(&apos;address&apos;, a2)
	a1.&apos;addresses&apos;[i].remove(&apos;route_destination_id&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;optimization_problem_id&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;channel_name&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;distance_to_next_destination&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;drive_time_to_next_destination&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;route_id&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;member_id&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;sequence_no&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;tracking_number&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;custom_fields&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;custom_fields_str_json&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;cube&apos;)
	if (a1.&apos;addresses&apos;[i].&apos;address_stop_type&apos; !in AddressStopType){
		a1.&apos;addresses&apos;[i].put(&apos;address_stop_type&apos;, AddressStopType[new Random().ints(0, 2).findFirst().getAsInt()])}}

b = JsonOutput.prettyPrint(JsonOutput.toJson(a1)).toString()
vars.put(&apos;RequestBody&apos;, b)
(new File(&apos;${OptimizationsDir}/${Payload}&apos;)).text = b
/*
a1.&apos;parameters&apos;.remove(&apos;is_upload&apos;)
a1.&apos;parameters&apos;.remove(&apos;shared_publicly&apos;)
a1.&apos;parameters&apos;.remove(&apos;distance_unit&apos;)
a1.&apos;parameters&apos;.remove(&apos;driver_id&apos;)
a1.&apos;parameters&apos;.remove(&apos;dev_lat&apos;)
a1.&apos;parameters&apos;.remove(&apos;dev_lng&apos;)
a1.&apos;parameters&apos;.remove(&apos;route_email&apos;)
a1.&apos;parameters&apos;.remove(&apos;store_route&apos;)
a1.&apos;parameters&apos;.remove(&apos;ip&apos;)
a1.&apos;parameters&apos;.remove(&apos;dm&apos;)*/</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Request Body Processing(No address/alias)" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import org.apache.commons.lang.RandomStringUtils
import groovy.json.*

FileName = new File(&apos;${Body}&apos;)

AddressStopType = [&apos;DELIVERY&apos;, &apos;PICKUP&apos;]

a1 = new JsonSlurper().parse(FileName)

a1.remove(&apos;optimization_problem_id&apos;)
a1.remove(&apos;smart_optimization_id&apos;)
a1.remove(&apos;user_errors&apos;)
a1.remove(&apos;optimization_errors&apos;)
a1.remove(&apos;state&apos;)
a1.remove(&apos;created_timestamp&apos;)
a1.remove(&apos;scheduled_for&apos;)
a1.remove(&apos;optimization_completed_timestamp&apos;)
a1.remove(&apos;sent_to_background&apos;)
a1.remove(&apos;total_addresses&apos;)
a1.remove(&apos;routes&apos;)
a1.remove(&apos;links&apos;)

a1.&apos;parameters&apos;.remove(&apos;member_id&apos;)

a1.&apos;parameters&apos;.put(&apos;route_date&apos;, (new Date().getTime() + 86400000).toString()[0..9].toInteger())

for (i in 0..a1.&apos;addresses&apos;.size() - 1){
	a2 = RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray())
	//a1.&apos;addresses&apos;[i].put(&apos;alias&apos;, a2)
	a2 = RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray())
	//a1.&apos;addresses&apos;[i].put(&apos;address&apos;, a2)
	a1.&apos;addresses&apos;[i].remove(&apos;route_destination_id&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;optimization_problem_id&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;channel_name&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;distance_to_next_destination&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;drive_time_to_next_destination&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;route_id&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;member_id&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;sequence_no&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;tracking_number&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;custom_fields&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;custom_fields_str_json&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;cube&apos;)
	if (a1.&apos;addresses&apos;[i].&apos;address_stop_type&apos; !in AddressStopType){
		a1.&apos;addresses&apos;[i].put(&apos;address_stop_type&apos;, AddressStopType[new Random().ints(0, 2).findFirst().getAsInt()])}}

b = JsonOutput.prettyPrint(JsonOutput.toJson(a1)).toString()
vars.put(&apos;RequestBody&apos;, b)
(new File(&apos;${OptimizationsDir}/${Payload}&apos;)).text = b
/*
a1.&apos;parameters&apos;.remove(&apos;is_upload&apos;)
a1.&apos;parameters&apos;.remove(&apos;shared_publicly&apos;)
a1.&apos;parameters&apos;.remove(&apos;distance_unit&apos;)
a1.&apos;parameters&apos;.remove(&apos;driver_id&apos;)
a1.&apos;parameters&apos;.remove(&apos;dev_lat&apos;)
a1.&apos;parameters&apos;.remove(&apos;dev_lng&apos;)
a1.&apos;parameters&apos;.remove(&apos;route_email&apos;)
a1.&apos;parameters&apos;.remove(&apos;store_route&apos;)
a1.&apos;parameters&apos;.remove(&apos;ip&apos;)
a1.&apos;parameters&apos;.remove(&apos;dm&apos;)*/</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Formatting" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

FileName = new File(&apos;${Body}&apos;)

a = new JsonSlurper().parse(FileName)

b = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()
vars.put(&apos;RequestBody&apos;, b)
(new File(&apos;${OptimizationsDir}/${Payload}&apos;)).text = b</stringProp>
                <stringProp name="TestPlan.comments">Simple</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="As Random Values"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Random Addesses Generation">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

NumberOfStops = 89
RT = &apos;false&apos;
AlgorithmType = 100

DepotAddressForPost = RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray())
b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;address&quot;:&quot;&apos; + DepotAddressForPost + &apos;&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},&apos;

for (i in 1..NumberOfStops){
	a = &apos;{&quot;alias&quot;:&quot;&apos; +	RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;address&quot;:&quot;&apos; +	RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
	b = (i == NumberOfStops) ? b + a : b + a + &apos;,&apos;}

Str1 = &apos;{&quot;parameters&quot;:{&quot;route_name&quot;:&quot;&apos; + RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;route_date&quot;:&quot;&apos; + (new Date().getTime()).toString()[0..9] + &apos;&quot;,&quot;rt&quot;:&apos; + RT + &apos;,&quot;algorithm_type&quot;:&apos; + AlgorithmType + &apos;},&quot;addresses&quot;:[&apos; + b + &apos;]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(Str1))).toString()

vars.put(&apos;RequestBody&apos;, e)
vars.put(&apos;GlobalDepotAddressForPost&apos;, DepotAddressForPost)

(new File(&apos;${OptimizationsDir}/${Payload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="!Random Addesses Generation" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

NumberOfStops = 500
RT = &apos;false&apos;
AlgorithmType = 3

DepotAddressForPost = RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray())
b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;address&quot;:&quot;&apos; + DepotAddressForPost + &apos;&quot;,&quot;lat&quot;:27.88997285474673,&quot;lng&quot;:-82.50750580139949,&quot;is_depot&quot;:true},&apos;

for (i in 1..NumberOfStops){
	a = &apos;{&quot;alias&quot;:&quot;&apos; +	RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;address&quot;:&quot;&apos; +	RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;lat&quot;:2&apos; + new Random().ints(7,9).findFirst().getAsInt() + &apos;.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
	b = (i == NumberOfStops) ? b + a : b + a + &apos;,&apos;}

Str1 = &apos;{&quot;parameters&quot;:{&quot;route_name&quot;:&quot;&apos; + RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;route_date&quot;:&quot;&apos; + (new Date().getTime()).toString()[0..9] + &apos;&quot;,&quot;rt&quot;:&apos; + RT + &apos;,&quot;algorithm_type&quot;:&apos; + AlgorithmType + &apos;},&quot;addresses&quot;:[&apos; + b + &apos;]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(Str1))).toString()

vars.put(&apos;RequestBody&apos;, e)
vars.put(&apos;GlobalDepotAddressForPost&apos;, DepotAddressForPost)

(new File(&apos;${OptimizationsDir}/${Payload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Addesses Generation" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

SQ = 3
b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;address&quot;:&quot;Address of Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..SQ){
	a = &apos;\t\t{&quot;alias&quot;:&quot;Stop &apos; +	i + &apos;&quot;,&quot;address&quot;:&quot;Address Of Stop &apos; +	i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
	b = (i == SQ)? b + a: b + a + &apos;,\n&apos;}

RouteDate = (new Date().getTime() + 86400000).toString()[0..9]
RouteName = RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray())//.toString())

Str1 = &apos;{&quot;parameters&quot;:{&quot;route_name&quot;:&quot;&apos; + RouteName + &apos;&quot;,&quot;route_date&quot;:&quot;&apos; + RouteDate + &apos;&quot;,&quot;rt&quot;:true,&quot;algorithm_type&quot;:1},&quot;addresses&quot;:[&apos; + b + &apos;]}&apos;
PayloadFile = new File(&apos;${OptimizationsDir}/${Payload}&apos;)
PayloadFile.text = Str1
a1 = new JsonSlurper().parse(PayloadFile)
b1 = JsonOutput.prettyPrint(JsonOutput.toJson(a1)).toString()

vars.put(&apos;RequestBody&apos;, b1)
PayloadFile.text = b1</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="For grab-and-go optimization.php" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

NumberOfStops = 30
RT = &apos;false&apos;
AlgorithmType = 1
OptimizationProfileId = &apos;&apos;//&apos;cd12ed0f-3e4f-42ef-b139-3f091235f78f&apos;
OdrerUUID = &apos;&apos;//&apos;2CE3DB2BD63C44C9AE3AEFEDE5DD2121&apos;
b = &apos;&apos;
for (i in 1..NumberOfStops){
	a = &apos;{&quot;alias&quot;:&quot;&apos; +	RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join())) + &apos;&quot;,&quot;address&quot;:&quot;&apos; +	RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join())) + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
	b = (i == NumberOfStops) ? b + a : b + a + &apos;,&apos;}

OptProfId = (OptimizationProfileId != &apos;&apos;) ? &apos;,&quot;optimization_profile_id&quot;:&quot;&apos; + OptimizationProfileId + &apos;&quot;&apos; : &apos;&apos;
OrderUUIDForPOST = (OdrerUUID != &apos;&apos;) ? &apos;,{&quot;order_uuid&quot;:&quot;&apos; + OdrerUUID + &apos;&quot;}&apos; : &apos;&apos;

Str1 = &apos;{&quot;parameters&quot;:{&quot;route_name&quot;:&quot;&apos; + RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join())) + &apos;&quot;,&quot;route_date&quot;:&quot;&apos; + (new Date().getTime()).toString()[0..9] + &apos;&quot;,&quot;rt&quot;:&apos; + RT + &apos;,&quot;algorithm_type&quot;:&apos; + AlgorithmType + OptProfId + &apos;},&quot;addresses&quot;:[&apos; + b + OrderUUIDForPOST +&apos;]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(Str1))).toString()

vars.put(&apos;RequestBody&apos;, e)
(new File(&apos;${OptimizationsDir}/${Payload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="For grab-and-go optimization.php" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

NumberOfStops = 30
RT = &apos;false&apos;
AlgorithmType = 1
OptimizationProfileId = &apos;&apos;//&apos;cd12ed0f-3e4f-42ef-b139-3f091235f78f&apos;
OdrerUUID = &apos;&apos;//&apos;2CE3DB2BD63C44C9AE3AEFEDE5DD2121&apos;
b = &apos;&apos;
for (i in 1..NumberOfStops){
	a = &apos;{&quot;alias&quot;:&quot;&apos; +	RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join())) + &apos;&quot;,&quot;address&quot;:&quot;&apos; +	RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join())) + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
	b = (i == NumberOfStops) ? b + a : b + a + &apos;,&apos;}

OptProfId = (OptimizationProfileId != &apos;&apos;) ? &apos;,&quot;optimization_profile_id&quot;:&quot;&apos; + OptimizationProfileId + &apos;&quot;&apos; : &apos;&apos;
OrderUUIDForPOST = (OdrerUUID != &apos;&apos;) ? &apos;,{&quot;order_uuid&quot;:&quot;&apos; + OdrerUUID + &apos;&quot;}&apos; : &apos;&apos;

Str1 = &apos;{&quot;parameters&quot;:{&quot;route_name&quot;:&quot;&apos; + RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join())) + &apos;&quot;,&quot;rt&quot;:&apos; + RT + &apos;,&quot;algorithm_type&quot;:&apos; + AlgorithmType + OptProfId + &apos;},&quot;addresses&quot;:[&apos; + b + OrderUUIDForPOST +&apos;]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(Str1))).toString()

vars.put(&apos;RequestBody&apos;, e)
(new File(&apos;${OptimizationsDir}/${Payload}&apos;)).text = e</stringProp>
              <stringProp name="TestPlan.comments">no route_date</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Addesses Generation" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

SQ = 3
b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;address&quot;:&quot;Address of Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..SQ){
	a = &apos;\t\t{&quot;alias&quot;:&quot;Stop &apos; +	i + &apos;&quot;,&quot;address&quot;:&quot;Address Of Stop &apos; +	i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
	b = (i == SQ)? b + a: b + a + &apos;,\n&apos;}

RouteDate = (new Date().getTime() + 86400000).toString()[0..9]
RouteName = RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray())//.toString())

Str1 = &apos;{&quot;parameters&quot;:{&quot;route_name&quot;:&quot;&apos; + RouteName + &apos;&quot;,&quot;route_date&quot;:&quot;&apos; + RouteDate + &apos;&quot;,&quot;rt&quot;:true,&quot;algorithm_type&quot;:3,&quot;route_max_duration&quot;: 3600},&quot;addresses&quot;:[&apos; + b + &apos;]}&apos;
PayloadFile = new File(&apos;${OptimizationsDir}/${Payload}&apos;)
PayloadFile.text = Str1
a1 = new JsonSlurper().parse(PayloadFile)
b1 = JsonOutput.prettyPrint(JsonOutput.toJson(a1)).toString();println b1

vars.put(&apos;RequestBody&apos;, b1)
PayloadFile.text = b1</stringProp>
              <stringProp name="TestPlan.comments">&quot;algorithm_type&quot;:3,&quot;route_max_duration&quot;: 3600</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Smart" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Values Generation">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">import org.apache.commons.lang.RandomStringUtils

a = new Date() + 1
b = a.format(&apos;yyyy-MM-dd&apos;)

vars.put(&apos;DateForRequest&apos;, b.toString())

vars.put(&apos;RouteName&apos;, RandomStringUtils.random(32, ((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()))</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Upload" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="upload.php">
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">actions/upload/upload.php?type=route</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <elementProp name="HTTPsampler.Files" elementType="HTTPFileArgs">
                <collectionProp name="HTTPFileArgs.files">
                  <elementProp name="/home/alex/Route4Me/Spanner/Routes/Body/Smart/205.csv" elementType="HTTPFileArg">
                    <stringProp name="File.mimetype">text/csv</stringProp>
                    <stringProp name="File.path">/home/alex/Route4Me/Spanner/Routes/Body/Smart/205.csv</stringProp>
                    <stringProp name="File.paramname">strFilename</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">name=strFilename&amp;filename=205.csv</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="upload_id Getting">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;upload_id&apos;
vars.put(&apos;UploadId&apos;, b.toString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="X-Api-Key" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="csv-xls-preview.php" enabled="false">
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">actions/upload/csv-xls-preview.php?strUploadID=${UploadId}&amp;sheet=0&amp;limit=500&amp;type=route&amp;set_first_depot=true&amp;intFromEncodingIndex=0</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="csv-xls-geocode.php">
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">actions/upload/csv-xls-geocode.php?strUploadID=${UploadId}&amp;type=route&amp;sheet=0&amp;set_first_depot=1&amp;intFromEncodingIndex=0</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="temporary_addresses_storage_id Getting">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;TemporaryAddressesStorageId&apos;, a.&apos;temporary_addresses_storage_id&apos;.toString())
vars.put(&apos;SmarOptimizationProblemId&apos;, a.&apos;optimization_problem_id&apos;.toString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="automatic-territories POST">
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/automatic-territories</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;temporary_addresses_storage_id&quot;:&quot;${TemporaryAddressesStorageId}&quot;,&#xd;
	&quot;mode&quot;:0,&#xd;
	&quot;params&quot;:[]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="job_id Getting">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;job_id&apos;
vars.put(&apos;JobId&apos;, b.toString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="automatic-territories GET">
              <stringProp name="WhileController.condition">${__groovy(${SmartOptimizationA1} == &apos;1&apos;)}</stringProp>
            </WhileController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="automatic-territories">
                <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/automatic-territories/job-tracker/status/${JobId}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for status">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

if (a.&apos;status&apos; in [&apos;started&apos;, &apos;processed&apos;])
	{vars.put(&apos;SmartOptimizationA1&apos;, &apos;1&apos;)}
else {sleep(10000)}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="automatic-territories" enabled="false">
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/automatic-territories/job-tracker/result/${JobId}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
/*if (a.&apos;state&apos; in [4, 5]){
	vars.put(&apos;a1&apos;, &apos;1&apos;)
	RespFile = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()}
else {sleep(10000)}*/


if (a.&apos;status&apos; in [&apos;processed&apos;, &apos;started&apos;]){
	vars.put(&apos;a1&apos;, &apos;1&apos;)}
else {sleep(10000)}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="csv-xls-api-v4-data.php">
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">actions/upload/csv-xls-api-v4-data.php?strOptimizationProblemID=${SmarOptimizationProblemId}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="RequestBody Processing">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

route_time = 18000
service_time = 0 //slowdowns
travel_time = 25//slowdowns
optimize = &apos;Time&apos;
travel_mode = &apos;Driving&apos;
uturn = 1
leftturn = 1
rightturn = 1
routeType = &apos;multi_tw&apos;
ignore_tw = false
parts = 20
route_max_duration = 115200
lock_last = false

p =&apos;{&quot;parameters&quot;:{&quot;route_name&quot;:&quot;${RouteName}&quot;,&quot;route_time&quot;:&apos; + route_time + &apos;,&quot;slowdowns&quot;:{&quot;service_time&quot;:&apos; + service_time + &apos;,&quot;travel_time&quot;:&apos; + travel_time + &apos;},&quot;optimize&quot;:&quot;&apos; + optimize + &apos;&quot;,&quot;travel_mode&quot;:&quot;&apos; + travel_mode + &apos;&quot;,&quot;uturn&quot;:&apos; + uturn + &apos;,&quot;leftturn&quot;:&apos; + leftturn + &apos;,&quot;rightturn&quot;:&apos; + rightturn + &apos;,&quot;routeType&quot;:&quot;&apos; + routeType + &apos;&quot;,&quot;algorithm_type&quot;:3,&quot;ignore_tw&quot;:&apos; + ignore_tw + &apos;,&quot;parts&quot;:&apos; + parts + &apos;,&quot;route_max_duration&quot;:&apos; + route_max_duration + &apos;,&quot;lock_last&quot;:&apos; + lock_last + &apos;,&quot;clusterization_job_id&quot;:&quot;${JobId}&quot;},&quot;uploads&quot;:[{&quot;upload_id&quot;:&quot;${UploadId}&quot;}],&quot;addresses&quot;:&apos;

b = JsonOutput.prettyPrint(p + JsonOutput.toJson(a).toString() + &apos;}&apos;)
vars.put(&apos;RequestBody&apos;, b)
(new File(&apos;${OptimizationsDir}/${Payload}&apos;)).text = b</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="POST v4/v5Legacy"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4">
              <stringProp name="TestPlan.comments">Add New Route</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?redirect=0&amp;id_only=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv4&apos;, b)
vars.put(&apos;SmartOptimizationProblemIDv4&apos;, a.&apos;smart_optimization_id&apos;.toString())

FileWithIDs = new File(&apos;${OptimizationsDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.text = b + &apos;,&apos;

RespFile = new File(&apos;${OptimizationsDir}/${POSTv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with Request" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

RequestBody = prev.getSamplerData()
RequestHeader = prev.getRequestHeaders()
r = RequestHeader[0..RequestHeader.length()-2]
r = r.replace(&apos;\n&apos;, &apos;\n\t&apos;)
r = &apos;\t&apos;+ r
RequestBody = RequestBody.replace(&apos;[no cookies]&apos;, &apos;&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
a = new JsonSlurper().parse(prev.getResponseData())
b = JsonOutput.prettyPrint(JsonOutput.toJson(a))
s2 = &apos;&apos;
s1 = prev.getResponseHeaders()
if (s1.contains(&apos;x-request-id&apos;)){
	s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
	s2 = &apos;, x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]}
s = RequestBody + &apos;Header\n&apos; + r + &apos;\nResponse&apos; + s2 + &apos;\n&apos; + b + &apos;\n***********\n&apos;

FileWithRequests = new File(&apos;${OptimizationsDir}/${RequestsFile}&apos;)
FileWithRequests.text = s
//FileWithRequests.append(s)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="false">
              <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv4}&amp;wait_for_final_state=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
if (a.&apos;state&apos; in [4, 5]){
	vars.put(&apos;a1&apos;, &apos;1&apos;)	
	RespFile = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="wait_for_final_state">
              <stringProp name="WhileController.condition">${__groovy(${a1} == &apos;1&apos;)}</stringProp>
            </WhileController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4 Wait for Final State">
                <stringProp name="TestPlan.comments">route_id Getting &amp;wait_for_final_state=1</stringProp>
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv4}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Api-Key</stringProp>
                      <stringProp name="Header.value">${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
if (a.&apos;state&apos; in [4, 5]){
	vars.put(&apos;a1&apos;, &apos;1&apos;)
	RespFile = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()}
else {sleep(10000)}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv5Legacy">
              <stringProp name="TestPlan.comments">?redirect=0</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?redirect=0&amp;id_only=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv5&apos;, b)

FileWithIDs = new File(&apos;${OptimizationsDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.append(b)

RespFile = new File(&apos;${OptimizationsDir}/${POSTv5Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
s1 = prev.getResponseHeaders()
s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
FileWithX.text = &apos;POSTv5Legacy &apos; +  s2</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="false">
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv5}&amp;wait_for_final_state=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
if (a.&apos;state&apos; in [4, 5]){
	vars.put(&apos;a2&apos;, &apos;1&apos;)
	RespFile = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()
	
	FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
	s1 = prev.getResponseHeaders()
	s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
	s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
	FileWithX.append(&apos;GETv5Legacy &apos; +  s2)}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="wait_for_final_state" enabled="false">
              <stringProp name="WhileController.condition">${__groovy(${a2} == &apos;1&apos;)}</stringProp>
            </WhileController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy Wait for Final State" enabled="true">
                <stringProp name="TestPlan.comments">route_id Getting &amp;wait_for_final_state=1</stringProp>
                <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv5}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
if (a.&apos;state&apos; in [4, 5]){
	vars.put(&apos;a2&apos;, &apos;1&apos;)
	RespFile = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()
	FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
	s1 = prev.getResponseHeaders()
	s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
	s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
	FileWithX.append(&apos;GETv5Legacy &apos; +  s2)}
else {sleep(10000)}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="POST"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="POST v4/v5Legacy" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="v4" enabled="true"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4" enabled="true">
                <stringProp name="TestPlan.comments">Add New Route</stringProp>
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?redirect=0</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${RequestBody}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Api-Key</stringProp>
                      <stringProp name="Header.value">${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv4&apos;, b)

FileWithIDs = new File(&apos;${OptimizationsDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.text = b + &apos;,&apos;

RespFile = new File(&apos;${OptimizationsDir}/${POSTv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with Request" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

RequestBody = prev.getSamplerData()
RequestHeader = prev.getRequestHeaders()
r = RequestHeader[0..RequestHeader.length()-2]
r = r.replace(&apos;\n&apos;, &apos;\n\t&apos;)
r = &apos;\t&apos;+ r
RequestBody = RequestBody.replace(&apos;[no cookies]&apos;, &apos;&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
a = new JsonSlurper().parse(prev.getResponseData())
b = JsonOutput.prettyPrint(JsonOutput.toJson(a))
s2 = &apos;&apos;
s1 = prev.getResponseHeaders()
if (s1.contains(&apos;x-request-id&apos;)){
	s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
	s2 = &apos;, x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]}
s = RequestBody + &apos;Header\n&apos; + r + &apos;\nResponse&apos; + s2 + &apos;\n&apos; + b + &apos;\n***********\n&apos;

FileWithRequests = new File(&apos;${OptimizationsDir}/${RequestsFile}&apos;)
FileWithRequests.text = s
//FileWithRequests.append(s)</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="false">
                <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv4}&amp;wait_for_final_state=1</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Api-Key</stringProp>
                      <stringProp name="Header.value">${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
if (a.&apos;state&apos; in [4, 5]){
	vars.put(&apos;a1&apos;, &apos;1&apos;)	
	RespFile = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="wait_for_final_state" enabled="true">
                <stringProp name="WhileController.condition">${__groovy(${a1} == &apos;1&apos;)}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4 Wait for Final State" enabled="true">
                  <stringProp name="TestPlan.comments">route_id Getting &amp;wait_for_final_state=1</stringProp>
                  <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv4}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Api-Key</stringProp>
                        <stringProp name="Header.value">${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
if (a.&apos;state&apos; in [4, 5]){
	vars.put(&apos;a1&apos;, &apos;1&apos;)
	RespFile = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()}
else {sleep(10000)}</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="v5Legacy"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv5Legacy" enabled="true">
                <stringProp name="TestPlan.comments">?redirect=0</stringProp>
                <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?redirect=0</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${RequestBody}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv5&apos;, b)

FileWithIDs = new File(&apos;${OptimizationsDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.append(b)

RespFile = new File(&apos;${OptimizationsDir}/${POSTv5Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
s1 = prev.getResponseHeaders()
s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
FileWithX.text = &apos;POSTv5Legacy &apos; +  s2</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="false">
                <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv5}&amp;wait_for_final_state=1</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
if (a.&apos;state&apos; in [4, 5]){
	vars.put(&apos;a2&apos;, &apos;1&apos;)
	RespFile = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()
	
	FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
	s1 = prev.getResponseHeaders()
	s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
	s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
	FileWithX.append(&apos;GETv5Legacy &apos; +  s2)}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="wait_for_final_state" enabled="true">
                <stringProp name="WhileController.condition">${__groovy(${a2} == &apos;1&apos;)}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy Wait for Final State" enabled="true">
                  <stringProp name="TestPlan.comments">route_id Getting &amp;wait_for_final_state=1</stringProp>
                  <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv5}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
if (a.&apos;state&apos; in [4, 5]){
	vars.put(&apos;a2&apos;, &apos;1&apos;)
	RespFile = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()
	FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
	s1 = prev.getResponseHeaders()
	s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
	s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
	FileWithX.append(&apos;GETv5Legacy &apos; +  s2)}
else {sleep(10000)}</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Comparision"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="optimization_problem.php" enabled="false"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
FileWithv5 = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)
RoutesFile = new File(&apos;${OptimizationsDir}/Routes.txt&apos;)

ao1 = new JsonSlurper().parse(FileWithv4).&apos;routes&apos;
a2 = new JsonSlurper().parse(FileWithv5).&apos;routes&apos;

RouteTitle = &apos;routes &apos; + ao1.size() + &apos;/&apos; + a2.size()
Str1 = RouteTitle + &apos;\n&apos; + &apos;*&apos;.repeat(RouteTitle.length())
println Str1
RoutesFile.text = Str1 + &apos;\n&apos;

//System.console().readLine &apos;Next?&apos;

c22 = []
for (i in 0..ao1.size() - 1){
	b1 = ao1[i].&apos;addresses&apos;.&apos;alias&apos;.sort()
	for (j in 0..a2.size() - 1){
		b2 = a2[j].&apos;addresses&apos;.&apos;alias&apos;.sort()
		if (b1 == b2){c22[i] = a2[j]; a2.remove(a2[j]);break}}}
for (r in 0..ao1.size() - 1){
	RouteNamev4 = ao1[r].&apos;parameters&apos;.&apos;route_name&apos; + &apos;/&apos; + ao1[r].&apos;route_id&apos;
	RouteNamev5 = c22[r].&apos;parameters&apos;.&apos;route_name&apos; + &apos;/&apos; + c22[r].&apos;route_id&apos;
	w1 = (RouteNamev4.length() &gt; RouteNamev5.length()) ? RouteNamev4.length() : RouteNamev5.length()
	Str1 = &apos;&quot;route_name&quot;/&quot;route_id&quot;\n&apos; + RouteNamev4 + &apos;\n&apos; + RouteNamev5 + &apos;\n&apos; + &apos;*&apos;.repeat(w1)
	println Str1
	RoutesFile.append(Str1 + &apos;\n&apos;)

a1 = ao1[r]
a2 = c22[r]

b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2
Str1 = &apos;in v4 (&apos; + a1.size() + &apos;): &apos; + c1
println Str1
RoutesFile.append(Str1 + &apos;\n&apos;)
c2 = b2 - b1
Str1 = &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2 + &apos;\n***&apos;
println Str1
RoutesFile.append(Str1 + &apos;\n&apos;)
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()

println &apos;keys&apos;
RoutesFile.append(&apos;keys\n&apos;)
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		RoutesFile.append(j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2 +&apos;\n&apos;)
		j++}}
	
println &apos;values&apos;
RoutesFile.append(&apos;values\n&apos;)
j = 1
ExcludingKeys = [&apos;member_picture&apos;,&apos;links&apos;, &apos;parameters&apos;, &apos;addresses&apos;,&apos;optimization_problem_id&apos;,&apos;route_id&apos;,&apos;channel_name&apos;,&apos;created_timestamp&apos;]
for (i in 0..a1.size() - 1){
	if (
		(d1.(b1[i].toString()) != d2.(b2[i].toString()))
		&amp;&amp; (b1[i].toString() !in ExcludingKeys)
		
		){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString())
RoutesFile.append(j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) +&apos;\n&apos;)
		j++}}
println &apos;*&apos;.repeat(${__property(ConsoleWidth)})
if (r &lt; ao1.size() - 1){System.console().readLine &apos;Next?&apos;}
}
println &apos;Finish&apos;</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes.parameters" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
FileWithv5 = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)

ao1 = new JsonSlurper().parse(FileWithv4).&apos;routes&apos;
a2 = new JsonSlurper().parse(FileWithv5).&apos;routes&apos;

RouteTitle = &apos;routes.parameters &apos; + ao1.size() + &apos;/&apos; + a2.size()
println RouteTitle + &apos;\n&apos; + &apos;*&apos;.repeat(RouteTitle.length())
//System.console().readLine &apos;Next?&apos;

c22 = []
for (i in 0..ao1.size() - 1){
	b1 = ao1[i].&apos;addresses&apos;.&apos;alias&apos;.sort()
	for (j in 0..a2.size() - 1){
		b2 = a2[j].&apos;addresses&apos;.&apos;alias&apos;.sort()
		if (b1 == b2){c22[i] = a2[j]; a2.remove(a2[j]);break}}}
		
for (r in 0..ao1.size() - 1){
	RouteNamev4 = ao1[r].&apos;parameters&apos;.&apos;route_name&apos; + &apos;/&apos; + ao1[r].&apos;unique_destination_count&apos;
	RouteNamev5 = c22[r].&apos;parameters&apos;.&apos;route_name&apos; + &apos;/&apos; + c22[r].&apos;unique_destination_count&apos;
	w1 = (RouteNamev4.length() &gt; RouteNamev5.length()) ? RouteNamev4.length() : RouteNamev5.length()
	Str1 = &apos;&quot;route_name&quot;/Stops\n&apos; + RouteNamev4 + &apos;\n&apos; + RouteNamev5 + &apos;\n&apos; + &apos;*&apos;.repeat(w1)
	println Str1

a1 = ao1[r].&apos;parameters&apos;
a2 = c22[r].&apos;parameters&apos;

b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2; println &apos;in v4 (&apos; + a1.size() + &apos;): &apos; + c1
c2 = b2 - b1; println &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2 + &apos;\n***&apos;
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()

println &apos;\nkeys&apos;
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
		
println &apos;\nvalues&apos;
j = 1
ExcludingKeys = [&apos;override_addresses&apos;, &apos;ip&apos;]
for (i in 0..a1.size() - 1){
	if (
		(d1.(b1[i].toString()) != d2.(b2[i].toString()))
		&amp;&amp; (b1[i].toString() !in ExcludingKeys)
		
		){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString())
//RoutesFile.append(j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) +&apos;\n&apos;)
		j++}}
println &apos;*&apos;.repeat(${__property(ConsoleWidth)})
if (r &lt; ao1.size() - 1){System.console().readLine &apos;Next?&apos;}
}
println &apos;Finish&apos;</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes.addresses" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
FileWithv5 = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)
RoutesAddressesFile = new File(&apos;${OptimizationsDir}/RoutesAddresses.txt&apos;)

println &apos;routes.addresses\n****************&apos;
RoutesAddressesFile.text = &apos;routes.addresses\n****************\n&apos;

ao1 = new JsonSlurper().parse(FileWithv4).&apos;routes&apos;
a2 = new JsonSlurper().parse(FileWithv5).&apos;routes&apos;

c22 = []
for (i in 0..ao1.size() - 1){
	b1 = ao1[i].&apos;addresses&apos;.&apos;alias&apos;.sort()
	for (j in 0..a2.size() - 1){
		b2 = a2[j].&apos;addresses&apos;.&apos;alias&apos;.sort()
		if (b1 == b2){
			c22[i] = a2[j]
			a2.remove(a2[j]);break}}}

for (r in 0..ao1.size() - 1){
	RouteNamev4 = ao1[r].&apos;parameters&apos;.&apos;route_name&apos;
	RouteNamev5 = c22[r].&apos;parameters&apos;.&apos;route_name&apos;
	w1 = (RouteNamev4.length() &gt; RouteNamev5.length()) ? RouteNamev4.length() : RouteNamev5.length()
	Str1 = &apos;&quot;route_name&quot;\n&apos; + RouteNamev4 + &apos;\n&apos; + RouteNamev5 + &apos;\n&apos; + &apos;*&apos;.repeat(w1)
	println Str1
	RoutesAddressesFile.append(Str1 + &apos;\n&apos;)
	//System.console().readLine &apos;Next?&apos;
	
	a1 = ao1[r].&apos;addresses&apos;
	a2 = c22[r].&apos;addresses&apos;
	b = a1.size()
	c1 = []
	c2 = []

	for (i in 0..b - 1){
		j1 = a1[i].&apos;sequence_no&apos;
		j2 = a2[i].&apos;sequence_no&apos;
		c1[j1] = a1[i]
		c2[j2] = a2[i]}
	if(!a1.&apos;sequence_no&apos;.contains(0)){
		c1.remove(0)}
	if(!a2.&apos;sequence_no&apos;.contains(0)){
		c2.remove(0)}

	for (i in 0..b - 1){
		b1 = c1[i].keySet()
		b2 = c2[i].keySet()
		c11 = b1 - b2
		Str1 = &apos;in v4 (&apos; + c1[i].size() + &apos;): &apos; + c11
		println Str1
		RoutesAddressesFile.append(Str1 + &apos;\n&apos;)
		c12 = b2 - b1
		Str1 = &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c12 + &apos;\n***&apos;
		println Str1
		RoutesAddressesFile.append(Str1 + &apos;\n&apos;)
		for (j in 0..c11.size() - 1){
			c1[i].remove(c11[j])}
		for (j in 0..c12.size() - 1){
			c2[i].remove(c12[j])}}

	println &apos;keys&apos;
	RoutesAddressesFile.append(&apos;keys\n&apos;)
	for (k in 0..b - 1){
		println &apos;Stop &apos; + (k + 1)
		RoutesAddressesFile.append(&apos;Stop &apos; + (k + 1) + &apos;\n&apos;)
		d1 = c1[k].sort()
		d2 = c2[k].sort()
		b1 = d1.keySet()
		b2 = d2.keySet()
		j = 1
			for (i in 0..d1.size() - 1){
				f1 = (d1.(b1[i].toString())).getClass().toString()
				f1 = f1.reverse()
				f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
				f1 = f1.reverse()
					f2 = (d2.(b2[i].toString())).getClass().toString()
					f2 = f2.reverse()
					f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
					f2 = f2.reverse()
				if (f1 != f2){
					Str1 = j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
					println Str1
					j++
					RoutesAddressesFile.append(Str1 + &apos;\n&apos;)}}
		println &apos;*&apos;
		RoutesAddressesFile.append(&apos;*\n&apos;)}

	println &apos;values&apos;
	ExcludingKeys = [&apos;tracking_number&apos;,&apos;optimization_problem_id&apos;,&apos;route_id&apos;,&apos;channel_name&apos;,&apos;route_destination_id&apos;,&apos;manifest&apos;]
	RoutesAddressesFile.append(&apos;values\n&apos;)
	for (k in 0..b - 1){
		Str1 = &apos;Stop &apos; + (k + 1) + &apos; (&quot;sequence_no&quot;:&apos; + k + &apos;)&apos;
		//println Str1
		//RoutesAddressesFile.append(Str1 + &apos;\n&apos;)
		d1 = c1[k].sort()
		d2 = c2[k].sort()
		b1 = d1.keySet()
		b2 = d2.keySet()
		j = 1
		for (i in 0..d1.size() - 1){
			if (
				
		(d1.(b1[i].toString()) != d2.(b2[i].toString()))
		&amp;&amp; (b1[i].toString() !in ExcludingKeys)
				){
					println Str1
		RoutesAddressesFile.append(Str1 + &apos;\n&apos;)
				Str2 = j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString())
				println Str2
				RoutesAddressesFile.append(Str2 + &apos;\n&apos;)
				j++}}}
println &apos;*&apos;.repeat(${__property(ConsoleWidth)})
if (r &lt; ao1.size() - 1){System.console().readLine &apos;Next?&apos;}
}
println &apos;Finish&apos;</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="parameters.tags_match_type" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;parameters&apos;
FileWithv4 = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
FileWithv5 = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)

a1 = new JsonSlurper().parse(FileWithv4).&apos;parameters&apos;
a2 = new JsonSlurper().parse(FileWithv5).&apos;parameters&apos;

println a1.&apos;tags_match_type&apos; + &apos; : MATCH_ALL&apos;
println a2.&apos;tags_match_type&apos; + &apos; : MATCH_ALL&apos;
/*
//a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;parameters&apos;
//a2 = new JsonSlurper().parse(prev.getResponseData()).&apos;parameters&apos;

b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2; println &apos;in v4 (&apos; + a1.size() + &apos;): &apos; + c1
c2 = b2 - b1; println &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2 + &apos;\n***&apos;
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()

println &apos;\nkeys&apos;
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
		
println &apos;\nvalues&apos;
j = 1
for (i in 0..a1.size() - 1){
	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n*****\n&apos;
		j++}}*/</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes.addresses.manifest" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;routes.addresses.manifest\n****************&apos;
FileWithv4 = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
FileWithv5 = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)

ao1 = new JsonSlurper().parse(FileWithv4).&apos;routes&apos;
a2 = new JsonSlurper().parse(FileWithv5).&apos;routes&apos;

c22 = []
for (i in 0..ao1.size() - 1){
	b1 = ao1[i].&apos;addresses&apos;.&apos;alias&apos;.sort()
	for (j in 0..a2.size() - 1){
		b2 = a2[j].&apos;addresses&apos;.&apos;alias&apos;.sort()
		if (b1 == b2){c22[i] = a2[j]; a2.remove(a2[j]);break}}}
for (r in 0..ao1.size() - 1){

RouteName = ao1[r].&apos;parameters&apos;.&apos;route_name&apos; + &apos;/&apos; + ao1[r].&apos;unique_destination_count&apos; + &apos;Stops&apos;  
println &apos;&quot;route_name&quot;: &apos; + RouteName + &apos;\n&apos; + &apos;*&apos;.repeat(RouteName.length() + 14)
System.console().readLine &apos;Next?&apos;

a1 = ao1[r].&apos;addresses&apos;
a2 = c22[r].&apos;addresses&apos;

for (i in 0..a1.size() - 1){
b1 = a1[i].&apos;manifest&apos;
b2 = a2[i].&apos;manifest&apos;
println b1 - b2;println b2 - b1}


}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="keys" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;keys&apos;
FileWithv4 = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
FileWithv5 = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)

a1 = new JsonSlurper().parse(FileWithv4)
a2 = new JsonSlurper().parse(FileWithv5)


b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2; println &apos;in v4 (&apos; + a1.size() + &apos;): &apos; + c1
c2 = b2 - b1; println &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2 + &apos;\n***&apos;
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()
System.console().readLine &apos;Next?&apos;
println &apos;\nkeys&apos;
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
System.console().readLine &apos;Next?&apos;		
println &apos;\nvalues&apos;
j = 1
for (i in 0..a1.size() - 1){
	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n*****\n&apos;
		System.console().readLine &apos;Next?&apos;
		j++}}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="parameters" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;parameters&apos;
FileWithv4 = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
FileWithv5 = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)

a1 = new JsonSlurper().parse(FileWithv4).&apos;parameters&apos;
a2 = new JsonSlurper().parse(FileWithv5).&apos;parameters&apos;

//a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;parameters&apos;
//a2 = new JsonSlurper().parse(prev.getResponseData()).&apos;parameters&apos;

b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2; println &apos;in v4 (&apos; + a1.size() + &apos;): &apos; + c1
c2 = b2 - b1; println &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2 + &apos;\n***&apos;
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()

println &apos;\nkeys&apos;
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
		
println &apos;\nvalues&apos;
j = 1
for (i in 0..a1.size() - 1){
	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n*****\n&apos;
		j++}}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes.route_demand_stats" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;routes.route_demand_stats&apos;

FileWithv4 = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
FileWithv5 = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)
//!!!!!!!!!!!!!!
a1 = new JsonSlurper().parse(FileWithv4).&apos;routes&apos;[0].&apos;route_demand_stats&apos;
a2 = new JsonSlurper().parse(FileWithv5).&apos;routes&apos;[1].&apos;route_demand_stats&apos;
b1 = a1.sort()
b2 = a2.sort()
println b1 - b2
println b2 - b1</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="addresses" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;addresses&apos;

a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;addresses&apos;
a2 = new JsonSlurper().parse(prev.getResponseData()).&apos;addresses&apos;
b = a1.size()

c1 = []
c2 = []

for (i in 0..b - 1){
	j1 = a1[i].&apos;sequence_no&apos;
	j2 = a2[i].&apos;sequence_no&apos;
	c1[j1] = a1[i]
	c2[j2] = a2[i]}
	
for (i in 0..b - 1){
b1 = c1[i].keySet()
b2 = c2[i].keySet()
c11 = b1 - b2; println &apos;in v4 (&apos; + c1[i].size() + &apos;): &apos; + c11
c22 = b2 - b1; println &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c22 + &apos;\n***&apos;
for (j in 0..c11.size() - 1){c1[i].remove(c11[j])}
for (j in 0..c22.size() - 1){c2[i].remove(c22[j])}}

println &apos;\nkeys&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
	println &apos;*&apos;}

println &apos;\nvalues&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){

	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString())
		j++}}
	println &apos;*&apos;}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes (different Quantity)" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${TestDir}/${GETv4Response}&apos;)
FileWithv5 = new File(&apos;${TestDir}/${GETv5Response}&apos;)
RoutesFile = new File(&apos;${TestDir}/Routes.txt&apos;)

a1 = new JsonSlurper().parse(FileWithv4).&apos;routes&apos;
a2 = new JsonSlurper().parse(FileWithv5).&apos;routes&apos;

println &apos;routes\n&apos;
if (a1.size() != a2.size()){
	WarningMessage = &apos;Quantity of Routes in v4 and v5 is different&apos;
	println WarningMessage + &apos;\n&apos; + &apos;!&apos;.repeat(WarningMessage.length()) + &apos;\n&apos;

println &apos;v4&apos;
println &apos;Quantity: &apos; + a1.size()
println &apos;route_name/Stops Quantity&apos;
b1=[]
for (i in 0..a1.size() - 1){
b1[i] = a1[i].&apos;parameters&apos;.&apos;route_name&apos; + &apos;/&apos; + a1[i].&apos;addresses&apos;.size()}
c1 = b1.sort()
for (i in 0..c1.size() - 1){println c1[i]}

println &apos;\nv5&apos;
println &apos;Quantity: &apos; + a2.size()
println &apos;route_name/Stops Quantity&apos;
b1=[]
for (i in 0..a2.size() - 1){
b1[i] = a2[i].&apos;parameters&apos;.&apos;route_name&apos; + &apos;/&apos; + a2[i].&apos;addresses&apos;.size()}
c1 = b1.sort()
for (i in 0..c1.size() - 1){println c1[i]}
}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="!routes.addresses" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">java.lang.management.ManagementFactory.getRuntimeMXBean().getInputArguments().each {log.info(&quot;Effective JVM argument: &quot; + &quot;$it&quot;)
}</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="route.php" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="String of Request" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">ReguestString = &apos;\
\
&amp;directions=1\
&amp;device_tracking_history=0\
&amp;notes=1\
&amp;order_inventory=false\
&amp;bundling_items=true\
&amp;route_path_output=EncodedList\
&amp;compress_path_points=1\
&apos;

vars.put(&apos;StringOfParameters&apos;, ReguestString)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Empty String of Request" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">ReguestString = &apos;&apos;

vars.put(&apos;StringOfParameters&apos;, ReguestString)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Files Processing" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.io.FileUtils

FileUtils.cleanDirectory(new File(&apos;${RoutesDir}&apos;))

FileWithv4 = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
FileWithv5 = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)
FileWithRoutesIDs = new File(&apos;${RoutesDir}/RouteIDs.txt&apos;)
FileWithRoutesIDs.text = &apos;v4,v5\n&apos;

a1 = new JsonSlurper().parse(FileWithv4).&apos;routes&apos;
a2 = new JsonSlurper().parse(FileWithv5).&apos;routes&apos;
s = a1.size()
vars.put(&apos;RoutesQuantity&apos;, s.toString())
c22 = []
for (i in 0..s - 1){
	b1 = a1[i].&apos;addresses&apos;.&apos;alias&apos;.sort()
	for (j in 0..a2.size() - 1){
		b2 = a2[j].&apos;addresses&apos;.&apos;alias&apos;.sort()
		if (b1 == b2){c22[i] = a2[j]; a2.remove(a2[j]);break}}}
		
for (i in 0..s - 1){
	Str = a1[i].&apos;route_id&apos; + &apos;,&apos; + c22[i].&apos;route_id&apos;
	FileWithRoutesIDs.append(Str + &apos;\n&apos;)}

FileWithRoutes = new File(&apos;${RoutesDir}/Routes.txt&apos;)
Str = &apos;Routes Comparison. Total Quantity: &apos; + s
FileWithRoutes.text = Str + &apos;\n&apos; + &apos;*&apos;.repeat(Str.length()) + &apos;\n&apos;</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Routes Comparison" enabled="true">
              <stringProp name="LoopController.loops">${RoutesQuantity}</stringProp>
            </LoopController>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="File with Routes" enabled="true">
                <stringProp name="filename">${RoutesDir}/RouteIDs.txt</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">v4RouteID,v5RouteID</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="File Number" enabled="true">
                <stringProp name="CounterConfig.start">1</stringProp>
                <stringProp name="CounterConfig.end"></stringProp>
                <stringProp name="CounterConfig.incr">1</stringProp>
                <stringProp name="CounterConfig.name">FileNumber</stringProp>
                <stringProp name="CounterConfig.format"></stringProp>
                <boolProp name="CounterConfig.per_user">false</boolProp>
              </CounterConfig>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
                <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4}/${v4Routes}?route_id=${v4RouteID}${StringOfParameters}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Api-Key</stringProp>
                      <stringProp name="Header.value">${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
RespFile = new File(&apos;${RoutesDir}/Routev4-${FileNumber}.json&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

StringsOfFile = RespFile.text
StringsOfFile = StringsOfFile.replace(&apos;\&quot;: \&quot;\&quot;&apos;, &apos;\&quot;: null&apos;)
StringsOfFile = StringsOfFile.replace(&apos;\\\&quot;\\\&quot;&apos;, &apos;null&apos;)//&quot;custom_fields_str_json&quot;
RespFile.text = StringsOfFile</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="!Response to File" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

for (i in 0..a.&apos;directions&apos;.size() - 1){
println a.&apos;directions&apos;[i].sort()}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="true">
                <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
                <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5Legacy}/${v4Routes}?route_id=${v5RouteID}${StringOfParameters}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
RespFile = new File(&apos;${RoutesDir}/Routev5-${FileNumber}.json&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

StringsOfFile = RespFile.text
StringsOfFile = StringsOfFile.replace(&apos;\&quot;: \&quot;\&quot;&apos;, &apos;\&quot;: null&apos;)
StringsOfFile = StringsOfFile.replace(&apos;\\\&quot;\\\&quot;&apos;, &apos;null&apos;)//&quot;custom_fields_str_json&quot;
RespFile.text = StringsOfFile

FileWithX = new File(&apos;${RoutesDir}/x-request-id(route.php).txt&apos;)
s1 = prev.getResponseHeaders()
s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
s2 = s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
FileWithX.append(&apos;Routev5-${FileNumber} &apos; +  s2)</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="keys" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${RoutesDir}/Routev4-${FileNumber}.json&apos;)
FileWithv5 = new File(&apos;${RoutesDir}/Routev5-${FileNumber}.json&apos;)
a1 = new JsonSlurper().parse(FileWithv4)
a2 = new JsonSlurper().parse(FileWithv5)
FileWithRoutes = new File(&apos;${RoutesDir}/Routes.txt&apos;)

RouteNamev4 = a1.&apos;parameters&apos;.&apos;route_name&apos;
RouteNamev5 = a2.&apos;parameters&apos;.&apos;route_name&apos;
	w1 = (RouteNamev4.length() &gt; RouteNamev5.length()) ? RouteNamev4.length() : RouteNamev5.length()
	w2 = (RouteNamev4 != RouteNamev5) ? RouteNamev5 + &apos;\n&apos; : &apos;&apos;
	StrR = &apos;Route &apos; + ${FileNumber} + &apos;:&apos;
	Str1 =  &apos;\n&apos; + StrR + &apos;\n&apos; + &apos;*&apos;.repeat(StrR.length()) + &apos;\n&apos; + RouteNamev4 + &apos;\n&apos; + w2 + &apos;*&apos;.repeat(w1)
	println Str1
	FileWithRoutes.append(Str1 + &apos;\n&apos;)

b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2 
Str1 = &apos;Keys:\nin v4 (&apos; + a1.size() + &apos;): &apos; + c1
FileWithRoutes.append(Str1 + &apos;\n&apos;)
c2 = b2 - b1
Str1 = &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2
FileWithRoutes.append(Str1 + &apos;\n&apos;)
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()

FileWithRoutes.append(&apos;\nTypes:\n&apos;)
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		FileWithRoutes.append(j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2 + &apos;\n&apos;)
		j++}}
	
FileWithRoutes.append(&apos;\nValues:\n&apos;)
ExcludingKeys = [&apos;route_id&apos;,&apos;optimization_problem_id&apos;,&apos;channel_name&apos;,&apos;created_timestamp&apos;,&apos;parameters&apos;,&apos;addresses&apos;,&apos;links&apos;,&apos;member_picture&apos;]
j = 1
for (i in 0..a1.size() - 1){		
	if (d1.(b1[i].toString()) != d2.(b2[i].toString())
	&amp;&amp; (b1[i].toString() !in ExcludingKeys)){
		FileWithRoutes.append(j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n&apos;)
		j++}}
FileWithRoutes.append(&apos;*&apos;.repeat(${__property(ConsoleWidth)}) + &apos;\n&apos;)</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="parameters" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${RoutesDir}/Routev4-${FileNumber}.json&apos;)
FileWithv5 = new File(&apos;${RoutesDir}/Routev5-${FileNumber}.json&apos;)
a1 = new JsonSlurper().parse(FileWithv4).&apos;parameters&apos;
a2 = new JsonSlurper().parse(FileWithv5).&apos;parameters&apos;
FileWithRoutes = new File(&apos;${RoutesDir}/Routes.txt&apos;)

b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2 
Str1 = &apos;&quot;parameters&quot;:{}\nKeys:\nin v4 (&apos; + a1.size() + &apos;): &apos; + c1
FileWithRoutes.append(Str1 + &apos;\n&apos;)
c2 = b2 - b1
Str1 = &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2 + &apos;\n&apos;
FileWithRoutes.append(Str1)
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()

FileWithRoutes.append(&apos;\nTypes:\n&apos;)
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		FileWithRoutes.append(j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2 + &apos;\n&apos;)
		j++}}
	
FileWithRoutes.append(&apos;\nValues:\n&apos;)
ExcludingKeys = [&apos;ip&apos;,&apos;override_addresses&apos;,&apos;max_tour_size&apos;]
j = 1
for (i in 0..a1.size() - 1){		
	if (d1.(b1[i].toString()) != d2.(b2[i].toString())		
	&amp;&amp; (b1[i].toString() !in ExcludingKeys)){
		FileWithRoutes.append(j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n&apos;)
		j++}}
FileWithRoutes.append(&apos;*&apos;.repeat(${__property(ConsoleWidth)}) + &apos;\n&apos;)</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes.addresses" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${RoutesDir}/Routev4-${FileNumber}.json&apos;)
FileWithv5 = new File(&apos;${RoutesDir}/Routev5-${FileNumber}.json&apos;)

FileWithRoutes = new File(&apos;${RoutesDir}/Routes.txt&apos;)

a1 = new JsonSlurper().parse(FileWithv4)
a2 = new JsonSlurper().parse(FileWithv5)
	
	a1 = a1.&apos;addresses&apos;
	a2 = a2.&apos;addresses&apos;
	b = a1.size()
	c1 = []
	c2 = []

	for (i in 0..b - 1){
		j1 = a1[i].&apos;sequence_no&apos;
		j2 = a2[i].&apos;sequence_no&apos;
		c1[j1] = a1[i]
		c2[j2] = a2[i]}
	if(!a1.&apos;sequence_no&apos;.contains(0)){
		c1.remove(0)}
	if(!a2.&apos;sequence_no&apos;.contains(0)){
		c2.remove(0)}
FileWithRoutes.append(&apos;&quot;addresses&quot;:[]\nKeys:\n&apos;)
ExcludingKeys = [&apos;geofence_local_visited_timestamp&apos;, &apos;geofence_local_visited_lat&apos;, &apos;geofence_local_visited_lng&apos;, &apos;geofence_local_departed_timestamp&apos;, &apos;geofence_local_departed_lat&apos;, &apos;geofence_local_departed_lng&apos;, &apos;geofence_local_service_time&apos;, &apos;workflow_uuid&apos;, &apos;invalid_sequence&apos;]
	for (i in 0..b - 1){
		b1 = c1[i].keySet()
		b2 = c2[i].keySet()
		c11 = b1 - b2
		keys = new ArrayList(c11)
		Str1 = &apos;&apos;
		for (i1 in 0..keys.size() - 1){
			if (keys[i1] !in ExcludingKeys){
				Str1 = Str1 + keys[i1]
				Str1 = (i1 &lt; keys.size() - 1) ? Str1 + &apos;, &apos; : Str1 + &apos;&apos;}}
		if (Str1 != &apos;&apos;){Str1 = &apos;Stop &apos; + (i + 1) + &apos;\nin v4 (&apos; + c1[i].size() + &apos;): &apos; + Str1 + &apos;\n&apos;}
		c12 = b2 - b1
		if (c12.toString() != &apos;[]&apos;){if (Str1 == &apos;&apos;){Str1 = &apos;Stop &apos; + (i + 1) + &apos;\n&apos;}
			Str1 = Str1 + &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c12
		FileWithRoutes.append(Str1 + &apos;\n&apos;)}		
	for (j in 0..c11.size() - 1){
		c1[i].remove(c11[j])}
	for (j in 0..c12.size() - 1){
		c2[i].remove(c12[j])}}
//Types
FileWithRoutes.append(&apos;\nTypes:\n&apos;)
ExcludingKeys = [&apos;route_destination_id&apos;]
for (k in 0..b - 1){
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		if (b1[i] !in ExcludingKeys){
			f1 = (d1.(b1[i].toString())).getClass().toString()
			f1 = f1.reverse()
			f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
			f1 = f1.reverse()
				f2 = (d2.(b2[i].toString())).getClass().toString()
				f2 = f2.reverse()
				f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
				f2 = f2.reverse()
			if (f1 != f2){
				if (j == 1){FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos;\n&apos;)}
				FileWithRoutes.append(&apos;\t&apos; + j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2 + &apos;\n&apos;)
				j++}}}}
//Values
FileWithRoutes.append(&apos;\nValues:\n&apos;)
//&apos;custom_fields_str_json&apos;,
ExcludingKeys = [&apos;tracking_number&apos;,&apos;optimization_problem_id&apos;,&apos;route_id&apos;,&apos;channel_name&apos;,&apos;route_destination_id&apos;,&apos;manifest&apos;]
for (k in 0..b - 1){
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		if (b1[i].toString() !in ExcludingKeys){
            if (b1[i].toString() == &apos;custom_fields_str_json&apos;){
				d1.(b1[i].toString()) = (new JsonSlurper().parseText(d1.&apos;custom_fields_str_json&apos;)).sort()
				d2.(b2[i].toString()) = (new JsonSlurper().parseText(d2.&apos;custom_fields_str_json&apos;)).sort()}
			if (d1.(b1[i].toString()).getClass().toString().contains(&apos;ArrayList&apos;)){
				d1.(b1[i].toString()).sort()
				d2.(b2[i].toString()).sort()}
			if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
				if (j == 1){
					FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos; (&quot;sequence_no&quot;:&apos; + k + &apos;)&apos; + &apos;\n&apos;)}
				FileWithRoutes.append(&apos;\t&apos; + j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n&apos;)
				j++}}}}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes.addressesArrayList Only" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${RoutesDir}/Routev4-${FileNumber}.json&apos;)
FileWithv5 = new File(&apos;${RoutesDir}/Routev5-${FileNumber}.json&apos;)

FileWithRoutes = new File(&apos;${RoutesDir}/Routes.txt&apos;)

a1 = new JsonSlurper().parse(FileWithv4)
a2 = new JsonSlurper().parse(FileWithv5)
	
	a1 = a1.&apos;addresses&apos;
	a2 = a2.&apos;addresses&apos;
	b = a1.size()
	c1 = []
	c2 = []

	for (i in 0..b - 1){
		j1 = a1[i].&apos;sequence_no&apos;
		j2 = a2[i].&apos;sequence_no&apos;
		c1[j1] = a1[i]
		c2[j2] = a2[i]}
	if(!a1.&apos;sequence_no&apos;.contains(0)){
		c1.remove(0)}
	if(!a2.&apos;sequence_no&apos;.contains(0)){
		c2.remove(0)}
FileWithRoutes.append(&apos;&quot;addresses&quot;:[]\nKeys:\n&apos;)
ExcludingKeys = [&apos;geofence_local_visited_timestamp&apos;, &apos;geofence_local_visited_lat&apos;, &apos;geofence_local_visited_lng&apos;, &apos;geofence_local_departed_timestamp&apos;, &apos;geofence_local_departed_lat&apos;, &apos;geofence_local_departed_lng&apos;, &apos;geofence_local_service_time&apos;, &apos;workflow_uuid&apos;, &apos;invalid_sequence&apos;]
	for (i in 0..b - 1){
		b1 = c1[i].keySet()
		b2 = c2[i].keySet()
		c11 = b1 - b2
		keys = new ArrayList(c11)
		Str1 = &apos;&apos;
		for (i1 in 0..keys.size() - 1){
			if (keys[i1] !in ExcludingKeys){
				Str1 = Str1 + keys[i1]
				Str1 = (i1 &lt; keys.size() - 1) ? Str1 + &apos;, &apos; : Str1 + &apos;&apos;}}
		if (Str1 != &apos;&apos;){Str1 = &apos;Stop &apos; + (i + 1) + &apos;\nin v4 (&apos; + c1[i].size() + &apos;): &apos; + Str1 + &apos;\n&apos;}
		c12 = b2 - b1
		if (c12.toString() != &apos;[]&apos;){if (Str1 == &apos;&apos;){Str1 = &apos;Stop &apos; + (i + 1) + &apos;\n&apos;}
			Str1 = Str1 + &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c12
		FileWithRoutes.append(Str1 + &apos;\n&apos;)}		
	for (j in 0..c11.size() - 1){
		c1[i].remove(c11[j])}
	for (j in 0..c12.size() - 1){
		c2[i].remove(c12[j])}}
//Types
FileWithRoutes.append(&apos;\nTypes:\n&apos;)
ExcludingKeys = [&apos;route_destination_id&apos;]
for (k in 0..b - 1){
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		if (b1[i] !in ExcludingKeys){
			f1 = (d1.(b1[i].toString())).getClass().toString()
			f1 = f1.reverse()
			f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
			f1 = f1.reverse()
				f2 = (d2.(b2[i].toString())).getClass().toString()
				f2 = f2.reverse()
				f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
				f2 = f2.reverse()
			if (f1 != f2){
				if (j == 1){FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos;\n&apos;)}
				FileWithRoutes.append(&apos;\t&apos; + j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2 + &apos;\n&apos;)
				j++}}}}
//Values
FileWithRoutes.append(&apos;\nValues:\n&apos;)
ExcludingKeys = [&apos;tracking_number&apos;,&apos;optimization_problem_id&apos;,&apos;route_id&apos;,&apos;channel_name&apos;,&apos;route_destination_id&apos;,&apos;manifest&apos;]
for (k in 0..b - 1){
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		if (b1[i].toString() !in ExcludingKeys){
			if (d1.(b1[i].toString()).getClass().toString().contains(&apos;ArrayList&apos;)){
				d1.(b1[i].toString()).sort()
				d2.(b2[i].toString()).sort()}
		if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
				if (j == 1){FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos; (&quot;sequence_no&quot;:&apos; + k + &apos;)&apos; + &apos;\n&apos;)}
				FileWithRoutes.append(&apos;\t&apos; + j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n&apos;)
				j++}
			}}}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Unsorted Arrays routes.addresses" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${RoutesDir}/Routev4-${FileNumber}.json&apos;)
FileWithv5 = new File(&apos;${RoutesDir}/Routev5-${FileNumber}.json&apos;)

FileWithRoutes = new File(&apos;${RoutesDir}/Routes.txt&apos;)

a1 = new JsonSlurper().parse(FileWithv4)
a2 = new JsonSlurper().parse(FileWithv5)
	
	a1 = a1.&apos;addresses&apos;
	a2 = a2.&apos;addresses&apos;
	b = a1.size()
	c1 = []
	c2 = []

	for (i in 0..b - 1){
		j1 = a1[i].&apos;sequence_no&apos;
		j2 = a2[i].&apos;sequence_no&apos;
		c1[j1] = a1[i]
		c2[j2] = a2[i]}
	if(!a1.&apos;sequence_no&apos;.contains(0)){
		c1.remove(0)}
	if(!a2.&apos;sequence_no&apos;.contains(0)){
		c2.remove(0)}
FileWithRoutes.append(&apos;&quot;addresses&quot;:[]\nKeys:\n&apos;)
ExcludingKeys = [&apos;geofence_local_visited_timestamp&apos;, &apos;geofence_local_visited_lat&apos;, &apos;geofence_local_visited_lng&apos;, &apos;geofence_local_departed_timestamp&apos;, &apos;geofence_local_departed_lat&apos;, &apos;geofence_local_departed_lng&apos;, &apos;geofence_local_service_time&apos;, &apos;workflow_uuid&apos;, &apos;invalid_sequence&apos;]
	for (i in 0..b - 1){
		b1 = c1[i].keySet()
		b2 = c2[i].keySet()
		c11 = b1 - b2
		keys = new ArrayList(c11)
		Str1 = &apos;&apos;
		for (i1 in 0..keys.size() - 1){
			if (keys[i1] !in ExcludingKeys){
				Str1 = Str1 + keys[i1]
				Str1 = (i1 &lt; keys.size() - 1) ? Str1 + &apos;, &apos; : Str1 + &apos;&apos;}}
		if (Str1 != &apos;&apos;){Str1 = &apos;Stop &apos; + (i + 1) + &apos;\nin v4 (&apos; + c1[i].size() + &apos;): &apos; + Str1 + &apos;\n&apos;}
		c12 = b2 - b1
		if (c12.toString() != &apos;[]&apos;){if (Str1 == &apos;&apos;){Str1 = &apos;Stop &apos; + (i + 1) + &apos;\n&apos;}
			Str1 = Str1 + &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c12
		FileWithRoutes.append(Str1 + &apos;\n&apos;)}		
	for (j in 0..c11.size() - 1){
		c1[i].remove(c11[j])}
	for (j in 0..c12.size() - 1){
		c2[i].remove(c12[j])}}
//Types
FileWithRoutes.append(&apos;\nTypes:\n&apos;)
ExcludingKeys = [&apos;route_destination_id&apos;]
for (k in 0..b - 1){
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		if (b1[i] !in ExcludingKeys){
			f1 = (d1.(b1[i].toString())).getClass().toString()
			f1 = f1.reverse()
			f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
			f1 = f1.reverse()
				f2 = (d2.(b2[i].toString())).getClass().toString()
				f2 = f2.reverse()
				f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
				f2 = f2.reverse()
			if (f1 != f2){
				if (j == 1){FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos;\n&apos;)}
				FileWithRoutes.append(&apos;\t&apos; + j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2 + &apos;\n&apos;)
				j++}}}}
//Values
FileWithRoutes.append(&apos;\nValues:\n&apos;)
ExcludingKeys = [&apos;tracking_number&apos;,&apos;optimization_problem_id&apos;,&apos;route_id&apos;,&apos;channel_name&apos;,&apos;route_destination_id&apos;,&apos;manifest&apos;]
for (k in 0..b - 1){
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		if (b1[i].toString() !in ExcludingKeys){
			if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
				if (j == 1){FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos; (&quot;sequence_no&quot;:&apos; + k + &apos;)&apos; + &apos;\n&apos;)}
				FileWithRoutes.append(&apos;\t&apos; + j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n&apos;)
				j++}}}}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSON" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${RoutesDir}/Routev4-${FileNumber}.json&apos;)
FileWithv5 = new File(&apos;${RoutesDir}/Routev5-${FileNumber}.json&apos;)

FileWithRoutes = new File(&apos;${RoutesDir}/Routes.txt&apos;)

a1 = new JsonSlurper().parse(FileWithv4)
a2 = new JsonSlurper().parse(FileWithv5)
	
	a1 = a1.&apos;addresses&apos;
	a2 = a2.&apos;addresses&apos;
	b = a1.size()
	c1 = []
	c2 = []

	for (i in 0..b - 1){
		j1 = a1[i].&apos;sequence_no&apos;
		j2 = a2[i].&apos;sequence_no&apos;
		c1[j1] = a1[i]
		c2[j2] = a2[i]}
	if(!a1.&apos;sequence_no&apos;.contains(0)){
		c1.remove(0)}
	if(!a2.&apos;sequence_no&apos;.contains(0)){
		c2.remove(0)}
FileWithRoutes.append(&apos;&quot;addresses&quot;:[]\nKeys:\n&apos;)
ExcludingKeys = [&apos;geofence_local_visited_timestamp&apos;, &apos;geofence_local_visited_lat&apos;, &apos;geofence_local_visited_lng&apos;, &apos;geofence_local_departed_timestamp&apos;, &apos;geofence_local_departed_lat&apos;, &apos;geofence_local_departed_lng&apos;, &apos;geofence_local_service_time&apos;, &apos;workflow_uuid&apos;, &apos;invalid_sequence&apos;]
	for (i in 0..b - 1){
		b1 = c1[i].keySet()
		b2 = c2[i].keySet()
		c11 = b1 - b2
		keys = new ArrayList(c11)
		Str1 = &apos;&apos;
		for (i1 in 0..keys.size() - 1){
			if (keys[i1] !in ExcludingKeys){
				Str1 = Str1 + keys[i1]
				Str1 = (i1 &lt; keys.size() - 1) ? Str1 + &apos;, &apos; : Str1 + &apos;&apos;}}
		if (Str1 != &apos;&apos;){Str1 = &apos;Stop &apos; + (i + 1) + &apos;\nin v4 (&apos; + c1[i].size() + &apos;): &apos; + Str1 + &apos;\n&apos;}
		c12 = b2 - b1
		if (c12.toString() != &apos;[]&apos;){if (Str1 == &apos;&apos;){Str1 = &apos;Stop &apos; + (i + 1) + &apos;\n&apos;}
			Str1 = Str1 + &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c12
		FileWithRoutes.append(Str1 + &apos;\n&apos;)}		
	for (j in 0..c11.size() - 1){
		c1[i].remove(c11[j])}
	for (j in 0..c12.size() - 1){
		c2[i].remove(c12[j])}}
//Types
FileWithRoutes.append(&apos;\nTypes:\n&apos;)
ExcludingKeys = [&apos;route_destination_id&apos;]
for (k in 0..b - 1){
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		if (b1[i] !in ExcludingKeys){
			f1 = (d1.(b1[i].toString())).getClass().toString()
			f1 = f1.reverse()
			f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
			f1 = f1.reverse()
				f2 = (d2.(b2[i].toString())).getClass().toString()
				f2 = f2.reverse()
				f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
				f2 = f2.reverse()
			if (f1 != f2){
				if (j == 1){FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos;\n&apos;)}
				FileWithRoutes.append(&apos;\t&apos; + j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2 + &apos;\n&apos;)
				j++}}}}
//Values
FileWithRoutes.append(&apos;\nValues:\n&apos;)
//&apos;custom_fields_str_json&apos;,
ExcludingKeys = [&apos;tracking_number&apos;,&apos;optimization_problem_id&apos;,&apos;route_id&apos;,&apos;channel_name&apos;,&apos;route_destination_id&apos;,&apos;manifest&apos;]
for (k in 0..b - 1){
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		if (b1[i].toString() !in ExcludingKeys){


			/*aadr1 = d1.(b1[i].toString())
			aadr2 = d2.(b2[i].toString())
			if (d1 == &apos;custom_fields_str_json&apos;)
				{println d1.b1[i].toString()
				}
			
		if (aadr1 != aadr2){
				if (j == 1){FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos; (&quot;sequence_no&quot;:&apos; + k + &apos;)&apos; + &apos;\n&apos;)}
				FileWithRoutes.append(&apos;\t&apos; + j + &apos;) &apos; + b1[i] + &apos;:&apos;+ aadr1 + &apos; | &apos; + aadr2 + &apos;\n&apos;)
				j++}*/
			}}}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="directions" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${RoutesDir}/Routev4-${FileNumber}.json&apos;)
FileWithv5 = new File(&apos;${RoutesDir}/Routev5-${FileNumber}.json&apos;)
a1 = new JsonSlurper().parse(FileWithv4).&apos;directions&apos;
a2 = new JsonSlurper().parse(FileWithv5).&apos;directions&apos;
FileWithRoutes = new File(&apos;${RoutesDir}/Routes.txt&apos;)
println a1-a2
println a2-a1</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Old routes.addresses" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${RoutesDir}/Routev4-${FileNumber}.json&apos;)
FileWithv5 = new File(&apos;${RoutesDir}/Routev5-${FileNumber}.json&apos;)

FileWithRoutes = new File(&apos;${RoutesDir}/Routes.txt&apos;)

a1 = new JsonSlurper().parse(FileWithv4)
a2 = new JsonSlurper().parse(FileWithv5)
	
	a1 = a1.&apos;addresses&apos;
	a2 = a2.&apos;addresses&apos;
	b = a1.size()
	c1 = []
	c2 = []

	for (i in 0..b - 1){
		j1 = a1[i].&apos;sequence_no&apos;
		j2 = a2[i].&apos;sequence_no&apos;
		c1[j1] = a1[i]
		c2[j2] = a2[i]}
	if(!a1.&apos;sequence_no&apos;.contains(0)){
		c1.remove(0)}
	if(!a2.&apos;sequence_no&apos;.contains(0)){
		c2.remove(0)}
FileWithRoutes.append(&apos;&quot;addresses&quot;:[]\nKeys:\n&apos;)
	for (i in 0..b - 1){
		b1 = c1[i].keySet()
		b2 = c2[i].keySet()
		
		c11 = b1 - b2
		Str1 = &apos;Stop &apos; + (i + 1) + &apos;\nin v4 (&apos; + c1[i].size() + &apos;): &apos; + c11
		FileWithRoutes.append(Str1 + &apos;\n&apos;)
		
		c12 = b2 - b1
		Str1 = &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c12
		FileWithRoutes.append(Str1 + &apos;\n&apos;)
		
		for (j in 0..c11.size() - 1){
			c1[i].remove(c11[j])}
		for (j in 0..c12.size() - 1){
			c2[i].remove(c12[j])}}

FileWithRoutes.append(&apos;\nTypes:\n&apos;)
ExcludingKeys = [&apos;route_destination_id&apos;]
for (k in 0..b - 1){
	//FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos;\n&apos;)
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		if (b1[i] !in ExcludingKeys){
			f1 = (d1.(b1[i].toString())).getClass().toString()
			f1 = f1.reverse()
			f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
			f1 = f1.reverse()
				f2 = (d2.(b2[i].toString())).getClass().toString()
				f2 = f2.reverse()
				f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
				f2 = f2.reverse()
			if (f1 != f2){
				if (j==1){FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos;\n&apos;)}
				FileWithRoutes.append(&apos;\t&apos; + j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2 + &apos;\n&apos;)
				j++}}}}

FileWithRoutes.append(&apos;\nValues:\n&apos;)
ExcludingKeys = [&apos;tracking_number&apos;,&apos;optimization_problem_id&apos;,&apos;route_id&apos;,&apos;channel_name&apos;,&apos;route_destination_id&apos;,&apos;manifest&apos;]
for (k in 0..b - 1){
	//FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos; (&quot;sequence_no&quot;:&apos; + k + &apos;)&apos; + &apos;\n&apos;)
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		if (b1[i].toString() !in ExcludingKeys){
			if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
				if (j==1){FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos; (&quot;sequence_no&quot;:&apos; + k + &apos;)&apos; + &apos;\n&apos;)}
				FileWithRoutes.append(&apos;\t&apos; + j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; v4|v5 &apos; + d2.(b2[i].toString()) + &apos;\n&apos;)
				j++}}}}</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Finish" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">println &apos;Finish&apos;</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Territory Orders" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Api-Key</stringProp>
                <stringProp name="Header.value">${APIKey}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="territory_id" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">vars.put(&apos;TerritoryID&apos;, &apos;C204E5B038338BFF80A4F40A3CAFE112&apos;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Territory" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Brooklyn" enabled="false">
              <stringProp name="TestPlan.comments">&quot;tracking_number&quot;:&quot;${TrackingNumber}&quot;</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4APIPath}/territory.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;territory&quot;:{&#xd;
		&quot;type&quot;:&quot;poly&quot;,&#xd;
		&quot;data&quot;: [&#xd;
			&quot;40.640919,-74.021521&quot;,&#xd;
			&quot;40.638868,-74.021693&quot;,&#xd;
			&quot;40.637728,-74.02062&quot;,&#xd;
			&quot;40.635904,-74.017702&quot;,&#xd;
			&quot;40.635057,-74.0165&quot;,&#xd;
			&quot;40.633364,-74.015985&quot;,&#xd;
			&quot;40.631084,-74.016672&quot;,&#xd;
			&quot;40.624765,-74.019118&quot;,&#xd;
			&quot;40.62005,-74.023102&quot;,&#xd;
			&quot;40.615554,-74.026772&quot;,&#xd;
			&quot;40.613649,-74.028617&quot;,&#xd;
			&quot;40.612525,-74.030119&quot;,&#xd;
			&quot;40.611124,-74.031299&quot;,&#xd;
			&quot;40.610602,-74.032329&quot;,&#xd;
			&quot;40.610163,-74.033402&quot;,&#xd;
			&quot;40.609658,-74.035054&quot;,&#xd;
			&quot;40.610912,-74.035891&quot;,&#xd;
			&quot;40.612297,-74.037264&quot;,&#xd;
			&quot;40.613811,-74.039024&quot;,&#xd;
			&quot;40.614707,-74.039646&quot;,&#xd;
			&quot;40.615477,-74.040113&quot;,&#xd;
			&quot;40.619696,-74.040993&quot;,&#xd;
			&quot;40.62253,-74.0414&quot;,&#xd;
			&quot;40.624223,-74.041529&quot;,&#xd;
			&quot;40.628894,-74.041036&quot;,&#xd;
			&quot;40.630295,-74.040714&quot;,&#xd;
			&quot;40.634496,-74.038782&quot;,&#xd;
			&quot;40.639688,-74.036122&quot;,&#xd;
			&quot;40.640518,-74.035478&quot;,&#xd;
			&quot;40.641088,-74.034427&quot;,&#xd;
			&quot;40.641495,-74.033568&quot;,&#xd;
			&quot;40.641707,-74.031959&quot;,&#xd;
			&quot;40.641609,-74.030586&quot;,&#xd;
			&quot;40.64143,-74.029599&quot;,&#xd;
			&quot;40.641072,-74.028569&quot;,&#xd;
			&quot;40.640193,-74.026487&quot;,&#xd;
			&quot;40.639916,-74.024921&quot;,&#xd;
			&quot;40.640128,-74.023419&quot;,&#xd;
			&quot;40.6406,-74.022303&quot;,&#xd;
			&quot;40.641007,-74.021767&quot;]},&#xd;
	&quot;territory_color&quot;:&quot;f83a22&quot;,&#xd;
	&quot;territory_name&quot;:&quot;${TerritoryName}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Values Generation" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.commons.lang.RandomStringUtils

vars.put(&apos;TerritoryName&apos;, RandomStringUtils.random(32, ((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()))</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="territory_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;territory_id&apos;
vars.put(&apos;TerritoryID&apos;, b.toString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Brooklyn Serg" enabled="false">
              <stringProp name="TestPlan.comments">&quot;tracking_number&quot;:&quot;${TrackingNumber}&quot;</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4APIPath}/territory.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;territory&quot;:{&#xd;
		&quot;type&quot;:&quot;poly&quot;,&#xd;
		&quot;data&quot;:[&#xd;
			&quot;40.620008,-74.040325&quot;,&#xd;
			&quot;40.609518,-74.032256&quot;,&#xd;
			&quot;40.614535,-74.026763&quot;,&#xd;
			&quot;40.613753,-74.014404&quot;,&#xd;
			&quot;40.617662,-74.007881&quot;,&#xd;
			&quot;40.622158,-74.007537&quot;,&#xd;
			&quot;40.626262,-74.011743&quot;,&#xd;
			&quot;40.629519,-74.023502&quot;,&#xd;
			&quot;40.635251,-74.033458&quot;,&#xd;
			&quot;40.636163,-74.037406&quot;]},&#xd;
	&quot;territory_color&quot;:&quot;f83a22&quot;,&#xd;
	&quot;territory_name&quot;:&quot;${TerritoryName}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Values Generation" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.commons.lang.RandomStringUtils

vars.put(&apos;TerritoryName&apos;, RandomStringUtils.random(32, ((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()))</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="territory_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;territory_id&apos;
vars.put(&apos;TerritoryID&apos;, b.toString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Tampa" enabled="true">
              <stringProp name="TestPlan.comments">&quot;tracking_number&quot;:&quot;${TrackingNumber}&quot;</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4APIPath}/territory.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;territory&quot;:{&#xd;
		&quot;type&quot;:&quot;rect&quot;,&#xd;
		&quot;data&quot;:[&quot;27.966634,-82.450608&quot;,&quot;27.980581,-82.414645&quot;]},&#xd;
	&quot;territory_color&quot;:&quot;b3dc6c&quot;,&#xd;
	&quot;territory_name&quot;:&quot;${TerritoryName}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Values Generation" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.commons.lang.RandomStringUtils

vars.put(&apos;TerritoryName&apos;, RandomStringUtils.random(32, ((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()))</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="territory_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;territory_id&apos;
vars.put(&apos;TerritoryID&apos;, b.toString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET" enabled="false">
              <stringProp name="TestPlan.comments">&quot;tracking_number&quot;:&quot;${TrackingNumber}&quot;</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4APIPath}/territory.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="territory_id Getting" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;territory_id&apos;
//println b.getClass()
//vars.put(&apos;TerritoryID&apos;, b.toString().replace(&apos; &apos;, &apos;&apos;).replace(&apos;[&apos;, &apos;&apos;).replace(&apos;]&apos;, &apos;&apos;))
vars.put(&apos;IDForDelete&apos;, b.size().toString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Order" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Brooklyn" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Order 1" enabled="true">
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Orders}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;address_1&quot;: &quot;9620 3rd Ave, Brooklyn, NY 11209, United States&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Order 2" enabled="true">
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Orders}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;address_1&quot;: &quot;225 91st St, Brooklyn, NY 11209, USA&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Order 3" enabled="true">
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Orders}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;address_1&quot;: &quot;455 78th St, Brooklyn, NY 11209, USA&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Order 4" enabled="true">
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Orders}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;address_1&quot;: &quot;219 90th St, Brooklyn, NY 11209, USA&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Order 5" enabled="true">
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Orders}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;address_1&quot;: &quot;8950 Colonial Rd, Brooklyn, NY 11209, USA&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Tampa" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Values Generation" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.commons.lang.RandomStringUtils

a = new Date() + 1
b = a.format(&apos;yyyy-MM-dd&apos;)

vars.put(&apos;DateForRequest&apos;, b.toString())

vars.put(&apos;TerritoryName&apos;, RandomStringUtils.random(32, ((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()))</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST New Order API 1" enabled="true">
                <stringProp name="TestPlan.comments">&quot;tracking_number&quot;:&quot;${TrackingNumber}&quot;</stringProp>
                <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/${v5OrdersPlatformAPI}/create</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;address_1&quot;: &quot;1206 E 25th Ave, Tampa, FL 33605, USA&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST New Order API 2" enabled="true">
                <stringProp name="TestPlan.comments">&quot;tracking_number&quot;:&quot;${TrackingNumber}&quot;</stringProp>
                <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/${v5OrdersPlatformAPI}/create</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;address_1&quot;: &quot;1506 E 24th Ave, Tampa, FL 33605, USA&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST New Order API 3" enabled="true">
                <stringProp name="TestPlan.comments">&quot;tracking_number&quot;:&quot;${TrackingNumber}&quot;</stringProp>
                <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/${v5OrdersPlatformAPI}/create</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;address_1&quot;: &quot;1701 E 26th Ave, Tampa, FL 33605, USA&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4 Order 1" enabled="false">
                <stringProp name="TestPlan.comments">&quot;day_scheduled_for_YYMMDD&quot;: &quot;${DateForRequest}&quot;</stringProp>
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4}/${v4Orders}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;address_1&quot;: &quot;1206 E 25th Ave, Tampa, FL 33605, USA&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4 Order 2" enabled="false">
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Orders}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;address_1&quot;: &quot;1506 E 24th Ave, Tampa, FL 33605, USA&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4 Order 3" enabled="false">
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Orders}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;address_1&quot;: &quot;1701 E 26th Ave, Tampa, FL 33605, USA&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4 Order 4" enabled="false">
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Orders}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;address_1&quot;: &quot;3413 N 15th St, Tampa, FL 33605, USA&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Orderv4 5" enabled="false">
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Orders}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;address_1&quot;: &quot;1217 E 28th Ave, Tampa, FL 33605, USA&quot;&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Optimization" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4 Brooklyn" enabled="false">
              <stringProp name="TestPlan.comments">OK</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?redirect=0&amp;id_only=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;order_territories&quot;:{&#xd;
		&quot;split_territories&quot;:false,&#xd;
		&quot;territories_id&quot;:[&quot;${TerritoryID}&quot;]},&#xd;
	&quot;parameters&quot;:{&quot;route_name&quot;:&quot;Combined Route ${TerritoryID}&quot;},&#xd;
	&quot;optimization_profile_id&quot;:&quot;73d4d9e5-2971-419b-a69c-3c74fd32d076&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv4&apos;, b)

FileWithIDs = new File(&apos;${OptimizationsDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.text = b + &apos;,&apos;

RespFile = new File(&apos;${OptimizationsDir}/${POSTv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4 Tampa" enabled="true">
              <stringProp name="TestPlan.comments">OK</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?redirect=0&amp;id_only=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;order_territories&quot;:{&#xd;
		&quot;split_territories&quot;:false,&#xd;
		&quot;territories_id&quot;:[&quot;${TerritoryID}&quot;]},&#xd;
	&quot;parameters&quot;:{&quot;route_name&quot;:&quot;Combined Route ${TerritoryID}&quot;},&#xd;
	&quot;optimization_profile_id&quot;:&quot;658bf6af-c2de-4379-adb4-0f9fd66f0e07&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv4&apos;, b)

FileWithIDs = new File(&apos;${OptimizationsDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.text = b + &apos;,&apos;

RespFile = new File(&apos;${OptimizationsDir}/${POSTv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
              <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv4}&amp;wait_for_final_state=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv5Legacy Brooklyn" enabled="false">
              <stringProp name="TestPlan.comments">?redirect=0</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?redirect=0&amp;id_only=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;order_territories&quot;:{&#xd;
		&quot;split_territories&quot;:false,&#xd;
		&quot;territories_id&quot;:[&quot;${TerritoryID}&quot;]},&#xd;
	&quot;parameters&quot;:{&quot;route_name&quot;:&quot;Combined Route ${TerritoryID}&quot;},&#xd;
	&quot;optimization_profile_id&quot;:&quot;73d4d9e5-2971-419b-a69c-3c74fd32d076&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv5&apos;, b)

FileWithIDs = new File(&apos;${OptimizationsDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.append(b)

RespFile = new File(&apos;${OptimizationsDir}/${POSTv5Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
s1 = prev.getResponseHeaders()
s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
FileWithX.text = &apos;POSTv5Legacy &apos; +  s2</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv5Legacy Tampa" enabled="true">
              <stringProp name="TestPlan.comments">?redirect=0</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?redirect=0&amp;id_only=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;order_territories&quot;:{&#xd;
		&quot;split_territories&quot;:false,&#xd;
		&quot;territories_id&quot;:[&quot;${TerritoryID}&quot;]},&#xd;
	&quot;parameters&quot;:{&quot;route_name&quot;:&quot;Combined Route ${TerritoryID}&quot;},&#xd;
	&quot;optimization_profile_id&quot;:&quot;658bf6af-c2de-4379-adb4-0f9fd66f0e07&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv5&apos;, b)

FileWithIDs = new File(&apos;${OptimizationsDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.append(b)

RespFile = new File(&apos;${OptimizationsDir}/${POSTv5Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
s1 = prev.getResponseHeaders()
s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
FileWithX.text = &apos;POSTv5Legacy &apos; +  s2</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="true">
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv5}&amp;wait_for_final_state=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
s1 = prev.getResponseHeaders()
s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
FileWithX.append(&apos;GETv5Legacy &apos; +  s2)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="POST for )" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Body of Request for Stops" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">true</stringProp>
            <stringProp name="script">Body = &apos;&apos;&apos;
{
    &quot;parameters&quot;: {
        &quot;route_name&quot;: &quot;Stops For Other Route&quot;,
        &quot;algorithm_type&quot;: 100
    },
    &quot;addresses&quot;: [
        {
            &quot;lat&quot;: 43.103531,
            &quot;lng&quot;: -89.350797
        },
        {
            &quot;address&quot;: &quot;420 W Gorham St, Madison, WI 53703, USA&quot;,
            &quot;lat&quot;: 43.073917,
            &quot;lng&quot;: -89.393534
        },
        {
            &quot;address&quot;: &quot;43.18234,-89.277939&quot;,
            &quot;lat&quot;: 43.18234,
            &quot;lng&quot;: -89.277939
        }
    ]
}
&apos;&apos;&apos;
vars.put(&apos;BodyForDestinations&apos;, Body)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="POST a Route for Stops Getting" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4" enabled="true">
              <stringProp name="TestPlan.comments">Add New Route</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?redirect=0</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${BodyForDestinations}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv4&apos;, b)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
              <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv4}&amp;wait_for_final_state=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

vars.put(&apos;RouteDestinationId1v4&apos;, a.&apos;routes&apos;[0].&apos;addresses&apos;[1].&apos;route_destination_id&apos;.toString())
vars.put(&apos;RouteDestinationId2v4&apos;, a.&apos;routes&apos;[0].&apos;addresses&apos;[2].&apos;route_destination_id&apos;.toString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv5Legacy" enabled="true">
              <stringProp name="TestPlan.comments">?redirect=0</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?redirect=0</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${BodyForDestinations}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv5&apos;, b)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="true">
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv5}&amp;wait_for_final_state=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

vars.put(&apos;RouteDestinationId1v5&apos;, a.&apos;routes&apos;[0].&apos;addresses&apos;[1].&apos;route_destination_id&apos;.toString())
vars.put(&apos;RouteDestinationId2v5&apos;, a.&apos;routes&apos;[0].&apos;addresses&apos;[2].&apos;route_destination_id&apos;.toString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="POST v4/v5Legacy" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4" enabled="false">
              <stringProp name="TestPlan.comments">Add New Route</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?redirect=0</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;parameters&quot;: {&#xd;
        &quot;route_name&quot;: &quot;4_6 TC. Hetero constraints Retail Location (route destination_id from another route)&quot;,&#xd;
        &quot;algorithm_type&quot;: 9,&#xd;
        &quot;advanced_constraints&quot;: [&#xd;
            {&#xd;
                &quot;max_capacity&quot;: 6923,&#xd;
                &quot;max_cargo_weight&quot;: 7956,&#xd;
                &quot;max_cargo_volume&quot;: 8078,&#xd;
                &quot;retail_location&quot;: [&#xd;
                    {&#xd;
                        &quot;route_destination_id&quot;: ${RouteDestinationId1v4},&#xd;
                        &quot;address&quot;: &quot;420 W Gorham St, Madison, WI 53703, USA&quot;,&#xd;
                        &quot;lat&quot;: 43.073917,&#xd;
                        &quot;lng&quot;: -89.393534&#xd;
                    },&#xd;
                    {&#xd;
                        &quot;route_destination_id&quot;: ${RouteDestinationId2v4},&#xd;
                        &quot;address&quot;: &quot;43.18234,-89.277939&quot;,&#xd;
                        &quot;lat&quot;: 43.18234,&#xd;
                        &quot;lng&quot;: -89.277939&#xd;
                    }&#xd;
                ],&#xd;
                &quot;tags&quot;: [&#xd;
                    &quot;USA&quot;,&#xd;
                    &quot;Canada&quot;&#xd;
                ],&#xd;
                &quot;available_time_windows&quot;: [&#xd;
                    [&#xd;
                        10800,&#xd;
                        54000&#xd;
                    ]&#xd;
                ]&#xd;
            },&#xd;
            {&#xd;
                &quot;max_capacity&quot;: 9123,&#xd;
                &quot;max_cargo_weight&quot;: 9256,&#xd;
                &quot;max_cargo_volume&quot;: 9783,&#xd;
                &quot;retail_location&quot;: {&#xd;
                    &quot;lat&quot;: 43.084875,&#xd;
                    &quot;lng&quot;: -89.294332&#xd;
                },&#xd;
                &quot;members_count&quot;: 2,&#xd;
                &quot;tags&quot;: [&#xd;
                    &quot;Potato&quot;,&#xd;
                    &quot;Carrot&quot;&#xd;
                ],&#xd;
                &quot;available_time_windows&quot;: [&#xd;
                    [&#xd;
                        10800,&#xd;
                        54000&#xd;
                    ]&#xd;
                ]&#xd;
            }&#xd;
        ]&#xd;
    },&#xd;
    &quot;addresses&quot;: [&#xd;
        {&#xd;
            &quot;lng&quot;: -89.4448164,&#xd;
            &quot;address&quot;: &quot;500 S Division St, Waunakee, WI 53597, USA&quot;,&#xd;
            &quot;lat&quot;: 43.1871455,&#xd;
            &quot;alias&quot;: &quot;500 S Division St, Waunakee, WI 53597, USA&quot;,&#xd;
            &quot;route_destination_id&quot;: &quot;L000000&quot;,&#xd;
            &quot;is_depot&quot;: true&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.349146,&#xd;
            &quot;address&quot;: &quot;2438 Winnebago St, Madison, WI 53704, USA&quot;,&#xd;
            &quot;lat&quot;: 43.098688,&#xd;
            &quot;pieces&quot;: 150,&#xd;
            &quot;weight&quot;: 204,&#xd;
            &quot;cube&quot;: 330,&#xd;
            &quot;revenue&quot;: 240&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.324795,&#xd;
            &quot;address&quot;: &quot;3838 Atwood Ave, Madison, WI 53714, USA&quot;,&#xd;
            &quot;lat&quot;: 43.084602,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 113,&#xd;
            &quot;weight&quot;: 214,&#xd;
            &quot;cube&quot;: 351,&#xd;
            &quot;revenue&quot;: 412&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.2675,&#xd;
            &quot;address&quot;: &quot;6420 Cottage Grove Rd, Madison, WI 53718, USA&quot;,&#xd;
            &quot;lat&quot;: 43.085311,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 124,&#xd;
            &quot;weight&quot;: 222,&#xd;
            &quot;cube&quot;: 352,&#xd;
            &quot;revenue&quot;: 426&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.341268,&#xd;
            &quot;address&quot;: &quot;2916 Atwood Ave, Madison, WI 53704, USA&quot;,&#xd;
            &quot;lat&quot;: 43.094022,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 153,&#xd;
            &quot;weight&quot;: 323,&#xd;
            &quot;cube&quot;: 373,&#xd;
            &quot;revenue&quot;: 473&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.3554,&#xd;
            &quot;address&quot;: &quot;1980 Atwood Ave, Madison, WI 53704, USA&quot;,&#xd;
            &quot;lat&quot;: 43.092444,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 124,&#xd;
            &quot;weight&quot;: 214,&#xd;
            &quot;cube&quot;: 343,&#xd;
            &quot;revenue&quot;: 445&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.363795,&#xd;
            &quot;address&quot;: &quot;1209 Williamson St, Madison, WI 53703, USA&quot;,&#xd;
            &quot;lat&quot;: 43.083291,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 165,&#xd;
            &quot;weight&quot;: 275,&#xd;
            &quot;cube&quot;: 385,&#xd;
            &quot;revenue&quot;: 459&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.388573,&#xd;
            &quot;address&quot;: &quot;212 State St, Madison, WI 53703, USA&quot;,&#xd;
            &quot;lat&quot;: 43.074847,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 161,&#xd;
            &quot;weight&quot;: 24,&#xd;
            &quot;cube&quot;: 326,&#xd;
            &quot;revenue&quot;: 461&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.387375,&#xd;
            &quot;address&quot;: &quot;115 State St, Madison, WI 53703, USA&quot;,&#xd;
            &quot;lat&quot;: 43.074586,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 217,&#xd;
            &quot;weight&quot;: 427,&#xd;
            &quot;cube&quot;: 337,&#xd;
            &quot;revenue&quot;: 457&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.401159,&#xd;
            &quot;address&quot;: &quot;444 S Park St, Madison, WI 53715, USA&quot;,&#xd;
            &quot;lat&quot;: 43.06241,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;Potato&quot;,&#xd;
                &quot;Carrot&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 184,&#xd;
            &quot;weight&quot;: 238,&#xd;
            &quot;cube&quot;: 328,&#xd;
            &quot;revenue&quot;: 481&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.35476,&#xd;
            &quot;address&quot;: &quot;5404 Raywood Rd, Madison, WI 53713, USA&quot;,&#xd;
            &quot;lat&quot;: 43.046875,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;Potato&quot;,&#xd;
                &quot;Carrot&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 194,&#xd;
            &quot;weight&quot;: 295,&#xd;
            &quot;cube&quot;: 359,&#xd;
            &quot;revenue&quot;: 496&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.393534,&#xd;
            &quot;address&quot;: &quot;420 W Gorham St, Madison, WI 53703, USA&quot;,&#xd;
            &quot;lat&quot;: 43.073917,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;Potato&quot;,&#xd;
                &quot;Carrot&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 230,&#xd;
            &quot;weight&quot;: 340,&#xd;
            &quot;cube&quot;: 450,&#xd;
            &quot;revenue&quot;: 506&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv4&apos;, b)

FileWithIDs = new File(&apos;${OptimizationsDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.text = b + &apos;,&apos;

RespFile = new File(&apos;${OptimizationsDir}/${POSTv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4" enabled="true">
              <stringProp name="TestPlan.comments">Add New Route</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?redirect=0</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;parameters&quot;: {&#xd;
        &quot;route_name&quot;: &quot;4_6 TC. Hetero constraints Retail Location (route destination_id from another route)&quot;,&#xd;
        &quot;algorithm_type&quot;: 9,&#xd;
        &quot;advanced_constraints&quot;: [&#xd;
            {&#xd;
                &quot;max_capacity&quot;: 6923,&#xd;
                &quot;max_cargo_weight&quot;: 7956,&#xd;
                &quot;max_cargo_volume&quot;: 8078,&#xd;
                &quot;retail_location&quot;:&#xd;
                    {&#xd;
                        &quot;route_destination_id&quot;: ${RouteDestinationId1v4},&#xd;
                        &quot;address&quot;: &quot;420 W Gorham St, Madison, WI 53703, USA&quot;,&#xd;
                        &quot;lat&quot;: 43.073917,&#xd;
                        &quot;lng&quot;: -89.393534&#xd;
                    },&#xd;
                &quot;tags&quot;: [&#xd;
                    &quot;USA&quot;,&#xd;
                    &quot;Canada&quot;&#xd;
                ],&#xd;
                &quot;available_time_windows&quot;: [&#xd;
                    [&#xd;
                        10800,&#xd;
                        54000&#xd;
                    ]&#xd;
                ]&#xd;
            },&#xd;
            {&#xd;
                &quot;max_capacity&quot;: 9123,&#xd;
                &quot;max_cargo_weight&quot;: 9256,&#xd;
                &quot;max_cargo_volume&quot;: 9783,&#xd;
                &quot;retail_location&quot;: {&#xd;
                    &quot;lat&quot;: 43.084875,&#xd;
                    &quot;lng&quot;: -89.294332&#xd;
                },&#xd;
                &quot;members_count&quot;: 2,&#xd;
                &quot;tags&quot;: [&#xd;
                    &quot;Potato&quot;,&#xd;
                    &quot;Carrot&quot;&#xd;
                ],&#xd;
                &quot;available_time_windows&quot;: [&#xd;
                    [&#xd;
                        10800,&#xd;
                        54000&#xd;
                    ]&#xd;
                ]&#xd;
            }&#xd;
        ]&#xd;
    },&#xd;
    &quot;addresses&quot;: [&#xd;
        {&#xd;
            &quot;lng&quot;: -89.4448164,&#xd;
            &quot;address&quot;: &quot;500 S Division St, Waunakee, WI 53597, USA&quot;,&#xd;
            &quot;lat&quot;: 43.1871455,&#xd;
            &quot;alias&quot;: &quot;500 S Division St, Waunakee, WI 53597, USA&quot;,&#xd;
            &quot;route_destination_id&quot;: &quot;L000000&quot;,&#xd;
            &quot;is_depot&quot;: true&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.349146,&#xd;
            &quot;address&quot;: &quot;2438 Winnebago St, Madison, WI 53704, USA&quot;,&#xd;
            &quot;lat&quot;: 43.098688,&#xd;
            &quot;pieces&quot;: 150,&#xd;
            &quot;weight&quot;: 204,&#xd;
            &quot;cube&quot;: 330,&#xd;
            &quot;revenue&quot;: 240&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.324795,&#xd;
            &quot;address&quot;: &quot;3838 Atwood Ave, Madison, WI 53714, USA&quot;,&#xd;
            &quot;lat&quot;: 43.084602,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 113,&#xd;
            &quot;weight&quot;: 214,&#xd;
            &quot;cube&quot;: 351,&#xd;
            &quot;revenue&quot;: 412&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.2675,&#xd;
            &quot;address&quot;: &quot;6420 Cottage Grove Rd, Madison, WI 53718, USA&quot;,&#xd;
            &quot;lat&quot;: 43.085311,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 124,&#xd;
            &quot;weight&quot;: 222,&#xd;
            &quot;cube&quot;: 352,&#xd;
            &quot;revenue&quot;: 426&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.341268,&#xd;
            &quot;address&quot;: &quot;2916 Atwood Ave, Madison, WI 53704, USA&quot;,&#xd;
            &quot;lat&quot;: 43.094022,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 153,&#xd;
            &quot;weight&quot;: 323,&#xd;
            &quot;cube&quot;: 373,&#xd;
            &quot;revenue&quot;: 473&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.3554,&#xd;
            &quot;address&quot;: &quot;1980 Atwood Ave, Madison, WI 53704, USA&quot;,&#xd;
            &quot;lat&quot;: 43.092444,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 124,&#xd;
            &quot;weight&quot;: 214,&#xd;
            &quot;cube&quot;: 343,&#xd;
            &quot;revenue&quot;: 445&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.363795,&#xd;
            &quot;address&quot;: &quot;1209 Williamson St, Madison, WI 53703, USA&quot;,&#xd;
            &quot;lat&quot;: 43.083291,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 165,&#xd;
            &quot;weight&quot;: 275,&#xd;
            &quot;cube&quot;: 385,&#xd;
            &quot;revenue&quot;: 459&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.388573,&#xd;
            &quot;address&quot;: &quot;212 State St, Madison, WI 53703, USA&quot;,&#xd;
            &quot;lat&quot;: 43.074847,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 161,&#xd;
            &quot;weight&quot;: 24,&#xd;
            &quot;cube&quot;: 326,&#xd;
            &quot;revenue&quot;: 461&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.387375,&#xd;
            &quot;address&quot;: &quot;115 State St, Madison, WI 53703, USA&quot;,&#xd;
            &quot;lat&quot;: 43.074586,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 217,&#xd;
            &quot;weight&quot;: 427,&#xd;
            &quot;cube&quot;: 337,&#xd;
            &quot;revenue&quot;: 457&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.401159,&#xd;
            &quot;address&quot;: &quot;444 S Park St, Madison, WI 53715, USA&quot;,&#xd;
            &quot;lat&quot;: 43.06241,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;Potato&quot;,&#xd;
                &quot;Carrot&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 184,&#xd;
            &quot;weight&quot;: 238,&#xd;
            &quot;cube&quot;: 328,&#xd;
            &quot;revenue&quot;: 481&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.35476,&#xd;
            &quot;address&quot;: &quot;5404 Raywood Rd, Madison, WI 53713, USA&quot;,&#xd;
            &quot;lat&quot;: 43.046875,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;Potato&quot;,&#xd;
                &quot;Carrot&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 194,&#xd;
            &quot;weight&quot;: 295,&#xd;
            &quot;cube&quot;: 359,&#xd;
            &quot;revenue&quot;: 496&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.393534,&#xd;
            &quot;address&quot;: &quot;420 W Gorham St, Madison, WI 53703, USA&quot;,&#xd;
            &quot;lat&quot;: 43.073917,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;Potato&quot;,&#xd;
                &quot;Carrot&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 230,&#xd;
            &quot;weight&quot;: 340,&#xd;
            &quot;cube&quot;: 450,&#xd;
            &quot;revenue&quot;: 506&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv4&apos;, b)

FileWithIDs = new File(&apos;${OptimizationsDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.text = b + &apos;,&apos;

RespFile = new File(&apos;${OptimizationsDir}/${POSTv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="false">
              <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv4}&amp;wait_for_final_state=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
if (a.&apos;state&apos; in [4, 5]){
	vars.put(&apos;a1&apos;, &apos;1&apos;)	
	RespFile = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="wait_for_final_state" enabled="true">
              <stringProp name="WhileController.condition">${__groovy(${a1} == &apos;1&apos;)}</stringProp>
            </WhileController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4 Wait for Final State" enabled="true">
                <stringProp name="TestPlan.comments">route_id Getting &amp;wait_for_final_state=1</stringProp>
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv4}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Api-Key</stringProp>
                      <stringProp name="Header.value">${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
if (a.&apos;state&apos; in [4, 5]){
	vars.put(&apos;a1&apos;, &apos;1&apos;)
	RespFile = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()}
else {sleep(10000)}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv5Legacy" enabled="true">
              <stringProp name="TestPlan.comments">?redirect=0</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?redirect=0</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
    &quot;parameters&quot;: {&#xd;
        &quot;route_name&quot;: &quot;4_6 TC. Hetero constraints Retail Location (route destination_id from another route)&quot;,&#xd;
        &quot;algorithm_type&quot;: 9,&#xd;
        &quot;advanced_constraints&quot;: [&#xd;
            {&#xd;
                &quot;max_capacity&quot;: 6923,&#xd;
                &quot;max_cargo_weight&quot;: 7956,&#xd;
                &quot;max_cargo_volume&quot;: 8078,&#xd;
                &quot;retail_location&quot;:&#xd;
                    {&#xd;
                        &quot;route_destination_id&quot;: &quot;${RouteDestinationId1v5}&quot;,&#xd;
                        &quot;address&quot;: &quot;420 W Gorham St, Madison, WI 53703, USA&quot;,&#xd;
                        &quot;lat&quot;: 43.073917,&#xd;
                        &quot;lng&quot;: -89.393534&#xd;
                    },&#xd;
                &quot;tags&quot;: [&#xd;
                    &quot;USA&quot;,&#xd;
                    &quot;Canada&quot;&#xd;
                ],&#xd;
                &quot;available_time_windows&quot;: [&#xd;
                    [&#xd;
                        10800,&#xd;
                        54000&#xd;
                    ]&#xd;
                ]&#xd;
            },&#xd;
            {&#xd;
                &quot;max_capacity&quot;: 9123,&#xd;
                &quot;max_cargo_weight&quot;: 9256,&#xd;
                &quot;max_cargo_volume&quot;: 9783,&#xd;
                &quot;retail_location&quot;: {&#xd;
                    &quot;lat&quot;: 43.084875,&#xd;
                    &quot;lng&quot;: -89.294332&#xd;
                },&#xd;
                &quot;members_count&quot;: 2,&#xd;
                &quot;tags&quot;: [&#xd;
                    &quot;Potato&quot;,&#xd;
                    &quot;Carrot&quot;&#xd;
                ],&#xd;
                &quot;available_time_windows&quot;: [&#xd;
                    [&#xd;
                        10800,&#xd;
                        54000&#xd;
                    ]&#xd;
                ]&#xd;
            }&#xd;
        ]&#xd;
    },&#xd;
    &quot;addresses&quot;: [&#xd;
        {&#xd;
            &quot;lng&quot;: -89.4448164,&#xd;
            &quot;address&quot;: &quot;500 S Division St, Waunakee, WI 53597, USA&quot;,&#xd;
            &quot;lat&quot;: 43.1871455,&#xd;
            &quot;alias&quot;: &quot;500 S Division St, Waunakee, WI 53597, USA&quot;,&#xd;
            &quot;route_destination_id&quot;: &quot;L000000&quot;,&#xd;
            &quot;is_depot&quot;: true&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.349146,&#xd;
            &quot;address&quot;: &quot;2438 Winnebago St, Madison, WI 53704, USA&quot;,&#xd;
            &quot;lat&quot;: 43.098688,&#xd;
            &quot;pieces&quot;: 150,&#xd;
            &quot;weight&quot;: 204,&#xd;
            &quot;cube&quot;: 330,&#xd;
            &quot;revenue&quot;: 240&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.324795,&#xd;
            &quot;address&quot;: &quot;3838 Atwood Ave, Madison, WI 53714, USA&quot;,&#xd;
            &quot;lat&quot;: 43.084602,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 113,&#xd;
            &quot;weight&quot;: 214,&#xd;
            &quot;cube&quot;: 351,&#xd;
            &quot;revenue&quot;: 412&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.2675,&#xd;
            &quot;address&quot;: &quot;6420 Cottage Grove Rd, Madison, WI 53718, USA&quot;,&#xd;
            &quot;lat&quot;: 43.085311,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 124,&#xd;
            &quot;weight&quot;: 222,&#xd;
            &quot;cube&quot;: 352,&#xd;
            &quot;revenue&quot;: 426&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.341268,&#xd;
            &quot;address&quot;: &quot;2916 Atwood Ave, Madison, WI 53704, USA&quot;,&#xd;
            &quot;lat&quot;: 43.094022,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 153,&#xd;
            &quot;weight&quot;: 323,&#xd;
            &quot;cube&quot;: 373,&#xd;
            &quot;revenue&quot;: 473&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.3554,&#xd;
            &quot;address&quot;: &quot;1980 Atwood Ave, Madison, WI 53704, USA&quot;,&#xd;
            &quot;lat&quot;: 43.092444,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 124,&#xd;
            &quot;weight&quot;: 214,&#xd;
            &quot;cube&quot;: 343,&#xd;
            &quot;revenue&quot;: 445&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.363795,&#xd;
            &quot;address&quot;: &quot;1209 Williamson St, Madison, WI 53703, USA&quot;,&#xd;
            &quot;lat&quot;: 43.083291,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 165,&#xd;
            &quot;weight&quot;: 275,&#xd;
            &quot;cube&quot;: 385,&#xd;
            &quot;revenue&quot;: 459&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.388573,&#xd;
            &quot;address&quot;: &quot;212 State St, Madison, WI 53703, USA&quot;,&#xd;
            &quot;lat&quot;: 43.074847,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 161,&#xd;
            &quot;weight&quot;: 24,&#xd;
            &quot;cube&quot;: 326,&#xd;
            &quot;revenue&quot;: 461&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.387375,&#xd;
            &quot;address&quot;: &quot;115 State St, Madison, WI 53703, USA&quot;,&#xd;
            &quot;lat&quot;: 43.074586,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;USA&quot;,&#xd;
                &quot;Canada&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 217,&#xd;
            &quot;weight&quot;: 427,&#xd;
            &quot;cube&quot;: 337,&#xd;
            &quot;revenue&quot;: 457&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.401159,&#xd;
            &quot;address&quot;: &quot;444 S Park St, Madison, WI 53715, USA&quot;,&#xd;
            &quot;lat&quot;: 43.06241,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;Potato&quot;,&#xd;
                &quot;Carrot&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 184,&#xd;
            &quot;weight&quot;: 238,&#xd;
            &quot;cube&quot;: 328,&#xd;
            &quot;revenue&quot;: 481&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.35476,&#xd;
            &quot;address&quot;: &quot;5404 Raywood Rd, Madison, WI 53713, USA&quot;,&#xd;
            &quot;lat&quot;: 43.046875,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;Potato&quot;,&#xd;
                &quot;Carrot&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 194,&#xd;
            &quot;weight&quot;: 295,&#xd;
            &quot;cube&quot;: 359,&#xd;
            &quot;revenue&quot;: 496&#xd;
        },&#xd;
        {&#xd;
            &quot;lng&quot;: -89.393534,&#xd;
            &quot;address&quot;: &quot;420 W Gorham St, Madison, WI 53703, USA&quot;,&#xd;
            &quot;lat&quot;: 43.073917,&#xd;
            &quot;tags&quot;: [&#xd;
                &quot;Potato&quot;,&#xd;
                &quot;Carrot&quot;&#xd;
            ],&#xd;
            &quot;pieces&quot;: 230,&#xd;
            &quot;weight&quot;: 340,&#xd;
            &quot;cube&quot;: 450,&#xd;
            &quot;revenue&quot;: 506&#xd;
        }&#xd;
    ]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv5&apos;, b)

FileWithIDs = new File(&apos;${OptimizationsDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.append(b)

RespFile = new File(&apos;${OptimizationsDir}/${POSTv5Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
s1 = prev.getResponseHeaders()
s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
FileWithX.text = &apos;POSTv5Legacy &apos; +  s2</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="false">
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv5}&amp;wait_for_final_state=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
if (a.&apos;state&apos; in [4, 5]){
	vars.put(&apos;a2&apos;, &apos;1&apos;)
	RespFile = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()
	
	FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
	s1 = prev.getResponseHeaders()
	s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
	s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
	FileWithX.append(&apos;GETv5Legacy &apos; +  s2)}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="wait_for_final_state" enabled="true">
              <stringProp name="WhileController.condition">${__groovy(${a2} == &apos;1&apos;)}</stringProp>
            </WhileController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy Wait for Final State" enabled="true">
                <stringProp name="TestPlan.comments">route_id Getting &amp;wait_for_final_state=1</stringProp>
                <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv5}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
if (a.&apos;state&apos; in [4, 5]){
	vars.put(&apos;a2&apos;, &apos;1&apos;)
	RespFile = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()
	FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
	s1 = prev.getResponseHeaders()
	s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
	s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
	FileWithX.append(&apos;GETv5Legacy &apos; +  s2)}
else {sleep(10000)}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="ReadOnly" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Request Body" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import org.apache.commons.lang.RandomStringUtils
import groovy.json.*

FileName = new File(&apos;${Body}&apos;)
AddressStopType = [&apos;DELIVERY&apos;, &apos;PICKUP&apos;]
a1 = new JsonSlurper().parse(FileName)
for (i in 0..a1.&apos;addresses&apos;.size() - 1){
	a2 = RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray())
	a1.&apos;addresses&apos;[i].put(&apos;alias&apos;, a2)
	a2 = RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray())
	a1.&apos;addresses&apos;[i].put(&apos;address&apos;, a2)
	a1.&apos;addresses&apos;[i].remove(&apos;route_destination_id&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;optimization_problem_id&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;channel_name&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;distance_to_next_destination&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;drive_time_to_next_destination&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;route_id&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;sequence_no&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;tracking_number&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;custom_fields&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;custom_fields_str_json&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;cube&apos;)
	if (a1.&apos;addresses&apos;[i].&apos;address_stop_type&apos; !in AddressStopType){
		a1.&apos;addresses&apos;[i].put(&apos;address_stop_type&apos;, AddressStopType[new Random().ints(0, 2).findFirst().getAsInt()])}}
a1.&apos;parameters&apos;.put(&apos;route_date&apos;, (new Date().getTime() + 86400000).toString()[0..9].toInteger())
b = JsonOutput.prettyPrint(JsonOutput.toJson(a1)).toString()
vars.put(&apos;RequestBody&apos;, b)
(new File(&apos;${OptimizationsDir}/${Payload}&apos;)).text = b</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4" enabled="true">
            <stringProp name="TestPlan.comments">Add New Route</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?redirect=0</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RequestBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Api-Key</stringProp>
                  <stringProp name="Header.value">${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv4&apos;, b)

FileWithIDs = new File(&apos;${OptimizationsDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.text = b + &apos;,&apos;

RespFile = new File(&apos;${OptimizationsDir}/${POSTv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with Request" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

RequestBody = prev.getSamplerData()
RequestHeader = prev.getRequestHeaders()
r = RequestHeader[0..RequestHeader.length()-2]
r = r.replace(&apos;\n&apos;, &apos;\n\t&apos;)
r = &apos;\t&apos;+ r
RequestBody = RequestBody.replace(&apos;[no cookies]&apos;, &apos;&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
a = new JsonSlurper().parse(prev.getResponseData())
b = JsonOutput.prettyPrint(JsonOutput.toJson(a))
s2 = &apos;&apos;
s1 = prev.getResponseHeaders()
if (s1.contains(&apos;x-request-id&apos;)){
	s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
	s2 = &apos;, x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]}
s = RequestBody + &apos;Header\n&apos; + r + &apos;\nResponse&apos; + s2 + &apos;\n&apos; + b + &apos;\n***********\n&apos;

FileWithRequests = new File(&apos;${OptimizationsDir}/${RequestsFile}&apos;)
FileWithRequests.text = s
//FileWithRequests.append(s)</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="false">
            <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv4}&amp;wait_for_final_state=1</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Api-Key</stringProp>
                  <stringProp name="Header.value">${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

if (prev.getResponseCode() == &apos;200&apos;){
	vars.put(&apos;a1&apos;, &apos;1&apos;)
	a = new JsonSlurper().parse(prev.getResponseData())
	RespFile = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="wait_for_final_state" enabled="false">
            <stringProp name="WhileController.condition">${__groovy(${a1} == &apos;1&apos;)}</stringProp>
          </WhileController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
              <stringProp name="TestPlan.comments">route_id Getting &amp;wait_for_final_state=1</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv4}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
if (a.&apos;state&apos; == 4){
	vars.put(&apos;a1&apos;, &apos;1&apos;)
	RespFile = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()}
else {sleep(60000)}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv5Legacy" enabled="true">
            <stringProp name="TestPlan.comments">?redirect=0</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?redirect=0</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RequestBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv5&apos;, b)

FileWithIDs = new File(&apos;${OptimizationsDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.append(b)

RespFile = new File(&apos;${OptimizationsDir}/${POSTv5Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
s1 = prev.getResponseHeaders()
s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
FileWithX.text = &apos;POSTv5Legacy &apos; +  s2</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="false">
            <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv5}&amp;wait_for_final_state=1</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

if (prev.getResponseCode() == &apos;200&apos;){
	vars.put(&apos;a2&apos;, &apos;1&apos;)
	a = new JsonSlurper().parse(prev.getResponseData())
	RespFile = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()
	
	FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
	s1 = prev.getResponseHeaders()
	s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
	s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
	FileWithX.append(&apos;GETv5Legacy &apos; +  s2)}</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="wait_for_final_state" enabled="false">
            <stringProp name="WhileController.condition">${__groovy(${a2} == &apos;1&apos;)}</stringProp>
          </WhileController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="true">
              <stringProp name="TestPlan.comments">route_id Getting &amp;wait_for_final_state=1</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv5}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
if (a.&apos;state&apos; == 4){
	vars.put(&apos;a2&apos;, &apos;1&apos;)
	RespFile = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()
	FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
	s1 = prev.getResponseHeaders()
	s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
	s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
	FileWithX.append(&apos;GETv5Legacy &apos; +  s2)}
else {sleep(30000)}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Error Messages" enabled="false"/>
        <hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add New Route" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Addesses Generation" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import org.apache.commons.lang.RandomStringUtils

SQ = 2
b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;address&quot;:&quot;Address of Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..SQ){
	a = &apos;\t\t{&quot;alias&quot;:&quot;Stop &apos; +	i + &apos;&quot;,&quot;address&quot;:&quot;Address Of Stop &apos; +	i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
	b = (i == SQ)? b + a: b + a + &apos;,\n&apos;}

vars.put(&apos;Addresses&apos;, b)
vars.put(&apos;RouteDate&apos;, (new Date().getTime() + 86400000).toString()[0..9])
vars.put(&apos;RouteName&apos;, RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()).toString())</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="3/28/24" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="rt" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">Body = &apos;&apos;&apos;{
	&quot;addresses&quot;:[
		{&quot;alias&quot;:&quot;Depot&quot;,&quot;address&quot;:&quot;Address of Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},
		{&quot;alias&quot;:&quot;Stop 1&quot;,&quot;address&quot;:&quot;Address Of Stop 1&quot;,&quot;lat&quot;:27.966,&quot;lng&quot;:-82.494},
		{&quot;alias&quot;:&quot;Stop 2&quot;,&quot;address&quot;:&quot;Address Of Stop 2&quot;,&quot;lat&quot;:27.975,&quot;lng&quot;:-82.438}]
}&apos;&apos;&apos;

vars.put(&apos;RequestBody&apos;, Body)
(new File(&apos;${OptimizationsDir}/${Payload}&apos;)).text = Body</stringProp>
                <stringProp name="TestPlan.comments">Integer, String</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="route_name" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">Body = &apos;&apos;&apos;{
	&quot;parameters&quot;:{
		&quot;route_name&quot;:-8,
		&quot;route_date&quot;:${RouteDate},
		&quot;rt&quot;:true,
		&quot;algorithm_type&quot;:1},
	&quot;addresses&quot;:[
       {&quot;alias&quot;:&quot;Depot&quot;,&quot;address&quot;:&quot;Address of Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},
		{&quot;alias&quot;:&quot;Stop 1&quot;,&quot;address&quot;:&quot;Address Of Stop 1&quot;,&quot;lat&quot;:27.991,&quot;lng&quot;:-82.456},
		{&quot;alias&quot;:&quot;Stop 2&quot;,&quot;address&quot;:&quot;Address Of Stop 2&quot;,&quot;lat&quot;:27.974,&quot;lng&quot;:-82.384},
		{&quot;alias&quot;:&quot;Stop 3&quot;,&quot;address&quot;:&quot;Address Of Stop 3&quot;,&quot;lat&quot;:27.985,&quot;lng&quot;:-82.496}]
}&apos;&apos;&apos;

vars.put(&apos;RequestBody&apos;, Body)
(new File(&apos;${OptimizationsDir}/${Payload}&apos;)).text = Body</stringProp>
                <stringProp name="TestPlan.comments">Integer, Boolean, 0</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="RR-122" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">Body = &apos;{}&apos;

vars.put(&apos;RequestBody&apos;, Body)
(new File(&apos;${OptimizationsDir}/${Payload}&apos;)).text = Body</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="retail_location" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">Body = &apos;&apos;&apos;{
	&quot;parameters&quot;:{
		&quot;route_name&quot;:&quot;HY8XXK0OQ1T6INFAGRB0URBJ4YI8AKFM&quot;,
		&quot;route_date&quot;:1711594772,
		&quot;rt&quot;:true,
		&quot;algorithm_type&quot;:1,
		&quot;advanced_constraints&quot;:[
			{
				&quot;retail_location&quot;:{
                    &quot;lng&quot;: -89.453019,
                    &quot;lat&quot;: 43.192093,
                    &quot;is_depot&quot;: false,
                    &quot;address_stop_type&quot;: &quot;SERVICE&quot;,
                    &quot;route_destination_id&quot;: 764566269},
                &quot;tags&quot;: [
                    &quot;USA&quot;,
                    &quot;Canada&quot;],
                &quot;max_capacity&quot;: 6923,
                &quot;max_cargo_volume&quot;: 8078,
                &quot;max_cargo_weight&quot;: 7956}]},
	&quot;addresses&quot;:[
       {&quot;alias&quot;:&quot;Depot&quot;,&quot;address&quot;:&quot;Address of Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true}]
}&apos;&apos;&apos;

vars.put(&apos;RequestBody&apos;, Body)
(new File(&apos;${OptimizationsDir}/${Payload}&apos;)).text = Body</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="ErrorBody" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">Body = &apos;&apos;&apos;{
	&quot;parameters&quot;:{
		&quot;route_name&quot;:&quot;${RouteName}&quot;,
		&quot;route_date&quot;:${RouteDate},
		&quot;rt&quot;:true,
		&quot;algorithm_type&quot;:&quot;&amp;&quot;},
	&quot;addresses&quot;:[
       ${Addresses}]
}&apos;&apos;&apos;

vars.put(&apos;RequestBody&apos;, Body)
(new File(&apos;${OptimizationsDir}/${Payload}&apos;)).text = Body</stringProp>
              <stringProp name="TestPlan.comments">${RouteDate}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4" enabled="true">
              <stringProp name="TestPlan.comments">,&quot;algorithm_type&quot;:${AlgorithmType}</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?redirect=0</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv4&apos;, b)

FileWithIDs = new File(&apos;${OptimizationsDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.text = b + &apos;,&apos;

RespFile = new File(&apos;${OptimizationsDir}/${POSTv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv5Legacy" enabled="true">
              <stringProp name="TestPlan.comments">?redirect=0</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?redirect=0</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv5&apos;, b)

FileWithIDs = new File(&apos;${OptimizationsDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.append(b)

RespFile = new File(&apos;${OptimizationsDir}/${POSTv5Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
s1 = prev.getResponseHeaders()
s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
FileWithX.text = &apos;POSTv5Legacy &apos; +  s2</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Re-Optimize This Route" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Files Processing" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import groovy.json.*
import org.apache.commons.io.FileUtils

FileWithv4 = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
a = new JsonSlurper().parse(FileWithv4).&apos;routes&apos;
b = a[0].&apos;addresses&apos;.&apos;sequence_no&apos;.max() + 1
vars.put(&apos;v4RouteID&apos;, a[0].&apos;route_id&apos;.toString())
vars.put(&apos;LastSequenceNov4&apos;, b.toString())

FileWithv5 = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)
a = new JsonSlurper().parse(FileWithv5).&apos;routes&apos;
b = a[0].&apos;addresses&apos;.&apos;sequence_no&apos;.max() + 1
vars.put(&apos;v5RouteID&apos;, a[0].&apos;route_id&apos;.toString())
vars.put(&apos;LastSequenceNov5&apos;, b.toString())

//FileUtils.cleanDirectory(new File(&apos;${RoutesDir}&apos;))
//FileUtils.cleanDirectory(new File(&apos;${ReOptimizeDir}&apos;))</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">${OptimizationsDir}/${FileWithOptimizationProblemIDs}</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">OptimizationProblemIDv4,OptimizationProblemIDv5</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Insert Address After last Destination v4" enabled="true">
            <stringProp name="TestPlan.comments">Get Route</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${v4RouteID}&amp;reoptimize=false</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;addresses&quot;:[&#xd;
		{&#xd;
			&quot;lat&quot;:46.943697,&#xd;
			&quot;lng&quot;:-119.9888172,&#xd;
			&quot;sequence_no&quot;:${LastSequenceNov4}&#xd;
		}],&#xd;
	&quot;optimal_position&quot;:false,&#xd;
	&quot;insert_into&quot;:&quot;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Api-Key</stringProp>
                  <stringProp name="Header.value">${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Re-Optimize This Route v4" enabled="true">
            <stringProp name="TestPlan.comments">Get Route</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${v4RouteID}&amp;reoptimize=1&amp;remaining=0</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Api-Key</stringProp>
                  <stringProp name="Header.value">${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Delay" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">sleep(20000)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${TestDir}/${GETv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
            <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv4}&amp;wait_for_final_state=1</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Api-Key</stringProp>
                  <stringProp name="Header.value">${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${OptimizationsDir}/Re-Optimized-${GETv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Delay" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">sleep(20000)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Insert Address After last Destination v5" enabled="true">
            <stringProp name="TestPlan.comments">Get Route</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5Legacy}/${v4Routes}?route_id=${v5RouteID}&amp;reoptimize=false</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;addresses&quot;:[&#xd;
		{&#xd;
			&quot;lat&quot;:46.943697,&#xd;
			&quot;lng&quot;:-119.9888172,&#xd;
			&quot;sequence_no&quot;:${LastSequenceNov5}&#xd;
		}],&#xd;
	&quot;optimal_position&quot;:false,&#xd;
	&quot;insert_into&quot;:&quot;&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Re-Optimize This Route v5" enabled="true">
            <stringProp name="TestPlan.comments">Get Route</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5Legacy}/${v4Routes}?route_id=${v5RouteID}&amp;reoptimize=1&amp;remaining=0</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Delay" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">sleep(20000)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${TestDir}/${GETv5Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="true">
            <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv5}&amp;wait_for_final_state=1</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${OptimizationsDir}/Re-Optimized-${GETv5Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Delay" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">sleep(20000)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PUT optimization_problem.php" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="OptimizationProblemIDv4" enabled="true">
            <stringProp name="filename">${OptimizationsDir}/${FileWithOptimizationProblemIDs}</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">OptimizationProblemIDv4,OptimizationProblemIDv5</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Random" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import org.apache.commons.lang.RandomStringUtils
//import org.apache.commons.lang3.RandomUtils//b = RandomUtils.random();println b

//b = RandomStringUtils.random(6, (&apos;0&apos;..&apos;9&apos;).join()).toInteger();println b
//b = RandomStringUtils.random(12, (&apos;A&apos;..&apos;Z&apos;).join());println b
//b = RandomStringUtils.random(32, ((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join());println b
//b = new Random().ints(0, 1001).findFirst().getAsInt();println b
//b = UUID.randomUUID();println b
//a = &apos;${__RandomString(32, abcdeABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789)}&apos;;println a
//a = ${__Random(10, 11)};println a
b = RandomStringUtils.randomNumeric(3);println b
//
import java.util.Random
Random random = new Random()
def min = 1
def max = 10
def randomValue = random.nextInt(max + 1 - min) + min;
def props = testRunner.testCase.getTestStepByName(&quot;Request 1&quot;)
if(props.hasProperty(&quot;ID&quot;)){
   props.setPropertyValue(&quot;ID&quot;, String.valueOf(randomValue) )
   log.info &quot;ID was added: &quot; + randomValue
}
//
return (int) ((Math.random() * (max - min)) + min);
//
public int getRandomNumberUsingNextInt(int min, int max) {
    Random random = new Random();
    return random.nextInt(max - min) + min;</stringProp>
            <stringProp name="TestPlan.comments">random(), any(), find(), abs(int), acos(double), rint(double)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="addresses" enabled="true"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="OptimizationProblemIDv4" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">vars.put(&apos;OptimizationProblemIDv4&apos;, &quot;27D69C233887C1454F4065A67A8167E9&quot;)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
              <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv4}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;RouteDestinationIdForPUT&apos;, a.&apos;routes&apos;[0].&apos;addresses&apos;[1].&apos;route_destination_id&apos;.toString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="alias/address/lat/lng" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;alias&quot;:&quot;StopAdded&quot;,&quot;address&quot;:&quot;&apos; + RandomStringUtils.random(32, ((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()) + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt()

b = &apos;{&quot;addresses&quot;:[{&apos; + a + &apos;}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
              <stringProp name="TestPlan.comments">Worked, was 1st</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="order_id" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;order_id&quot;:&quot;C7F197CF200840F398747FCF928D8604&quot;&apos;

b = &apos;{&quot;addresses&quot;:[{&apos; + a + &apos;}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lat/lng" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{&quot;lat&quot;:27.982481,&quot;lng&quot;:-82.477069}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e

//a1.&apos;addresses&apos;[1].&apos;address&apos;</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lat/lng+address" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{&quot;address&quot;:&quot;&apos; + RandomStringUtils.random(32, ((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()) + &apos;&quot;,&quot;lat&quot;:27.982481,&quot;lng&quot;:-82.477069}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e

//a1.&apos;addresses&apos;[1].&apos;address&apos;</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lat/lng+alias" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{&quot;alias&quot;:&quot;&apos; + RandomStringUtils.random(32, ((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()) + &apos;&quot;,&quot;lat&quot;:27.982481,&quot;lng&quot;:-82.477069}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e

//a1.&apos;addresses&apos;[1].&apos;address&apos;</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lat/lng+curbside_lat/curbside_lng" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{&quot;curbside_lat&quot;:27.982499,&quot;curbside_lng&quot;:-82.477099,&quot;lat&quot;:27.982481,&quot;lng&quot;:-82.477069}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e

//a1.&apos;addresses&apos;[1].&apos;address&apos;</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lat/lng+phone" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{&quot;phone&quot;:&quot;1234567890&quot;,&quot;lat&quot;:27.982481,&quot;lng&quot;:-82.477069}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e

//a1.&apos;addresses&apos;[1].&apos;address&apos;</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lat/lng+priority" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{&quot;priority&quot;:7,&quot;lat&quot;:27.982481,&quot;lng&quot;:-82.477069}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e

//a1.&apos;addresses&apos;[1].&apos;address&apos;</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lat/lng+route_destination_id" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{&quot;route_destination_id&quot;:1234567,&quot;lat&quot;:27.982481,&quot;lng&quot;:-82.477069}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e

//a1.&apos;addresses&apos;[1].&apos;address&apos;</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="route_destination_id+" enabled="true"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="address" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{\
&quot;address&quot;:&quot;3206 N Avon Ave, Tampa, FL 33603, USA&quot;\
,&quot;route_destination_id&quot;:${RouteDestinationIdForPUT}}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="alias" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{\
&quot;alias&quot;:&quot;PUTAlias&quot;\
,&quot;route_destination_id&quot;:${RouteDestinationIdForPUT}}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lat/lng" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{\
&quot;lat&quot;:27.982481,&quot;lng&quot;:-82.477069\
,&quot;route_destination_id&quot;:${RouteDestinationIdForPUT}}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="curbside_lat/curbside_lng" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{\
&quot;curbside_lat&quot;:27.982499,&quot;curbside_lng&quot;:-82.477099\
,&quot;route_destination_id&quot;:${RouteDestinationIdForPUT}}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="phone" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{\
&quot;phone&quot;:&quot;1234567890&quot;\
,&quot;route_destination_id&quot;:${RouteDestinationIdForPUT}}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="priority" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{\
&quot;priority&quot;:3\
,&quot;route_destination_id&quot;:${RouteDestinationIdForPUT}}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="is_depot" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{\
&quot;is_depot&quot;:true\
,&quot;route_destination_id&quot;:${RouteDestinationIdForPUT}}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Don&apos;t work" enabled="false"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lat/lng+sequence_no" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{&quot;sequence_no&quot;:1,&quot;lat&quot;:27.982481,&quot;lng&quot;:-82.477069}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e

//a1.&apos;addresses&apos;[1].&apos;address&apos;</stringProp>
                <stringProp name="TestPlan.comments">sequence_no is not set</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lat/lng+is_depot" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{&quot;is_depot&quot;:true,&quot;lat&quot;:27.982777,&quot;lng&quot;:-82.477777}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e

//a1.&apos;addresses&apos;[1].&apos;address&apos;</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="address" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{&quot;address&quot;:&quot;1703 W Ferris Ave, Tampa, FL 33603, USA&quot;}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="address+alias" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{&quot;alias&quot;:&quot;PUTAlias&quot;,&quot;address&quot;:&quot;1703 W Ferris Ave, Tampa, FL 33603, USA&quot;}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="alias" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{&quot;alias&quot;:&quot;PUTAlias&quot;}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e

//a1.&apos;addresses&apos;[1].&apos;address&apos;</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="curbside_lat/curbside_lng" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{&quot;curbside_lat&quot;:27.982481,&quot;curbside_lng&quot;:-82.477069}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e

//a1.&apos;addresses&apos;[1].&apos;address&apos;</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="is_depot" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{&quot;is_depot&quot;:true}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e

//a1.&apos;addresses&apos;[1].&apos;address&apos;</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="phone" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{&quot;phone&quot;:&quot;1234567890&quot;}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e

//a1.&apos;addresses&apos;[1].&apos;address&apos;</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="priority" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{&quot;priority&quot;:1}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e

//a1.&apos;addresses&apos;[1].&apos;address&apos;</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="sequence_no" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{&quot;sequence_no&quot;:2}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e

//a1.&apos;addresses&apos;[1].&apos;address&apos;</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="route_destination_id" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{&quot;route_destination_id&quot;:990203515}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e

//a1.&apos;addresses&apos;[1].&apos;address&apos;</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="route_destination_id+sequence_no" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{\
&quot;sequence_no&quot;:3\
,&quot;route_destination_id&quot;:${RouteDestinationIdForPUT}}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="route_destination_id+order_uuid/order_id" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

b = &apos;{&quot;addresses&quot;:[{\
&quot;order_uuid&quot;:&quot;A5DD4A6694334F01839DBA1E5B39CDA7&quot;\
,&quot;route_destination_id&quot;:${RouteDestinationIdForPUT}}]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="parameters" enabled="false"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="algorithm_type" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

//1 = TSP, 2 = VRP, 3 = CVRP_TW_SD, 4 = CVRP_TW_MD, 5 = TSP_TW, 6 = TSP_TW_CR, 7 = BBCVRP, 9 = ADVANCED_CVRP_TW,100 = ALG_NONE, 101 = ALG_LEGACY_DISTRIBUTED

a = &apos;&quot;algorithm_type&quot;:1&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="avoid" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

//[ Highways, Tolls, minimizeHighways, minimizeTolls, highways, tolls ]

a = &apos;&quot;avoid&quot;:&quot;Tolls&quot;&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="avoidance_zones" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;avoidance_zones&quot;:[&quot;DE7812A166DA02CDA7D07D8D0EBCB933&quot;]&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="disable_optimization" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;disable_optimization&quot;:true&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lock_last" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;lock_last&quot;:true&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="metric" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

//1 = ROUTE4ME_METRIC_EUCLIDEAN,2 = ROUTE4ME_METRIC_MANHATTAN,3 = ROUTE4ME_METRIC_GEODESIC,4 = ROUTE4ME_METRIC_MATRIX,5 = ROUTE4ME_METRIC_EXACT_2D

a = &apos;&quot;metric&quot;:5&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="optimize" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

//[ Distance, Time, timeWithTraffic ]

a = &apos;&quot;optimize&quot;:&quot;timeWithTraffic&quot;&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="route_date" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = new Random().ints(1,32).findFirst().getAsInt()
RandomDate = ((new Date() + a ).getTime()).toString()[0..9]

a = &apos;&quot;route_date&quot;:&apos; + RandomDate

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="route_name" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;route_name&quot;:&quot;&apos; + RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="route_time" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;route_time&quot;:&apos; + new Random().ints(0,86400).findFirst().getAsInt()

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="rt" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;rt&quot;:true&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="travel_mode" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

//[ Driving, Walking ]
a = &apos;&quot;travel_mode&quot;:&quot;Walking&quot;&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="vehicle_capacity" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;vehicle_capacity&quot;:218&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="vehicle_max_cargo_weight" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;vehicle_max_cargo_weight&quot;:78963&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="vehicle_max_cargo_volume" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;vehicle_max_cargo_volume&quot;:963&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="vehicle_max_distance_mi" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;vehicle_max_distance_mi&quot;:777&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="subtour_max_revenue" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;subtour_max_revenue&quot;:19999&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="vehicle_id" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;vehicle_id&quot;:&quot;56926CADCA1141C742BF80EDF7AA1000&quot;&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
              <stringProp name="TestPlan.comments">E745D0D67858B6EB61C39C4EECE14B8D/56926CADCA1141C742BF80EDF7AA1000</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="route_max_duration" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;route_max_duration&quot;:3600&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Don&apos;t work" enabled="false"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="target_duration" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;target_duration&quot;:1&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="target_distance" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;target_distance&quot;:{}}&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="target_wait_by_tail_size" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;target_wait_by_tail_size&quot;:{}}&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="advanced_constraint" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;advanced_constraint&quot;:[{&quot;max_capacity&quot;:223}]}&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUTv4" enabled="false">
            <stringProp name="TestPlan.comments">Add New Route</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv4}&amp;reoptimize=1&amp;redirect=0</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RequestBodyForPUT}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Api-Key</stringProp>
                  <stringProp name="Header.value">${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${OptimizationsDir}/${PUTv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="false">
            <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv4}&amp;wait_for_final_state=1</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Api-Key</stringProp>
                  <stringProp name="Header.value">${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${OptimizationsDir}/${GETv4ResponsePUT}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT v5" enabled="true">
            <stringProp name="TestPlan.comments">?redirect=0</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv5}&amp;reoptimize=1&amp;redirect=0</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RequestBodyForPUT}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${OptimizationsDir}/${PUTv5Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
s1 = prev.getResponseHeaders()
s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
FileWithX.append(&apos;PUTv5Legacy &apos; +  s2)</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OPTIONS v5" enabled="false">
            <stringProp name="TestPlan.comments">?redirect=0</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="false">
            <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv5}&amp;wait_for_final_state=1</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${OptimizationsDir}/${GETv5ResponsePUT}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()
	
FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
s1 = prev.getResponseHeaders()
s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
FileWithX.append(&apos;GETv5LegacyPUT &apos; +  s2)</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="grab-and-go" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="optimization_problem_id and order_uuid" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">vars.put(&apos;OptimizationProblemIDv4&apos;, &apos;48F5ED2882D9A810C0282930536CD8CA&apos;)
vars.put(&apos;OptimizationProblemIDv5&apos;, &apos;20825836B8B743CAA70832484C83BB3B&apos;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4" enabled="true">
            <stringProp name="TestPlan.comments">OK</stringProp>
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v4}/grab-and-go/optimization.php</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RequestBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Api-Key</stringProp>
                  <stringProp name="Header.value">${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv4&apos;, b)

FileWithIDs = new File(&apos;${OptimizationsDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.text = b + &apos;,&apos;

RespFile = new File(&apos;${OptimizationsDir}/${POSTv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

vars.put(&apos;GrabAndGoDestinationIdForAddressesAPIv4&apos;, a.&apos;addresses&apos;.&apos;route_destination_id&apos;[2].toString())</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv5Legacy" enabled="true">
            <stringProp name="TestPlan.comments">OK</stringProp>
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5Legacy}/grab-and-go/optimization.php</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RequestBody}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv5&apos;, b)

FileWithIDs = new File(&apos;${OptimizationsDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.append(b)

RespFile = new File(&apos;${OptimizationsDir}/${POSTv5Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

vars.put(&apos;GrabAndGoDestinationIdForAddressesAPIv5&apos;, a.&apos;addresses&apos;.&apos;route_destination_id&apos;[2].toString())

FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
s1 = prev.getResponseHeaders()
s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
FileWithX.text = &apos;POSTv5Legacy &apos; +  s2</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="addresses.php" enabled="true"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="POST Order" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Post an Order" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4 Order" enabled="true">
                  <stringProp name="TestPlan.comments">	&quot;local_timezone_string&quot;:&quot;Europe/Belgrade&quot;</stringProp>
                  <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Orders}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;address_1&quot;:&quot;3703 N Central Ave, Tampa, FL 33603, USA&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Api-Key</stringProp>
                        <stringProp name="Header.value">${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="order_id" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;OrderUUIDForGrabAndGo&apos;, a.&apos;order_uuid&apos;.toString())</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Order New Order API MEETUP" enabled="false">
                  <stringProp name="TestPlan.comments">&quot;tracking_number&quot;:&quot;${TrackingNumber}&quot;</stringProp>
                  <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5OrdersPlatformAPI}/create</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;address_1&quot;:&quot;1004 E 25th Ave, Tampa, FL 33605, USA&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="order_id" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;OrderUUIDForGrabAndGo&apos;, a.&apos;order_uuid&apos;.toString())</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Random alias" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import org.apache.commons.lang.RandomStringUtils

vars.put(&apos;AliasForGrabAndGoAddressesPOST&apos;, RandomStringUtils.random(32, ((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()))</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="v4" enabled="true"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4 address" enabled="false">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4}/grab-and-go/addresses.php?optimization_problem_id=${OptimizationProblemIDv4}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;addresses&quot;:&#xd;
		[&#xd;
			{&#xd;
				&quot;alias&quot;: &quot;${AliasForGrabAndGoAddressesPOST}&quot;,&#xd;
				&quot;lat&quot;: 27.974105,&#xd;
				&quot;lng&quot;: -82.457581&#xd;
			}&#xd;
		]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4 from Order" enabled="true">
                <stringProp name="TestPlan.comments">&quot;5E01B642-CED5-473A-8664-C4376A59302B&quot;,</stringProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/grab-and-go/addresses.php?optimization_problem_id=${OptimizationProblemIDv4}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;addresses&quot;: [&#xd;
    {&#xd;
      &quot;order_uuid&quot;: &quot;${OrderUUIDForGrabAndGo}&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE" enabled="false">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/grab-and-go/addresses.php?optimization_problem_id=${OptimizationProblemIDv4}&amp;route_destination_id=${GrabAndGoDestinationIdForAddressesAPIv4}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="v5" enabled="true"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv5 address" enabled="false">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5Legacy}/grab-and-go/addresses.php?optimization_problem_id=${OptimizationProblemIDv5}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;addresses&quot;:&#xd;
		[&#xd;
			{&#xd;
				&quot;alias&quot;: &quot;${AliasForGrabAndGoAddressesPOST}&quot;,&#xd;
				&quot;lat&quot;: 27.974105,&#xd;
				&quot;lng&quot;: -82.457581&#xd;
			}&#xd;
		]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv5 from Order" enabled="true">
                <stringProp name="TestPlan.comments">&quot;5E01B642-CED5-473A-8664-C4376A59302B&quot;,</stringProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5Legacy}/grab-and-go/addresses.php?optimization_problem_id=${OptimizationProblemIDv5}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
  &quot;addresses&quot;: [&#xd;
    {&#xd;
      &quot;order_uuid&quot;: &quot;${OrderUUIDForGrabAndGo}&quot;&#xd;
    }&#xd;
  ]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE" enabled="false">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5Legacy}/grab-and-go/addresses.php?optimization_problem_id=${OptimizationProblemIDv5}&amp;route_destination_id=${GrabAndGoDestinationIdForAddressesAPIv5}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Startv4" enabled="false"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Startv4" enabled="true">
                <stringProp name="TestPlan.comments">optimization.php?&amp;optimization_problem_id</stringProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${v4}/grab-and-go/optimization.php?optimization_problem_id=${OptimizationProblemIDv4}&amp;action=optimize</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="wait_for_final_state" enabled="true">
                <stringProp name="WhileController.condition">${__groovy(${a1} == &apos;1&apos;)}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
                  <stringProp name="TestPlan.comments">route_id Getting &amp;wait_for_final_state=1</stringProp>
                  <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/grab-and-go/optimization.php?optimization_problem_id=${OptimizationProblemIDv4}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
if (a.&apos;state&apos; in [4, 5]){
	vars.put(&apos;a1&apos;, &apos;1&apos;)
	RespFile = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()}
else {sleep(10000)}</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Startv5" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Startv5Legacy" enabled="true">
                <stringProp name="TestPlan.comments">optimization.php?&amp;optimization_problem_id</stringProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${v5Legacy}/grab-and-go/optimization.php?optimization_problem_id=${OptimizationProblemIDv5}&amp;action=optimize</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">PUT</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="wait_for_final_state" enabled="true">
                <stringProp name="WhileController.condition">${__groovy(${a2} == &apos;1&apos;)}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="true">
                  <stringProp name="TestPlan.comments">route_id Getting &amp;wait_for_final_state=1</stringProp>
                  <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5Legacy}/grab-and-go/optimization.php?optimization_problem_id=${OptimizationProblemIDv5}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
if (a.&apos;state&apos; in [4, 5]){
	vars.put(&apos;a2&apos;, &apos;1&apos;)
	RespFile = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()
	FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
	s1 = prev.getResponseHeaders()
	s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
	s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
	FileWithX.append(&apos;GETv5Legacy &apos; +  s2)}
else {sleep(10000)}</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="optimization.php" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="parameters" enabled="true"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Work" enabled="false"/>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="algorithm_type" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

//1 = TSP, 2 = VRP, 3 = CVRP_TW_SD, 4 = CVRP_TW_MD, 5 = TSP_TW, 6 = TSP_TW_CR, 7 = BBCVRP, 9 = ADVANCED_CVRP_TW,100 = ALG_NONE, 101 = ALG_LEGACY_DISTRIBUTED

a = &apos;&quot;algorithm_type&quot;:3&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(b)))
vars.put(&apos;RequestBodyForPUT&apos;, e.toString())
(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="avoid" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

//[ Highways, Tolls, minimizeHighways, minimizeTolls, highways, tolls ]

a = &apos;&quot;avoid&quot;:&quot;Tolls&quot;&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="disable_optimization" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;disable_optimization&quot;:true&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="lock_last" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;lock_last&quot;:true&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="metric" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

//1 = ROUTE4ME_METRIC_EUCLIDEAN,2 = ROUTE4ME_METRIC_MANHATTAN,3 = ROUTE4ME_METRIC_GEODESIC,4 = ROUTE4ME_METRIC_MATRIX,5 = ROUTE4ME_METRIC_EXACT_2D

a = &apos;&quot;metric&quot;:2&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="optimize" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

//[ Distance, Time, timeWithTraffic ]

a = &apos;&quot;optimize&quot;:&quot;timeWithTraffic&quot;&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="route_name" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;route_name&quot;:&quot;&apos; + RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="route_time" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;route_time&quot;:&apos; + new Random().ints(0,86400).findFirst().getAsInt()

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="rt" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;rt&quot;:true&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="travel_mode" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

//[ Driving, Walking ]
a = &apos;&quot;travel_mode&quot;:&quot;Walking&quot;&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="vehicle_capacity" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;vehicle_capacity&quot;:218&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="vehicle_max_cargo_weight" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;vehicle_max_cargo_weight&quot;:78963&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="vehicle_max_cargo_volume" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;vehicle_max_cargo_volume&quot;:963&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="vehicle_max_distance_mi" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;vehicle_max_distance_mi&quot;:777&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="subtour_max_revenue" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;subtour_max_revenue&quot;:19999&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="route_max_duration" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;route_max_duration&quot;:4200&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="vehicle_id" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;vehicle_id&quot;:&quot;56926CADCA1141C742BF80EDF7AA1000&quot;&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                  <stringProp name="TestPlan.comments">E745D0D67858B6EB61C39C4EECE14B8D/56926CADCA1141C742BF80EDF7AA1000</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Work With POST Only" enabled="false"/>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="avoidance_zones" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;avoidance_zones&quot;:[&quot;5D9182203129F97939457A797F173461&quot;,&quot;DE7812A166DA02CDA7D07D8D0EBCB933&quot;]&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                  <stringProp name="TestPlan.comments">DE7812A166DA02CDA7D07D8D0EBCB933/5D9182203129F97939457A797F173461</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="target_duration" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;target_duration&quot;:1&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="target_distance" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;target_distance&quot;:&quot;4&quot;&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="target_wait_by_tail_size" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;target_wait_by_tail_size&quot;:&quot;6&quot;&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Don&apos;t work" enabled="true"/>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="!advanced_constraint" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = &apos;&quot;advanced_constraint&quot;:[{&quot;max_capacity&quot;:223}]}&apos;

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="!route_date" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

a = new Random().ints(1,32).findFirst().getAsInt()
RandomDate = ((new Date() + a ).getTime()).toString()[0..9]

a = &apos;&quot;route_date&quot;:&apos; + RandomDate

b = &apos;{&quot;parameters&quot;:{&apos; + a + &apos;}}&apos;

d = new JsonSlurper().parseText(JsonOutput.toJson(b))

e = JsonOutput.prettyPrint(d)

vars.put(&apos;RequestBodyForPUT&apos;, e.toString())

(new File(&apos;${OptimizationsDir}/${PUTPayload}&apos;)).text = e</stringProp>
                </JSR223Sampler>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update v4" enabled="true">
              <stringProp name="TestPlan.comments">optimization.php?&amp;optimization_problem_id</stringProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/grab-and-go/optimization.php?optimization_problem_id=${OptimizationProblemIDv4}&amp;action=update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestBodyForPUT}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Update v5" enabled="true">
              <stringProp name="TestPlan.comments">optimization.php?&amp;optimization_problem_id</stringProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/grab-and-go/optimization.php?optimization_problem_id=${OptimizationProblemIDv5}&amp;action=update</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestBodyForPUT}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="v5" enabled="false"/>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Startv4" enabled="false">
            <stringProp name="TestPlan.comments">optimization.php?&amp;optimization_problem_id</stringProp>
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${v4}/grab-and-go/optimization.php?optimization_problem_id=${OptimizationProblemIDv4}&amp;action=optimize</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="wait_for_final_state" enabled="false">
            <stringProp name="WhileController.condition">${__groovy(${a1} == &apos;1&apos;)}</stringProp>
          </WhileController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
              <stringProp name="TestPlan.comments">route_id Getting &amp;wait_for_final_state=1</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4APIPath}/grab-and-go/optimization.php?optimization_problem_id=${OptimizationProblemIDv4}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
if (a.&apos;state&apos; in [4, 5]){
	vars.put(&apos;a1&apos;, &apos;1&apos;)
	RespFile = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()}
else {sleep(10000)}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Startv5Legacy" enabled="false">
            <stringProp name="TestPlan.comments">optimization.php?&amp;optimization_problem_id</stringProp>
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.path">${v5Legacy}/grab-and-go/optimization.php?optimization_problem_id=${OptimizationProblemIDv5}&amp;action=optimize</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="wait_for_final_state" enabled="false">
            <stringProp name="WhileController.condition">${__groovy(${a2} == &apos;1&apos;)}</stringProp>
          </WhileController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="true">
              <stringProp name="TestPlan.comments">route_id Getting &amp;wait_for_final_state=1</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/grab-and-go/optimization.php?optimization_problem_id=${OptimizationProblemIDv5}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
if (a.&apos;state&apos; in [4, 5]){
	vars.put(&apos;a2&apos;, &apos;1&apos;)
	RespFile = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)
	RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()
	FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
	s1 = prev.getResponseHeaders()
	s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
	s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
	FileWithX.append(&apos;GETv5Legacy &apos; +  s2)}
else {sleep(10000)}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="All Endpoints"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="File with Routes" enabled="false">
            <stringProp name="filename">${RoutesDir}/RouteIDs.txt</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">v4RouteID,v5RouteID</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="false">
            <stringProp name="TestPlan.comments">${RouteId}</stringProp>
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v4}/${v4Routes}?route_id=${v4RouteID}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Api-Key</stringProp>
                  <stringProp name="Header.value">${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
d = a.&apos;addresses&apos;[1]
vars.put(&apos;AAlias&apos;, d.&apos;alias&apos;)
vars.put(&apos;AAddress&apos;, d.&apos;address&apos;)
vars.put(&apos;ALat&apos;, d.&apos;lat&apos;.toString())
vars.put(&apos;ALng&apos;, d.&apos;lng&apos;.toString())

vars.put(&apos;DepotStop&apos;, a.&apos;addresses&apos;.&apos;route_destination_id&apos;[0].toString())
vars.put(&apos;StopForMakeStart&apos;, a.&apos;addresses&apos;.&apos;route_destination_id&apos;[a.&apos;addresses&apos;.size() - 2].toString())
vars.put(&apos;FirstStop&apos;, a.&apos;addresses&apos;.&apos;route_destination_id&apos;[1].toString())

vars.put(&apos;StopsForSplit&apos;, JsonOutput.toJson(a.&apos;addresses&apos;.&apos;route_destination_id&apos;[1..3]).toString())</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5" enabled="false">
            <stringProp name="TestPlan.comments">${RouteId}</stringProp>
            <intProp name="HTTPSampler.concurrentPool">6</intProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5Legacy}/${v4Routes}?route_id=${v5RouteID}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())






vars.put(&apos;v5DepotStop&apos;, a.&apos;addresses&apos;.&apos;route_destination_id&apos;[0].toString())
vars.put(&apos;v5StopForMakeStart&apos;, a.&apos;addresses&apos;.&apos;route_destination_id&apos;[a.&apos;addresses&apos;.size() - 2].toString())
vars.put(&apos;v5FirstStop&apos;, a.&apos;addresses&apos;.&apos;route_destination_id&apos;[1].toString())

vars.put(&apos;v5StopsForSplit&apos;, JsonOutput.toJson(a.&apos;addresses&apos;.&apos;route_destination_id&apos;[1..3]).toString())</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Make Start / RR-133" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Make Startv4" enabled="true">
              <stringProp name="TestPlan.comments">${RouteId}</stringProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4Routes}?route_id=${v4RouteID}&amp;reoptimize=0&amp;recompute_directions=true</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;addresses&quot;:[&#xd;
		{&quot;is_depot&quot;:false,&#xd;
		&quot;route_destination_id&quot;:&quot;${DepotStop}&quot;,&#xd;
		&quot;sequence_no&quot;:1},&#xd;
		{&quot;is_depot&quot;:true,&quot;route_destination_id&quot;:&quot;${StopForMakeStart}&quot;}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Make Startv5" enabled="true">
              <stringProp name="TestPlan.comments">${RouteId}</stringProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4Routes}?route_id=${v5RouteID}&amp;reoptimize=0&amp;recompute_directions=true</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;addresses&quot;:[&#xd;
		{&quot;is_depot&quot;:false,&#xd;
		&quot;route_destination_id&quot;:&quot;${v5DepotStop}&quot;,&#xd;
		&quot;sequence_no&quot;:1},&#xd;
		{&quot;is_depot&quot;:true,&quot;route_destination_id&quot;:&quot;${v5StopForMakeStart}&quot;}]}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Duplicate Destination" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Duplicatev4" enabled="true">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4Routes}?route_id=${v4RouteID}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;addresses&quot;:[{&#xd;
		&quot;alias&quot;:&quot;${AAlias}&quot;,&#xd;
		&quot;address&quot;:&quot;${AAddress}&quot;,&#xd;
		&quot;lat&quot;:${ALat},&#xd;
		&quot;lng&quot;:${ALng}}],&#xd;
	&quot;insert_into&quot;:&quot;&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Duplicatev5" enabled="true">
              <stringProp name="TestPlan.comments">https://api.routeml.com/api.v4/route.php?route_id=DA929E0251F5E1044A2052EAA769BB10</stringProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4Routes}?route_id=${v5RouteID}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">PUT</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;addresses&quot;:[{&#xd;
		&quot;alias&quot;:&quot;${AAlias}&quot;,&#xd;
		&quot;address&quot;:&quot;${AAddress}&quot;,&#xd;
		&quot;lat&quot;:${ALat},&#xd;
		&quot;lng&quot;:${ALng}}],&#xd;
	&quot;insert_into&quot;:&quot;&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Make First / RR-130" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Make Firstv4" enabled="true">
              <stringProp name="TestPlan.comments">${RouteId}</stringProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">actions/route/move_route_destination.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">to_route_id=${v4RouteID}&amp;route_destination_ids=${StopForMakeStart}&amp;after_destination_id=undefined</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="X-Api-Key" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Make Firstv5" enabled="true">
              <stringProp name="TestPlan.comments">${RouteId}</stringProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">modules/api/v5.0/routes-platform/legacy/actions/route/move_route_destination.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">to_route_id=${v5RouteID}&amp;route_destination_ids=${v5StopForMakeStart}&amp;after_destination_id=undefined</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Make Last/Move To Sequence No." enabled="false">
            <stringProp name="TestPlan.comments">actions/route/move_route_destination.php</stringProp>
          </GenericController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Make Lastv4" enabled="true">
              <stringProp name="TestPlan.comments">${RouteId}</stringProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">actions/route/move_route_destination.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">to_route_id=${v4RouteID}&amp;route_destination_ids=${FirstStop}&amp;after_destination_id=${StopForMakeStart}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="X-Api-Key" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Make Lastv5" enabled="true">
              <stringProp name="TestPlan.comments">${RouteId}</stringProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">modules/api/v5.0/routes-platform/legacy/actions/route/move_route_destination.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">to_route_id=${v5RouteID}&amp;route_destination_ids=${v5FirstStop}&amp;after_destination_id=${v5StopForMakeStart}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Not optimization_problem.php&amp;route.php"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="!!!api.v3/route/reverse.php" enabled="false">
              <stringProp name="TestPlan.comments">RR-136/138/144</stringProp>
            </GenericController>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="v4" enabled="true"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="X-Api-Key" elementType="Header">
                      <stringProp name="Header.name">X-Api-Key</stringProp>
                      <stringProp name="Header.value">${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Stops" enabled="true">
                  <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                  <intProp name="HTTPSampler.concurrentPool">6</intProp>
                  <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">api.v3/route/reverse.php?route_id=${v4RouteID}&amp;reverse_type=stops</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="!!!Route" enabled="false">
                  <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                  <intProp name="HTTPSampler.concurrentPool">6</intProp>
                  <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">api.v3/route/reverse.php?route_id=${v4RouteID}&amp;reverse_type=route</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="v5" enabled="true"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Stops" enabled="true">
                  <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                  <intProp name="HTTPSampler.concurrentPool">6</intProp>
                  <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">modules/api/v5.0/routes-platform/legacy/api.v3/route/reverse.php?route_id=${v5RouteID}&amp;reverse_type=stops</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="!!!Route" enabled="false">
                  <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                  <intProp name="HTTPSampler.concurrentPool">6</intProp>
                  <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">modules/api/v5.0/routes-platform/legacy/api.v3/route/reverse.php?route_id=${v5RouteID}&amp;reverse_type=route</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="04/17/24 actions/duplicate_route.php" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="actions/duplicate_route.php" enabled="true">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">actions/duplicate_route.php?route_id=${v4RouteID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="X-Api-Key" elementType="Header">
                      <stringProp name="Header.name">X-Api-Key</stringProp>
                      <stringProp name="Header.value">${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
FileWithRoutesIDs = new File(&apos;${RoutesDir}/RouteIDs.txt&apos;)
FileWithRoutesIDs.text = &apos;v4,v5\n&apos; + a.&apos;optimization_problem_id&apos;.toString() + &apos;,&apos;</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="actions/duplicate_route.php" enabled="true">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">modules/api/v5.0/routes-platform/legacy/actions/duplicate_route.php?route_id=${v5RouteID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
FileWithRoutesIDs = new File(&apos;${RoutesDir}/RouteIDs.txt&apos;)
FileWithRoutesIDs.append(a.&apos;optimization_problem_id&apos;.toString())</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="split_route.php" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v4" enabled="true">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/split_route.php</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;route_id&quot;:&quot;${v4RouteID}&quot;,&#xd;
	&quot;route_destination_ids&quot;:${StopsForSplit}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="X-Api-Key" elementType="Header">
                      <stringProp name="Header.name">X-Api-Key</stringProp>
                      <stringProp name="Header.value">${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v5" enabled="true">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5Legacy}/split_route.php</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;route_id&quot;:&quot;${v5RouteID}&quot;,&#xd;
	&quot;route_destination_ids&quot;:${v5StopsForSplit}&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="actions/route/delete_route_destination.php" enabled="false"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v4" enabled="true">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">actions/route/delete_route_destination.php</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">route_destination_id=${FirstStop}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="X-Api-Key" elementType="Header">
                      <stringProp name="Header.name">X-Api-Key</stringProp>
                      <stringProp name="Header.value">${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v5" enabled="true">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">modules/api/v5.0/routes-platform/legacy/actions/route/delete_route_destination.php</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">route_destination_id=${v5FirstStop}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Mark as Visited and Re-Optimize"/>
            <hashTree>
              <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="File with Routes">
                <stringProp name="filename">${RoutesDir}/RouteIDs.txt</stringProp>
                <stringProp name="fileEncoding"></stringProp>
                <stringProp name="variableNames">v4RouteID,v5RouteID</stringProp>
                <boolProp name="ignoreFirstLine">true</boolProp>
                <stringProp name="delimiter">,</stringProp>
                <boolProp name="quotedData">false</boolProp>
                <boolProp name="recycle">true</boolProp>
                <boolProp name="stopThread">false</boolProp>
                <stringProp name="shareMode">shareMode.all</stringProp>
              </CSVDataSet>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="v4"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Api-Key</stringProp>
                      <stringProp name="Header.value">${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4">
                  <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
                  <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4}/${v4Routes}?route_id=${v4RouteID}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
//RespFile = new File(&apos;${RoutesDir}/Routev4.json&apos;)
//RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

RouteDestinationsFile = new File(&apos;${RoutesDir}/Routev4DestinationIDs.txt&apos;)
RouteDestinationsFile.text = &apos;route_destination_id&apos; + &apos;\n&apos;
for (i in 2..11){
	RouteDestinationsFile.append (a.&apos;addresses&apos;[i].&apos;route_destination_id&apos; + &apos;\n&apos;)
	}</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Mark as Visited">
                  <stringProp name="LoopController.loops">10</stringProp>
                </LoopController>
                <hashTree>
                  <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter">
                    <stringProp name="CounterConfig.start">1</stringProp>
                    <stringProp name="CounterConfig.end"></stringProp>
                    <stringProp name="CounterConfig.incr">1</stringProp>
                    <stringProp name="CounterConfig.name">VisitedStopv4</stringProp>
                    <stringProp name="CounterConfig.format"></stringProp>
                    <boolProp name="CounterConfig.per_user">false</boolProp>
                  </CounterConfig>
                  <hashTree/>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="File with route_destination_ids">
                    <stringProp name="filename">${RoutesDir}/Routev4DestinationIDs.txt</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="variableNames">StopForMarkingv4</stringProp>
                    <boolProp name="ignoreFirstLine">true</boolProp>
                    <stringProp name="delimiter">,</stringProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="shareMode">shareMode.thread</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Mark as Visited ${VisitedStopv4}" enabled="true">
                    <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                    <intProp name="HTTPSampler.concurrentPool">6</intProp>
                    <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">actions/address/update_address_visited.php?address_id=${StopForMarkingv4}&amp;route_id=${v4RouteID}&amp;is_visited=1</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Mark as Departed ${VisitedStopv4}" enabled="true">
                    <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                    <intProp name="HTTPSampler.concurrentPool">6</intProp>
                    <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">api/route/mark_address_departed.php?address_id=${StopForMarkingv4}&amp;route_id=${v4RouteID}&amp;is_departed=1</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Re-Optimize" enabled="true">
                  <stringProp name="TestPlan.comments">Get Route</stringProp>
                  <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4}/${v4Routes}?route_id=${v4RouteID}&amp;reoptimize=1&amp;remaining=1</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Delay" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">sleep(20000)</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4">
                  <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
                  <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv4}&amp;wait_for_final_state=1</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Api-Key</stringProp>
                        <stringProp name="Header.value">${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${OptimizationsDir}/Re-Optimized-${GETv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Delay" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">sleep(20000)</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="v5" enabled="true"/>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy">
                  <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
                  <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5Legacy}/${v4Routes}?route_id=${v5RouteID}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
//RespFile = new File(&apos;${RoutesDir}/Routev5.json&apos;)
//RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

RouteDestinationsFile = new File(&apos;${RoutesDir}/Routev5DestinationIDs.txt&apos;)
RouteDestinationsFile.text = &apos;route_destination_id&apos; + &apos;\n&apos;
for (i in 2..11){
	RouteDestinationsFile.append (a.&apos;addresses&apos;[i].&apos;route_destination_id&apos; + &apos;\n&apos;)
	}</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Mark as Visited">
                  <stringProp name="LoopController.loops">10</stringProp>
                </LoopController>
                <hashTree>
                  <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter">
                    <stringProp name="CounterConfig.start">1</stringProp>
                    <stringProp name="CounterConfig.end"></stringProp>
                    <stringProp name="CounterConfig.incr">1</stringProp>
                    <stringProp name="CounterConfig.name">VisitedStopv5</stringProp>
                    <stringProp name="CounterConfig.format"></stringProp>
                    <boolProp name="CounterConfig.per_user">false</boolProp>
                  </CounterConfig>
                  <hashTree/>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="File with route_destination_ids">
                    <stringProp name="filename">${RoutesDir}/Routev5DestinationIDs.txt</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="variableNames">StopForMarkingv5</stringProp>
                    <boolProp name="ignoreFirstLine">true</boolProp>
                    <stringProp name="delimiter">,</stringProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="shareMode">shareMode.thread</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Mark as Visited ${VisitedStopv5}" enabled="true">
                    <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                    <intProp name="HTTPSampler.concurrentPool">6</intProp>
                    <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">modules/api/v5.0/routes-platform/legacy/actions/address/update_address_visited.php?address_id=${StopForMarkingv5}&amp;route_id=${v5RouteID}&amp;is_visited=1</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Mark as Departed ${VisitedStopv4}" enabled="true">
                    <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                    <intProp name="HTTPSampler.concurrentPool">6</intProp>
                    <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">modules/api/v5.0/routes-platform/legacy/api/route/mark_address_departed.php?address_id=${StopForMarkingv5}&amp;route_id=${v5RouteID}&amp;is_departed=1</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">POST</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                      <collectionProp name="Arguments.arguments"/>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Re-Optimize" enabled="true">
                  <stringProp name="TestPlan.comments">Get Route</stringProp>
                  <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5Legacy}/${v4Routes}?route_id=${v5RouteID}&amp;reoptimize=1&amp;remaining=1</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Delay" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">sleep(20000)</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="true">
                  <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
                  <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv5}&amp;wait_for_final_state=1</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${OptimizationsDir}/Re-Optimized-${GETv5Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Delay" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">sleep(20000)</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Comparision" enabled="true"/>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="String of Request" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">ReguestString = &apos;\
\
&amp;directions=1\
&amp;device_tracking_history=0\
&amp;notes=1\
&amp;order_inventory=false\
&amp;bundling_items=true\
&amp;route_path_output=EncodedList\
&amp;compress_path_points=1\
&apos;

vars.put(&apos;StringOfParameters&apos;, ReguestString)</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Empty String of Request">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">ReguestString = &apos;&apos;

vars.put(&apos;StringOfParameters&apos;, ReguestString)</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
                  <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
                  <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4}/${v4Routes}?route_id=${v4RouteID}${StringOfParameters}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Api-Key</stringProp>
                        <stringProp name="Header.value">${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
RespFile = new File(&apos;${ReOptimizeDir}/Routev4ReOptimized.json&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="true">
                  <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
                  <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5Legacy}/${v4Routes}?route_id=${v5RouteID}${StringOfParameters}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="Authorization" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
RespFile = new File(&apos;${ReOptimizeDir}/Routev5ReOptimized.json&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="keys">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${ReOptimizeDir}/Routev4ReOptimized.json&apos;)
FileWithv5 = new File(&apos;${ReOptimizeDir}/Routev5ReOptimized.json&apos;)
FileWithRoutes = new File(&apos;${ReOptimizeDir}/ReOptimizedRoutes.txt&apos;)

a1 = new JsonSlurper().parse(FileWithv4)
a2 = new JsonSlurper().parse(FileWithv5)

RouteNamev4 = a1.&apos;parameters&apos;.&apos;route_name&apos;
RouteNamev5 = a2.&apos;parameters&apos;.&apos;route_name&apos;
	w1 = (RouteNamev4.length() &gt; RouteNamev5.length()) ? RouteNamev4.length() : RouteNamev5.length()
	w2 = (RouteNamev4 != RouteNamev5) ? RouteNamev5 + &apos;\n&apos; : &apos;&apos;
	Str1 =  RouteNamev4 + &apos;\n&apos; + w2 + &apos;*&apos;.repeat(w1)
	println Str1
	FileWithRoutes.append(Str1 + &apos;\n&apos;)

b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2 
Str1 = &apos;keys\nin v4 (&apos; + a1.size() + &apos;): &apos; + c1
FileWithRoutes.append(Str1 + &apos;\n&apos;)
c2 = b2 - b1
Str1 = &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2
FileWithRoutes.append(Str1 + &apos;\n&apos;)
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()

FileWithRoutes.append(&apos;\nTypes\n&apos;)
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		FileWithRoutes.append(j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2 + &apos;\n&apos;)
		j++}}
	
FileWithRoutes.append(&apos;\nValues\n&apos;)
ExcludingKeys = [&apos;route_id&apos;,&apos;optimization_problem_id&apos;,&apos;route_id&apos;,&apos;channel_name&apos;,&apos;created_timestamp&apos;,&apos;parameters&apos;,&apos;addresses&apos;,&apos;links&apos;,&apos;member_picture&apos;]
j = 1
for (i in 0..a1.size() - 1){		
	if (d1.(b1[i].toString()) != d2.(b2[i].toString())		
	&amp;&amp; (b1[i].toString() !in ExcludingKeys)){
		FileWithRoutes.append(j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n&apos;)
		j++}}
FileWithRoutes.append(&apos;*&apos;.repeat(${__property(ConsoleWidth)}) + &apos;\n&apos;)</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="parameters" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${ReOptimizeDir}/Routev4ReOptimized.json&apos;)
FileWithv5 = new File(&apos;${ReOptimizeDir}/Routev5ReOptimized.json&apos;)
FileWithRoutes = new File(&apos;${ReOptimizeDir}/ReOptimizedRoutes.txt&apos;)

a1 = new JsonSlurper().parse(FileWithv4).&apos;parameters&apos;
a2 = new JsonSlurper().parse(FileWithv5).&apos;parameters&apos;

b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2 
Str1 = &apos;parameters\nin v4 (&apos; + a1.size() + &apos;): &apos; + c1
FileWithRoutes.append(Str1 + &apos;\n&apos;)
c2 = b2 - b1
Str1 = &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2 + &apos;\n&apos;
FileWithRoutes.append(Str1)
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()

FileWithRoutes.append(&apos;\nTypes\n&apos;)
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		FileWithRoutes.append(j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2 + &apos;\n&apos;)
		j++}}
	
FileWithRoutes.append(&apos;\nValues\n&apos;)
ExcludingKeys = [&apos;ip&apos;,&apos;override_addresses&apos;,&apos;max_tour_size&apos;]
j = 1
for (i in 0..a1.size() - 1){		
	if (d1.(b1[i].toString()) != d2.(b2[i].toString())		
	&amp;&amp; (b1[i].toString() !in ExcludingKeys)){
		FileWithRoutes.append(j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n&apos;)
		j++}}
FileWithRoutes.append(&apos;*&apos;.repeat(${__property(ConsoleWidth)}) + &apos;\n&apos;)</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes.addresses" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${ReOptimizeDir}/Routev4ReOptimized.json&apos;)
FileWithv5 = new File(&apos;${ReOptimizeDir}/Routev5ReOptimized.json&apos;)
FileWithRoutes = new File(&apos;${ReOptimizeDir}/ReOptimizedRoutes.txt&apos;)

a1 = new JsonSlurper().parse(FileWithv4)
a2 = new JsonSlurper().parse(FileWithv5)
	
	a1 = a1.&apos;addresses&apos;
	a2 = a2.&apos;addresses&apos;
	b = a1.size()
	c1 = []
	c2 = []

	for (i in 0..b - 1){
		j1 = a1[i].&apos;sequence_no&apos;
		j2 = a2[i].&apos;sequence_no&apos;
		c1[j1] = a1[i]
		c2[j2] = a2[i]}
	if(!a1.&apos;sequence_no&apos;.contains(0)){
		c1.remove(0)}
	if(!a2.&apos;sequence_no&apos;.contains(0)){
		c2.remove(0)}
FileWithRoutes.append(&apos;addresses\n&apos;)
	for (i in 0..b - 1){
		b1 = c1[i].keySet()
		b2 = c2[i].keySet()
		c11 = b1 - b2
		Str1 = &apos;Stop &apos; + (i + 1) + &apos;\nin v4 (&apos; + c1[i].size() + &apos;): &apos; + c11
		
		FileWithRoutes.append(Str1 + &apos;\n&apos;)
		c12 = b2 - b1
		Str1 = &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c12
		
		FileWithRoutes.append(Str1 + &apos;\n&apos;)
		for (j in 0..c11.size() - 1){
			c1[i].remove(c11[j])}
		for (j in 0..c12.size() - 1){
			c2[i].remove(c12[j])}}


FileWithRoutes.append(&apos;\nTypes\n&apos;)
ExcludingKeys = [&apos;route_destination_id&apos;]
for (k in 0..b - 1){
	FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos;\n&apos;)
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		f1 = (d1.(b1[i].toString())).getClass().toString()
		f1 = f1.reverse()
		f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
		f1 = f1.reverse()
			f2 = (d2.(b2[i].toString())).getClass().toString()
			f2 = f2.reverse()
			f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
			f2 = f2.reverse()
			if (f1 != f2
			&amp;&amp; b1[i] !in ExcludingKeys){
				Str1 = j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
				j++
				FileWithRoutes.append(Str1 + &apos;\n&apos;)}}
	//FileWithRoutes.append(&apos;*\n&apos;)
	}

FileWithRoutes.append(&apos;\nValues&apos;)
ExcludingKeys = [&apos;tracking_number&apos;,&apos;optimization_problem_id&apos;,&apos;route_id&apos;,&apos;channel_name&apos;,&apos;route_destination_id&apos;,&apos;manifest&apos;]
for (k in 0..b - 1){
	FileWithRoutes.append(&apos;\nStop &apos; + (k + 1) + &apos; (&quot;sequence_no&quot;:&apos; + k + &apos;)&apos; + &apos;\n&apos;)
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		if (b1[i].toString() !in ExcludingKeys){
			if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
				FileWithRoutes.append(j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n&apos;)
				j++}}}}</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Finish" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">println &apos;Finish&apos;</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>false</responseData>
                      <samplerData>false</samplerData>
                      <xml>false</xml>
                      <fieldNames>true</fieldNames>
                      <responseHeaders>false</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                      <sentBytes>true</sentBytes>
                      <url>true</url>
                      <threadCounts>true</threadCounts>
                      <idleTime>true</idleTime>
                      <connectTime>true</connectTime>
                    </value>
                  </objProp>
                  <stringProp name="filename"></stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="api/route/remove_all.php" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v4" enabled="true">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">api/route/remove_all.php</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;exclude_ids&quot;: [&quot;CA51A2A7DD4DBB22A4F428BADA8E7FB7&quot;,&quot;5E714D4A469A2EF2A67D75CE06EA1798&quot;,&quot;D36E3CA34D77260EC423DDF7C0C6667D&quot;,&quot;ACE4BE40A580872C9B0B75623DAF2932&quot;]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Api-Key</stringProp>
                      <stringProp name="Header.value">${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v5!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!" enabled="false">
                <stringProp name="TestPlan.comments">DELETE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!</stringProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">modules/api/v5.0/routes-platform/legacy/api/route/remove_all.php</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;exclude_ids&quot;: [&quot;6744A82536DF425B827E86655575E354&quot;,&quot;FB2A5C3F24534668AA6132C0F1FF023D&quot;,&quot;A505876E08C74A37AA5B383AB91A79CE&quot;,&quot;03841AFA0DF8447496BAEF98D69E143D&quot;,&quot;2629509ECA03404BB146DFCFBAB90A31&quot;,&quot;7F2991EB02CE479A9424C6BCEB72E44D&quot;,&quot;22806FC30B174381B846B5281691B81B&quot;,&quot;682C83D3B20249AD90A847A044C2CB12&quot;]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="v5" enabled="false">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">modules/api/v5.0/routes-platform/legacy/api/route/remove_all.php</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5" enabled="false">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <intProp name="HTTPSampler.concurrentPool">6</intProp>
                <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5Legacy}/${v4Routes}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Authorization" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())






vars.put(&apos;v5DepotStop&apos;, a.&apos;addresses&apos;.&apos;route_destination_id&apos;[0].toString())
vars.put(&apos;v5StopForMakeStart&apos;, a.&apos;addresses&apos;.&apos;route_destination_id&apos;[a.&apos;addresses&apos;.size() - 2].toString())
vars.put(&apos;v5FirstStop&apos;, a.&apos;addresses&apos;.&apos;route_destination_id&apos;[1].toString())

vars.put(&apos;v5StopsForSplit&apos;, JsonOutput.toJson(a.&apos;addresses&apos;.&apos;route_destination_id&apos;[1..3]).toString())</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Delay" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">sleep(60000)</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="merge_routes.php" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Crean Dir" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import org.apache.commons.io.FileUtils

FileUtils.cleanDirectory(new File(&apos;${MergeDir}&apos;))
FileUtils.cleanDirectory(new File(&apos;${RoutesDir}&apos;))</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="POST" enabled="true">
            <stringProp name="LoopController.loops">3</stringProp>
          </LoopController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="File Number" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">MergeFileNumber</stringProp>
              <stringProp name="CounterConfig.format">00</stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Request Body" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

NumberOfStops = 3
RT = &apos;false&apos;
AlgorithmType = 100

b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;address&quot;:&quot;&apos; + RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},&apos;

for (i in 1..NumberOfStops){
	a = &apos;{&quot;alias&quot;:&quot;&apos; +	RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;address&quot;:&quot;&apos; +	RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
	b = (i == NumberOfStops) ? b + a : b + a + &apos;,&apos;}

Str1 = &apos;{&quot;parameters&quot;:{&quot;route_name&quot;:&quot;&apos; + RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;route_date&quot;:&quot;&apos; + (new Date().getTime()).toString()[0..9] + &apos;&quot;,&quot;rt&quot;:&apos; + RT + &apos;,&quot;algorithm_type&quot;:&apos; + AlgorithmType + &apos;},&quot;addresses&quot;:[&apos; + b + &apos;]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(Str1))).toString()

vars.put(&apos;RequestBody&apos;, e)

(new File(&apos;${MergeDir}/${MergeFileNumber}-${Payload}&apos;)).text = e</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4" enabled="true">
              <stringProp name="TestPlan.comments">Add New Route</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?redirect=0</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv4&apos;, b)

FileWithIDs = new File(&apos;${MergeDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.append(b + &apos;,&apos;)

RespFile = new File(&apos;${MergeDir}/${MergeFileNumber}-${POSTv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with Request" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

RequestBody = prev.getSamplerData()
RequestHeader = prev.getRequestHeaders()
r = RequestHeader[0..RequestHeader.length()-2]
r = r.replace(&apos;\n&apos;, &apos;\n\t&apos;)
r = &apos;\t&apos;+ r
RequestBody = RequestBody.replace(&apos;[no cookies]&apos;, &apos;&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
a = new JsonSlurper().parse(prev.getResponseData())
b = JsonOutput.prettyPrint(JsonOutput.toJson(a))
s2 = &apos;&apos;
s1 = prev.getResponseHeaders()
if (s1.contains(&apos;x-request-id&apos;)){
	s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
	s2 = &apos;, x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]}
s = RequestBody + &apos;Header\n&apos; + r + &apos;\nResponse&apos; + s2 + &apos;\n&apos; + b + &apos;\n***********\n&apos;

FileWithRequests = new File(&apos;${OptimizationsDir}/${RequestsFile}&apos;)
FileWithRequests.text = s
//FileWithRequests.append(s)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
              <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv4}&amp;wait_for_final_state=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
RespFile = new File(&apos;${MergeDir}/${MergeFileNumber}-${GETv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

RespFile = new File(&apos;${MergeDir}/v4RouteIDsForMerge.txt&apos;)
RespFile.append(a.&apos;routes&apos;[0].&apos;route_id&apos; + &apos;,&apos;)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv5Legacy" enabled="true">
              <stringProp name="TestPlan.comments">?redirect=0</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?redirect=0</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv5&apos;, b)

FileWithIDs = new File(&apos;${MergeDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.append(b + &apos;\n&apos;)

RespFile = new File(&apos;${MergeDir}/${MergeFileNumber}-${POSTv5Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

FileWithX = new File(&apos;${MergeDir}/${FileWithx-request-id}&apos;)
s1 = prev.getResponseHeaders()
s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
FileWithX.append(&apos;${MergeFileNumber}-POSTv5Legacy &apos; +  s2)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="true">
              <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv5}&amp;wait_for_final_state=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
RespFile = new File(&apos;${MergeDir}/${MergeFileNumber}-${GETv5Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

RespFile = new File(&apos;${MergeDir}/v5RouteIDsForMerge.txt&apos;)
RespFile.append(a.&apos;routes&apos;[0].&apos;route_id&apos; + &apos;,&apos;)
	
FileWithX = new File(&apos;${MergeDir}/${FileWithx-request-id}&apos;)
s1 = prev.getResponseHeaders()
s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
FileWithX.append(&apos;${MergeFileNumber}-GETv5Legacy &apos; +  s2)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
            <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="IDs Getting" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">File FileWithv4 = new File(&apos;${MergeDir}/v4RouteIDsForMerge.txt&apos;)
FileContent = FileWithv4.text
println FileContent[0..FileContent.length() - 2]
vars.put(&apos;RouteIDsForMergev4&apos;, FileContent[0..FileContent.length() - 2])

File FileWithv5 = new File(&apos;${MergeDir}/v5RouteIDsForMerge.txt&apos;)
FileContent = FileWithv5.text
println FileContent[[0..FileContent.length() - 2]]
vars.put(&apos;RouteIDsForMergev5&apos;, FileContent[0..FileContent.length() - 2])</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="String of Request" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">ReguestString = &apos;\
\
&amp;remove_origin=false\
&apos;

vars.put(&apos;MergeParameters&apos;, ReguestString)</stringProp>
            <stringProp name="TestPlan.comments">&amp;remove_origin=true/false</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="v4" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="X-Api-Key" elementType="Header">
                  <stringProp name="Header.name">X-Api-Key</stringProp>
                  <stringProp name="Header.value">${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="merge_routes.php v4" enabled="true">
              <stringProp name="TestPlan.comments">${RouteId}</stringProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">actions/merge_routes.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">route_ids=${RouteIDsForMergev4}${MergeParameters}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;OptimizationProblemIDMergedv4&apos;, a.&apos;optimization_problem_id&apos;.toString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4 Merged Route" enabled="true">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDMergedv4}&amp;wait_for_final_state=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
RespFile = new File(&apos;${MergeDir}/Merged-${GETv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

FileWithRoutesIDs = new File(&apos;${RoutesDir}/RouteIDs.txt&apos;)
FileWithRoutesIDs.text = &apos;v4,v5\n&apos; + a.&apos;routes&apos;[0].&apos;route_id&apos; + &apos;,&apos;</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="v5" enabled="true"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="merge_routes.php v5" enabled="true">
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">modules/api/v5.0/routes-platform/legacy/actions/merge_routes.php</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">route_ids=${RouteIDsForMergev5}${MergeParameters}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;OptimizationProblemIDMergedv5&apos;, a.&apos;optimization_problem_id&apos;.toString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/x-www-form-urlencoded</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5 Merged Route" enabled="true">
              <stringProp name="TestPlan.comments">route_id Getting &amp;wait_for_final_state=1</stringProp>
              <intProp name="HTTPSampler.concurrentPool">6</intProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDMergedv5}&amp;wait_for_final_state=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
RespFile = new File(&apos;${MergeDir}/Merged-${GETv5Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

FileWithRoutesIDs = new File(&apos;${RoutesDir}/RouteIDs.txt&apos;)
FileWithRoutesIDs.append(a.&apos;routes&apos;[0].&apos;route_id&apos;)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="optimization-profiles" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OPTIONS" enabled="false">
            <stringProp name="TestPlan.comments">?redirect=0</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5APIPath}/optimization-profiles/datatable</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST" enabled="true">
            <stringProp name="TestPlan.comments">?redirect=0</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5APIPath}/optimization-profiles/datatable</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Vehicles" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Random Values" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import org.apache.commons.lang.RandomStringUtils

vars.put(&apos;VehicleAlias&apos;, RandomStringUtils.random(32, ((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()))
vars.put(&apos;VehicleProfileName&apos;, RandomStringUtils.random(32, ((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()))
vars.put(&apos;VehicleCapacityProfiles&apos;, RandomStringUtils.random(32, ((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()))

FuelType = [&apos;unleaded 87&apos;, &apos;unleaded 89&apos;, &apos;unleaded 91&apos;, &apos;unleaded 93&apos;, &apos;diesel&apos;, &apos;electric&apos;, &apos;hybrid&apos;]
vars.put(&apos;VehicleFuelType&apos;, FuelType[new Random().ints(0, 7).findFirst().getAsInt()])</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Vehicle Profiles" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST" enabled="false">
              <stringProp name="TestPlan.comments">&quot;is_default&quot;: 0,</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/vehicle-profiles</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;name&quot;: &quot;${VehicleProfileName}&quot;,&#xd;
        &quot;fuel_type&quot;: &quot;${VehicleFuelType}&quot;,&#xd;
        &quot;height&quot;: 13.5,&#xd;
        &quot;width&quot;: 8,&#xd;
        &quot;length&quot;: 48,&#xd;
        &quot;weight&quot;: 80000,&#xd;
        &quot;max_weight_per_axle&quot;: 34000,&#xd;
        &quot;is_predefined&quot;: 1,&#xd;
        &quot;height_unit&quot;: &quot;ft&quot;,&#xd;
        &quot;width_unit&quot;: &quot;ft&quot;,&#xd;
        &quot;length_unit&quot;: &quot;ft&quot;,&#xd;
        &quot;weight_unit&quot;: &quot;lb&quot;,&#xd;
        &quot;max_weight_per_axle_unit&quot;: &quot;lb&quot;,&#xd;
        &quot;fuel_consumption_city_unit&quot;: &quot;mpg uk&quot;,&#xd;
        &quot;fuel_consumption_highway_unit&quot;: &quot;mpg uk&quot;,&#xd;
        &quot;height_uf_value&quot;: &quot;13&apos;6\&quot;&quot;,&#xd;
        &quot;width_uf_value&quot;: &quot;8&apos;&quot;,&#xd;
        &quot;length_uf_value&quot;: &quot;48&apos;&quot;,&#xd;
        &quot;weight_uf_value&quot;: &quot;80,000lb&quot;,&#xd;
        &quot;max_weight_per_axle_uf_value&quot;: &quot;34,000lb&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="vehicle_profile_id getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;VehicleProfileId&apos;, a.&apos;vehicle_profile_id&apos;.toString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST" enabled="true">
              <stringProp name="TestPlan.comments">&quot;is_default&quot;: 0,</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/vehicle-profiles</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;name&quot;: &quot;${VehicleProfileName}&quot;,&#xd;
        &quot;fuel_type&quot;: &quot;${VehicleFuelType}&quot;,&#xd;
        &quot;height&quot;:&quot;${VehicleHeight}&quot;,&#xd;
        &quot;width&quot;:&quot;${VehicleWidth}&quot;,&#xd;
        &quot;length&quot;:&quot;${VehicleLength}&quot;,&#xd;
        &quot;weight&quot;:&quot;${VehicleWeight}&quot;,&#xd;
        &quot;max_weight_per_axle&quot;:&quot;${VehicleMaxWeightPerAxle}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="vehicle_profile_id getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;VehicleProfileId&apos;, a.&apos;vehicle_profile_id&apos;.toString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Random Values" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.commons.lang.RandomStringUtils


vars.put(&apos;VehicleHeight&apos;,new Random().ints(5, 16).findFirst().getAsInt().toString())
vars.put(&apos;VehicleWidth&apos;,new Random().ints(5, 9).findFirst().getAsInt().toString())
vars.put(&apos;VehicleLength&apos;,new Random().ints(8, 71).findFirst().getAsInt().toString())
vars.put(&apos;VehicleWeight&apos;,new Random().ints(1000, 156471).findFirst().getAsInt().toString())
vars.put(&apos;VehicleMaxWeightPerAxle&apos;,new Random().ints(200, 80001).findFirst().getAsInt().toString())</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Vehicle Capacity Profiles" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST" enabled="false">
              <stringProp name="TestPlan.comments">?redirect=0</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/vehicle-capacity-profiles</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;name&quot;: &quot;${VehicleCapacityProfiles}&quot;,&#xd;
        &quot;max_volume&quot;: 250,&#xd;
        &quot;max_weight&quot;: 1500,&#xd;
        &quot;max_items_number&quot;: 1000,&#xd;
        &quot;max_revenue&quot;: 1000,&#xd;
        &quot;max_volume_unit&quot;: &quot;cu ft&quot;,&#xd;
        &quot;max_weight_unit&quot;: &quot;lb&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="vehicle_capacity_profile_id getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;VehicleCapacityProfileId&apos;, a.&apos;data&apos;.&apos;vehicle_capacity_profile_id&apos;.toString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST" enabled="true">
              <stringProp name="TestPlan.comments">?redirect=0</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/vehicle-capacity-profiles</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
        &quot;name&quot;: &quot;${VehicleCapacityProfiles}&quot;,&#xd;
        &quot;max_volume&quot;: ${VehicleMaxVolume},&#xd;
        &quot;max_weight&quot;: ${VehicleMaxWeight},&#xd;
        &quot;max_items_number&quot;: ${VehicleMaxItemsNumber},&#xd;
        &quot;max_revenue&quot;: ${VehicleMaxRevenue}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="vehicle_capacity_profile_id getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;VehicleCapacityProfileId&apos;, a.&apos;data&apos;.&apos;vehicle_capacity_profile_id&apos;.toString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Random Values" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import org.apache.commons.lang.RandomStringUtils

vars.put(&apos;VehicleMaxVolume&apos;,new Random().ints(1, 999999).findFirst().getAsInt().toString())
vars.put(&apos;VehicleMaxWeight&apos;,new Random().ints(1, 18446744073709552000).findFirst().getAsInt().toString())
vars.put(&apos;VehicleMaxItemsNumber&apos;,new Random().ints(1, 999999).findFirst().getAsInt().toString())
vars.put(&apos;VehicleMaxRevenue&apos;,new Random().ints(1, 999999).findFirst().getAsInt().toString())</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Vehicles" enabled="true"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET" enabled="true">
              <stringProp name="TestPlan.comments">?redirect=0</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/vehicles/78AD55DCFF74BAB70EC5919329839480</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Simple" enabled="false">
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/vehicles</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;vehicle_alias&quot;: &quot;${VehicleAlias}&quot;,&#xd;
	&quot;vehicle_make&quot;: &quot;Honda&quot;,&#xd;
	&quot;fuel_type&quot;: &quot;${VehicleFuelType}&quot;&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST with Profile" enabled="false">
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/vehicles</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;vehicle_alias&quot;: &quot;${VehicleAlias}&quot;,&#xd;
	&quot;vehicle_make&quot;: &quot;Honda&quot;,&#xd;
	&quot;fuel_type&quot;: &quot;${VehicleFuelType}&quot;,&#xd;
	&quot;vehicle_profile_id&quot;: ${VehicleProfileId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST with Capacity Profile" enabled="false">
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/vehicles</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;vehicle_alias&quot;: &quot;${VehicleAlias}&quot;,&#xd;
	&quot;vehicle_make&quot;: &quot;Honda&quot;,&#xd;
	&quot;fuel_type&quot;: &quot;${VehicleFuelType}&quot;,&#xd;
	&quot;vehicle_capacity_profile_id&quot;: ${VehicleCapacityProfileId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST" enabled="false">
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/vehicles</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
	&quot;vehicle_alias&quot;: &quot;${VehicleAlias}&quot;,&#xd;
	&quot;vehicle_make&quot;: &quot;Honda&quot;,&#xd;
	&quot;fuel_type&quot;: &quot;${VehicleFuelType}&quot;,&#xd;
	&quot;vehicle_profile_id&quot;: ${VehicleProfileId},&#xd;
	&quot;vehicle_capacity_profile_id&quot;: ${VehicleCapacityProfileId}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Routes API" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST Simple" enabled="true">
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">modules/api/v5.1/routes/</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;filters&quot;: {&#xd;
		&quot;vehicle_id&quot;: &quot;3F3AA27D0C9A42385A868D53F0CD87DA&quot;,&#xd;
		&quot;schedule_date&quot;: [&quot;2024-04-01&quot;, &quot;2024-05-07&quot;]}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Avoidance zones" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Api-Key</stringProp>
                <stringProp name="Header.value">${APIKey}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POST" enabled="true">
            <stringProp name="TestPlan.comments">&quot;territory_color&quot;:&quot;ff0000&quot;,</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v4}/avoidance.php</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;territory_name&quot;:&quot;${AvoidanceZoneTerritoryName}&quot;,&#xd;
	&quot;territory&quot;:{&#xd;
		&quot;type&quot;:&quot;poly&quot;,&#xd;
		&quot;data&quot;:[&quot;41.00356373631145,28.97928150015023&quot;,&#xd;
                &quot;41.00019541574155,28.978852346707846&quot;,&#xd;
                &quot;41.001167064341786,28.989581182767417&quot;,&#xd;
                &quot;41.00343418870349,29.007863119412924&quot;,&#xd;
                &quot;41.00207392344499,29.015630796720053&quot;,&#xd;
                &quot;41.00712619573714,29.012841299344565&quot;,&#xd;
                &quot;41.00735289118293,28.99447353201058&quot;,&#xd;
                &quot;41.004162890685855,28.984088018704917&quot;]},&#xd;
	&quot;territory_color&quot;:&quot;000000&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="territory_id getting" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;AvoidanceZoneTerritoryId&apos;, a.&apos;territory_id&apos;.toString())</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Random Values" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang.RandomStringUtils


vars.put(&apos;AvoidanceZoneTerritoryName&apos;,RandomStringUtils.random(32, (&apos;A&apos;..&apos;Z&apos;).join()))</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Users" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Api-Key</stringProp>
                <stringProp name="Header.value">${APIKey}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Users" enabled="true">
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5APIPath}/team/users</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Comparision2" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="File with Routes" enabled="true">
            <stringProp name="filename">${RoutesDir}/RouteIDs.txt</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">v4RouteID,v5RouteID</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="String of Request" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">ReguestString = &apos;\
\
&amp;directions=1\
&amp;device_tracking_history=0\
&amp;notes=1\
&amp;order_inventory=false\
&amp;bundling_items=true\
&amp;route_path_output=EncodedList\
&amp;compress_path_points=1\
&apos;

vars.put(&apos;StringOfParameters&apos;, ReguestString)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Empty String of Request" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">ReguestString = &apos;&apos;

vars.put(&apos;StringOfParameters&apos;, ReguestString)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
            <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v4}/${v4Routes}?route_id=${v4RouteID}${StringOfParameters}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Api-Key</stringProp>
                  <stringProp name="Header.value">${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
RespFile = new File(&apos;${RoutesDir}/Routev4-After.json&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="true">
            <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5Legacy}/${v4Routes}?route_id=${v5RouteID}${StringOfParameters}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
RespFile = new File(&apos;${RoutesDir}/Routev5-After.json&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

FileWithX = new File(&apos;${RoutesDir}/x-request-id(route.php).txt&apos;)
s1 = prev.getResponseHeaders()
s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
s2 = s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
FileWithX.append(&apos;Routev5-After &apos; +  s2)</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="keys" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${RoutesDir}/Routev4-After.json&apos;)
FileWithv5 = new File(&apos;${RoutesDir}/Routev5-After.json&apos;)
FileWithRoutes = new File(&apos;${RoutesDir}/RoutesAfter.txt&apos;)
a1 = new JsonSlurper().parse(FileWithv4)
a2 = new JsonSlurper().parse(FileWithv5)

RouteNamev4 = a1.&apos;parameters&apos;.&apos;route_name&apos;
RouteNamev5 = a2.&apos;parameters&apos;.&apos;route_name&apos;
	w1 = (RouteNamev4.length() &gt; RouteNamev5.length()) ? RouteNamev4.length() : RouteNamev5.length()
	w2 = (RouteNamev4 != RouteNamev5) ? RouteNamev5 + &apos;\n&apos; : &apos;&apos;
	Str1 =  RouteNamev4 + &apos;\n&apos; + w2 + &apos;*&apos;.repeat(w1)
	println Str1
	FileWithRoutes.text = Str1 + &apos;\n&apos;

b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2 
Str1 = &apos;Keys:\nin v4 (&apos; + a1.size() + &apos;): &apos; + c1
FileWithRoutes.append(Str1 + &apos;\n&apos;)
c2 = b2 - b1
Str1 = &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2
FileWithRoutes.append(Str1 + &apos;\n&apos;)
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()

FileWithRoutes.append(&apos;\nTypes:\n&apos;)
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		FileWithRoutes.append(j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2 + &apos;\n&apos;)
		j++}}
	
FileWithRoutes.append(&apos;\nValues:\n&apos;)
ExcludingKeys = [&apos;route_id&apos;,&apos;optimization_problem_id&apos;,&apos;route_id&apos;,&apos;channel_name&apos;,&apos;created_timestamp&apos;,&apos;parameters&apos;,&apos;addresses&apos;,&apos;links&apos;,&apos;member_picture&apos;]
j = 1
for (i in 0..a1.size() - 1){		
	if (d1.(b1[i].toString()) != d2.(b2[i].toString())		
	&amp;&amp; (b1[i].toString() !in ExcludingKeys)){
		FileWithRoutes.append(j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n&apos;)
		j++}}
FileWithRoutes.append(&apos;*&apos;.repeat(${__property(ConsoleWidth)}) + &apos;\n&apos;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="parameters" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${RoutesDir}/Routev4-After.json&apos;)
FileWithv5 = new File(&apos;${RoutesDir}/Routev5-After.json&apos;)
FileWithRoutes = new File(&apos;${RoutesDir}/RoutesAfter.txt&apos;)
a1 = new JsonSlurper().parse(FileWithv4).&apos;parameters&apos;
a2 = new JsonSlurper().parse(FileWithv5).&apos;parameters&apos;

b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2 
Str1 = &apos;&quot;parameters&quot;:{}\nKeys:\nin v4 (&apos; + a1.size() + &apos;): &apos; + c1
FileWithRoutes.append(Str1 + &apos;\n&apos;)
c2 = b2 - b1
Str1 = &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2 + &apos;\n&apos;
FileWithRoutes.append(Str1)
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()

FileWithRoutes.append(&apos;\nTypes:\n&apos;)
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		FileWithRoutes.append(j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2 + &apos;\n&apos;)
		j++}}
	
FileWithRoutes.append(&apos;\nValues:\n&apos;)
ExcludingKeys = [&apos;ip&apos;,&apos;override_addresses&apos;,&apos;max_tour_size&apos;]
j = 1
for (i in 0..a1.size() - 1){		
	if (d1.(b1[i].toString()) != d2.(b2[i].toString())		
	&amp;&amp; (b1[i].toString() !in ExcludingKeys)){
		FileWithRoutes.append(j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n&apos;)
		j++}}
FileWithRoutes.append(&apos;*&apos;.repeat(${__property(ConsoleWidth)}) + &apos;\n&apos;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes.addresses" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${RoutesDir}/Routev4-After.json&apos;)
FileWithv5 = new File(&apos;${RoutesDir}/Routev5-After.json&apos;)
FileWithRoutes = new File(&apos;${RoutesDir}/RoutesAfter.txt&apos;)
a1 = new JsonSlurper().parse(FileWithv4)
a2 = new JsonSlurper().parse(FileWithv5)
	
	a1 = a1.&apos;addresses&apos;
	a2 = a2.&apos;addresses&apos;
	b = a1.size()
	c1 = []
	c2 = []

	for (i in 0..b - 1){
		j1 = a1[i].&apos;sequence_no&apos;
		j2 = a2[i].&apos;sequence_no&apos;
		c1[j1] = a1[i]
		c2[j2] = a2[i]}
	if(!a1.&apos;sequence_no&apos;.contains(0)){
		c1.remove(0)}
	if(!a2.&apos;sequence_no&apos;.contains(0)){
		c2.remove(0)}
FileWithRoutes.append(&apos;&quot;addresses&quot;:[]\nKeys:\n&apos;)
ExcludingKeys = [&apos;geofence_local_visited_timestamp&apos;, &apos;geofence_local_visited_lat&apos;, &apos;geofence_local_visited_lng&apos;, &apos;geofence_local_departed_timestamp&apos;, &apos;geofence_local_departed_lat&apos;, &apos;geofence_local_departed_lng&apos;, &apos;geofence_local_service_time&apos;, &apos;workflow_uuid&apos;, &apos;invalid_sequence&apos;]
	for (i in 0..b - 1){
		b1 = c1[i].keySet()
		b2 = c2[i].keySet()
		c11 = b1 - b2
		keys = new ArrayList(c11)
		Str1 = &apos;&apos;
		for (i1 in 0..keys.size() - 1){
			if (keys[i1] !in ExcludingKeys){
				Str1 = Str1 + keys[i1]
				Str1 = (i1 &lt; keys.size() - 1) ? Str1 + &apos;, &apos; : Str1 + &apos;&apos;}}
		if (Str1 != &apos;&apos;){Str1 = &apos;Stop &apos; + (i + 1) + &apos;\nin v4 (&apos; + c1[i].size() + &apos;): &apos; + Str1 + &apos;\n&apos;}
		c12 = b2 - b1
		if (c12.toString() != &apos;[]&apos;){if (Str1 == &apos;&apos;){Str1 = &apos;Stop &apos; + (i + 1) + &apos;\n&apos;}
			Str1 = Str1 + &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c12
		FileWithRoutes.append(Str1 + &apos;\n&apos;)}		
	for (j in 0..c11.size() - 1){
		c1[i].remove(c11[j])}
	for (j in 0..c12.size() - 1){
		c2[i].remove(c12[j])}}
//Types
FileWithRoutes.append(&apos;\nTypes:\n&apos;)
ExcludingKeys = [&apos;route_destination_id&apos;]
for (k in 0..b - 1){
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		if (b1[i] !in ExcludingKeys){
			f1 = (d1.(b1[i].toString())).getClass().toString()
			f1 = f1.reverse()
			f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
			f1 = f1.reverse()
				f2 = (d2.(b2[i].toString())).getClass().toString()
				f2 = f2.reverse()
				f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
				f2 = f2.reverse()
			if (f1 != f2){
				if (j == 1){FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos;\n&apos;)}
				FileWithRoutes.append(&apos;\t&apos; + j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2 + &apos;\n&apos;)
				j++}}}}
//Values
FileWithRoutes.append(&apos;\nValues:\n&apos;)
ExcludingKeys = [&apos;tracking_number&apos;,&apos;optimization_problem_id&apos;,&apos;route_id&apos;,&apos;channel_name&apos;,&apos;route_destination_id&apos;,&apos;manifest&apos;]
for (k in 0..b - 1){
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		if (b1[i].toString() !in ExcludingKeys){
			if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
				if (j == 1){FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos; (&quot;sequence_no&quot;:&apos; + k + &apos;)&apos; + &apos;\n&apos;)}
				FileWithRoutes.append(&apos;\t&apos; + j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n&apos;)
				j++}}}}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Old routes.addresses" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${RoutesDir}/Routev4-${FileNumber}.json&apos;)
FileWithv5 = new File(&apos;${RoutesDir}/Routev5-${FileNumber}.json&apos;)

FileWithRoutes = new File(&apos;${RoutesDir}/Routes.txt&apos;)

a1 = new JsonSlurper().parse(FileWithv4)
a2 = new JsonSlurper().parse(FileWithv5)
	
	a1 = a1.&apos;addresses&apos;
	a2 = a2.&apos;addresses&apos;
	b = a1.size()
	c1 = []
	c2 = []

	for (i in 0..b - 1){
		j1 = a1[i].&apos;sequence_no&apos;
		j2 = a2[i].&apos;sequence_no&apos;
		c1[j1] = a1[i]
		c2[j2] = a2[i]}
	if(!a1.&apos;sequence_no&apos;.contains(0)){
		c1.remove(0)}
	if(!a2.&apos;sequence_no&apos;.contains(0)){
		c2.remove(0)}
FileWithRoutes.append(&apos;&quot;addresses&quot;:[]\nKeys:\n&apos;)
	for (i in 0..b - 1){
		b1 = c1[i].keySet()
		b2 = c2[i].keySet()
		
		c11 = b1 - b2
		Str1 = &apos;Stop &apos; + (i + 1) + &apos;\nin v4 (&apos; + c1[i].size() + &apos;): &apos; + c11
		FileWithRoutes.append(Str1 + &apos;\n&apos;)
		
		c12 = b2 - b1
		Str1 = &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c12
		FileWithRoutes.append(Str1 + &apos;\n&apos;)
		
		for (j in 0..c11.size() - 1){
			c1[i].remove(c11[j])}
		for (j in 0..c12.size() - 1){
			c2[i].remove(c12[j])}}

FileWithRoutes.append(&apos;\nTypes:\n&apos;)
ExcludingKeys = [&apos;route_destination_id&apos;]
for (k in 0..b - 1){
	//FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos;\n&apos;)
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		if (b1[i] !in ExcludingKeys){
			f1 = (d1.(b1[i].toString())).getClass().toString()
			f1 = f1.reverse()
			f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
			f1 = f1.reverse()
				f2 = (d2.(b2[i].toString())).getClass().toString()
				f2 = f2.reverse()
				f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
				f2 = f2.reverse()
			if (f1 != f2){
				if (j==1){FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos;\n&apos;)}
				FileWithRoutes.append(&apos;\t&apos; + j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2 + &apos;\n&apos;)
				j++}}}}

FileWithRoutes.append(&apos;\nValues:\n&apos;)
ExcludingKeys = [&apos;tracking_number&apos;,&apos;optimization_problem_id&apos;,&apos;route_id&apos;,&apos;channel_name&apos;,&apos;route_destination_id&apos;,&apos;manifest&apos;]
for (k in 0..b - 1){
	//FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos; (&quot;sequence_no&quot;:&apos; + k + &apos;)&apos; + &apos;\n&apos;)
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		if (b1[i].toString() !in ExcludingKeys){
			if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
				if (j==1){FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos; (&quot;sequence_no&quot;:&apos; + k + &apos;)&apos; + &apos;\n&apos;)}
				FileWithRoutes.append(&apos;\t&apos; + j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; v4|v5 &apos; + d2.(b2[i].toString()) + &apos;\n&apos;)
				j++}}}}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Finish" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">println &apos;Finish&apos;</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Comparision3" enabled="false"/>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="File with Routes" enabled="false">
            <stringProp name="filename">${RoutesDir}/RouteIDs.txt</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames">v4RouteID,v5RouteID</stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">false</boolProp>
            <boolProp name="recycle">true</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Few Id" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">vars.put(&apos;OptimizationProblemIDv4&apos;, &quot;65F6EA778DB2D5F1C31BFC552DF3DEA0&quot;)
vars.put(&apos;v4RouteID&apos;, &quot;3A81B0B02B724766C0814E71781BF940&quot;)

vars.put(&apos;OptimizationProblemIDv5&apos;, &quot;6853F5457DDD4EAEB81C6D31AA041A7A&quot;)
vars.put(&apos;v5RouteID&apos;, &quot;8484E89B8B2C4F2CB064C6DBDAE58229&quot;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="String of Request" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">ReguestString = &apos;\
\
&amp;directions=1\
&amp;device_tracking_history=0\
&amp;notes=1\
&amp;order_inventory=false\
&amp;bundling_items=true\
&amp;route_path_output=EncodedList\
&amp;compress_path_points=1\
&apos;

vars.put(&apos;StringOfParameters&apos;, ReguestString)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Empty String of Request" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">ReguestString = &apos;&apos;

vars.put(&apos;StringOfParameters&apos;, ReguestString)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
            <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv4}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Api-Key</stringProp>
                  <stringProp name="Header.value">${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
RespFile = new File(&apos;${OptimizationsDir}/${GETv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="true">
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv5}&amp;wait_for_final_state=1</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
RespFile = new File(&apos;${OptimizationsDir}/${GETv5Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
            <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v4}/${v4Routes}?route_id=${v4RouteID}${StringOfParameters}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Api-Key</stringProp>
                  <stringProp name="Header.value">${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
RespFile = new File(&apos;${RoutesDir}/Routev4-After.json&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="true">
            <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5Legacy}/${v4Routes}?route_id=${v5RouteID}${StringOfParameters}</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
RespFile = new File(&apos;${RoutesDir}/Routev5-After.json&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="keys" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${RoutesDir}/Routev4-After.json&apos;)
FileWithv5 = new File(&apos;${RoutesDir}/Routev5-After.json&apos;)
FileWithRoutes = new File(&apos;${RoutesDir}/RoutesAfter.txt&apos;)
a1 = new JsonSlurper().parse(FileWithv4)
a2 = new JsonSlurper().parse(FileWithv5)

RouteNamev4 = a1.&apos;parameters&apos;.&apos;route_name&apos;
RouteNamev5 = a2.&apos;parameters&apos;.&apos;route_name&apos;
	w1 = (RouteNamev4.length() &gt; RouteNamev5.length()) ? RouteNamev4.length() : RouteNamev5.length()
	w2 = (RouteNamev4 != RouteNamev5) ? RouteNamev5 + &apos;\n&apos; : &apos;&apos;
	Str1 =  RouteNamev4 + &apos;\n&apos; + w2 + &apos;*&apos;.repeat(w1)
	println Str1
	FileWithRoutes.text = Str1 + &apos;\n&apos;

b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2 
Str1 = &apos;Keys:\nin v4 (&apos; + a1.size() + &apos;): &apos; + c1
FileWithRoutes.append(Str1 + &apos;\n&apos;)
c2 = b2 - b1
Str1 = &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2
FileWithRoutes.append(Str1 + &apos;\n&apos;)
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()

FileWithRoutes.append(&apos;\nTypes:\n&apos;)
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		FileWithRoutes.append(j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2 + &apos;\n&apos;)
		j++}}
	
FileWithRoutes.append(&apos;\nValues:\n&apos;)
ExcludingKeys = [&apos;route_id&apos;,&apos;optimization_problem_id&apos;,&apos;route_id&apos;,&apos;channel_name&apos;,&apos;created_timestamp&apos;,&apos;parameters&apos;,&apos;addresses&apos;,&apos;links&apos;,&apos;member_picture&apos;]
j = 1
for (i in 0..a1.size() - 1){		
	if (d1.(b1[i].toString()) != d2.(b2[i].toString())		
	&amp;&amp; (b1[i].toString() !in ExcludingKeys)){
		FileWithRoutes.append(j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n&apos;)
		j++}}
FileWithRoutes.append(&apos;*&apos;.repeat(${__property(ConsoleWidth)}) + &apos;\n&apos;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="parameters" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${RoutesDir}/Routev4-After.json&apos;)
FileWithv5 = new File(&apos;${RoutesDir}/Routev5-After.json&apos;)
FileWithRoutes = new File(&apos;${RoutesDir}/RoutesAfter.txt&apos;)
a1 = new JsonSlurper().parse(FileWithv4).&apos;parameters&apos;
a2 = new JsonSlurper().parse(FileWithv5).&apos;parameters&apos;

b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2 
Str1 = &apos;&quot;parameters&quot;:{}\nKeys:\nin v4 (&apos; + a1.size() + &apos;): &apos; + c1
FileWithRoutes.append(Str1 + &apos;\n&apos;)
c2 = b2 - b1
Str1 = &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2 + &apos;\n&apos;
FileWithRoutes.append(Str1)
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()

FileWithRoutes.append(&apos;\nTypes:\n&apos;)
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		FileWithRoutes.append(j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2 + &apos;\n&apos;)
		j++}}
	
FileWithRoutes.append(&apos;\nValues:\n&apos;)
ExcludingKeys = [&apos;ip&apos;,&apos;override_addresses&apos;,&apos;max_tour_size&apos;]
j = 1
for (i in 0..a1.size() - 1){		
	if (d1.(b1[i].toString()) != d2.(b2[i].toString())		
	&amp;&amp; (b1[i].toString() !in ExcludingKeys)){
		FileWithRoutes.append(j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n&apos;)
		j++}}
FileWithRoutes.append(&apos;*&apos;.repeat(${__property(ConsoleWidth)}) + &apos;\n&apos;)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes.addresses" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${RoutesDir}/Routev4-After.json&apos;)
FileWithv5 = new File(&apos;${RoutesDir}/Routev5-After.json&apos;)
FileWithRoutes = new File(&apos;${RoutesDir}/RoutesAfter.txt&apos;)
a1 = new JsonSlurper().parse(FileWithv4)
a2 = new JsonSlurper().parse(FileWithv5)
	
	a1 = a1.&apos;addresses&apos;
	a2 = a2.&apos;addresses&apos;
	b = a1.size()
	c1 = []
	c2 = []

	for (i in 0..b - 1){
		j1 = a1[i].&apos;sequence_no&apos;
		j2 = a2[i].&apos;sequence_no&apos;
		c1[j1] = a1[i]
		c2[j2] = a2[i]}
	if(!a1.&apos;sequence_no&apos;.contains(0)){
		c1.remove(0)}
	if(!a2.&apos;sequence_no&apos;.contains(0)){
		c2.remove(0)}
FileWithRoutes.append(&apos;&quot;addresses&quot;:[]\nKeys:\n&apos;)
ExcludingKeys = [&apos;geofence_local_visited_timestamp&apos;, &apos;geofence_local_visited_lat&apos;, &apos;geofence_local_visited_lng&apos;, &apos;geofence_local_departed_timestamp&apos;, &apos;geofence_local_departed_lat&apos;, &apos;geofence_local_departed_lng&apos;, &apos;geofence_local_service_time&apos;, &apos;workflow_uuid&apos;, &apos;invalid_sequence&apos;]
	for (i in 0..b - 1){
		b1 = c1[i].keySet()
		b2 = c2[i].keySet()
		c11 = b1 - b2
		keys = new ArrayList(c11)
		Str1 = &apos;&apos;
		for (i1 in 0..keys.size() - 1){
			if (keys[i1] !in ExcludingKeys){
				Str1 = Str1 + keys[i1]
				Str1 = (i1 &lt; keys.size() - 1) ? Str1 + &apos;, &apos; : Str1 + &apos;&apos;}}
		if (Str1 != &apos;&apos;){Str1 = &apos;Stop &apos; + (i + 1) + &apos;\nin v4 (&apos; + c1[i].size() + &apos;): &apos; + Str1 + &apos;\n&apos;}
		c12 = b2 - b1
		if (c12.toString() != &apos;[]&apos;){if (Str1 == &apos;&apos;){Str1 = &apos;Stop &apos; + (i + 1) + &apos;\n&apos;}
			Str1 = Str1 + &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c12
		FileWithRoutes.append(Str1 + &apos;\n&apos;)}		
	for (j in 0..c11.size() - 1){
		c1[i].remove(c11[j])}
	for (j in 0..c12.size() - 1){
		c2[i].remove(c12[j])}}
//Types
FileWithRoutes.append(&apos;\nTypes:\n&apos;)
ExcludingKeys = [&apos;route_destination_id&apos;]
for (k in 0..b - 1){
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		if (b1[i] !in ExcludingKeys){
			f1 = (d1.(b1[i].toString())).getClass().toString()
			f1 = f1.reverse()
			f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
			f1 = f1.reverse()
				f2 = (d2.(b2[i].toString())).getClass().toString()
				f2 = f2.reverse()
				f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
				f2 = f2.reverse()
			if (f1 != f2){
				if (j == 1){FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos;\n&apos;)}
				FileWithRoutes.append(&apos;\t&apos; + j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2 + &apos;\n&apos;)
				j++}}}}
//Values
FileWithRoutes.append(&apos;\nValues:\n&apos;)
ExcludingKeys = [&apos;tracking_number&apos;,&apos;optimization_problem_id&apos;,&apos;route_id&apos;,&apos;channel_name&apos;,&apos;route_destination_id&apos;,&apos;manifest&apos;]
for (k in 0..b - 1){
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		if (b1[i].toString() !in ExcludingKeys){
			if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
				if (j == 1){FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos; (&quot;sequence_no&quot;:&apos; + k + &apos;)&apos; + &apos;\n&apos;)}
				FileWithRoutes.append(&apos;\t&apos; + j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n&apos;)
				j++}}}}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Old routes.addresses" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import groovy.json.*

FileWithv4 = new File(&apos;${RoutesDir}/Routev4-${FileNumber}.json&apos;)
FileWithv5 = new File(&apos;${RoutesDir}/Routev5-${FileNumber}.json&apos;)

FileWithRoutes = new File(&apos;${RoutesDir}/Routes.txt&apos;)

a1 = new JsonSlurper().parse(FileWithv4)
a2 = new JsonSlurper().parse(FileWithv5)
	
	a1 = a1.&apos;addresses&apos;
	a2 = a2.&apos;addresses&apos;
	b = a1.size()
	c1 = []
	c2 = []

	for (i in 0..b - 1){
		j1 = a1[i].&apos;sequence_no&apos;
		j2 = a2[i].&apos;sequence_no&apos;
		c1[j1] = a1[i]
		c2[j2] = a2[i]}
	if(!a1.&apos;sequence_no&apos;.contains(0)){
		c1.remove(0)}
	if(!a2.&apos;sequence_no&apos;.contains(0)){
		c2.remove(0)}
FileWithRoutes.append(&apos;&quot;addresses&quot;:[]\nKeys:\n&apos;)
	for (i in 0..b - 1){
		b1 = c1[i].keySet()
		b2 = c2[i].keySet()
		
		c11 = b1 - b2
		Str1 = &apos;Stop &apos; + (i + 1) + &apos;\nin v4 (&apos; + c1[i].size() + &apos;): &apos; + c11
		FileWithRoutes.append(Str1 + &apos;\n&apos;)
		
		c12 = b2 - b1
		Str1 = &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c12
		FileWithRoutes.append(Str1 + &apos;\n&apos;)
		
		for (j in 0..c11.size() - 1){
			c1[i].remove(c11[j])}
		for (j in 0..c12.size() - 1){
			c2[i].remove(c12[j])}}

FileWithRoutes.append(&apos;\nTypes:\n&apos;)
ExcludingKeys = [&apos;route_destination_id&apos;]
for (k in 0..b - 1){
	//FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos;\n&apos;)
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		if (b1[i] !in ExcludingKeys){
			f1 = (d1.(b1[i].toString())).getClass().toString()
			f1 = f1.reverse()
			f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
			f1 = f1.reverse()
				f2 = (d2.(b2[i].toString())).getClass().toString()
				f2 = f2.reverse()
				f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
				f2 = f2.reverse()
			if (f1 != f2){
				if (j==1){FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos;\n&apos;)}
				FileWithRoutes.append(&apos;\t&apos; + j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2 + &apos;\n&apos;)
				j++}}}}

FileWithRoutes.append(&apos;\nValues:\n&apos;)
ExcludingKeys = [&apos;tracking_number&apos;,&apos;optimization_problem_id&apos;,&apos;route_id&apos;,&apos;channel_name&apos;,&apos;route_destination_id&apos;,&apos;manifest&apos;]
for (k in 0..b - 1){
	//FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos; (&quot;sequence_no&quot;:&apos; + k + &apos;)&apos; + &apos;\n&apos;)
	d1 = c1[k].sort()
	d2 = c2[k].sort()
	b1 = d1.keySet()
	b2 = d2.keySet()
	j = 1
	for (i in 0..d1.size() - 1){
		if (b1[i].toString() !in ExcludingKeys){
			if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
				if (j==1){FileWithRoutes.append(&apos;Stop &apos; + (k + 1) + &apos; (&quot;sequence_no&quot;:&apos; + k + &apos;)&apos; + &apos;\n&apos;)}
				FileWithRoutes.append(&apos;\t&apos; + j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; v4|v5 &apos; + d2.(b2[i].toString()) + &apos;\n&apos;)
				j++}}}}</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Finish" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">println &apos;Finish&apos;</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Route Settings" enabled="false"/>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="General/Route Name" enabled="false">
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5APIPath}/routes-v2/0CBF3E7432859812A23DD977BC76E1E3/settings</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;route_name&quot;:&quot;001 JWVW70E0AUYMPH0GOY8OU3WWQTSRNBG1&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${OptimizationsDir}/${PUTv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="General/User" enabled="false">
            <stringProp name="TestPlan.comments">1276969/1371791</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5APIPath}/routes-v2/0CBF3E7432859812A23DD977BC76E1E3/settings</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;driver&quot;:1371791&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${OptimizationsDir}/${PUTv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="General/Vehicle" enabled="false">
            <stringProp name="TestPlan.comments">E745D0D67858B6EB61C39C4EECE14B8D/56926CADCA1141C742BF80EDF7AA1000</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5APIPath}/routes-v2/0CBF3E7432859812A23DD977BC76E1E3/settings</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;vehicle&quot;:&quot;56926CADCA1141C742BF80EDF7AA1000&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${OptimizationsDir}/${PUTv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Schedule/Route Start Date" enabled="false">
            <stringProp name="TestPlan.comments">E745D0D67858B6EB61C39C4EECE14B8D/56926CADCA1141C742BF80EDF7AA1000</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5APIPath}/routes-v2/0CBF3E7432859812A23DD977BC76E1E3/settings</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;route_start_date&quot;:&quot;${RouteStrtDate}&quot;&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${OptimizationsDir}/${PUTv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

NumberOfStops = 3
RT = &apos;true&apos;
AlgorithmType = 1

b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;address&quot;:&quot;&apos; + RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},&apos;

for (i in 1..NumberOfStops){
	a = &apos;{&quot;alias&quot;:&quot;&apos; +	RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;address&quot;:&quot;&apos; +	RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
	b = (i == NumberOfStops) ? b + a : b + a + &apos;,&apos;}

Str1 = &apos;{&quot;parameters&quot;:{&quot;route_name&quot;:&quot;&apos; + RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;route_date&quot;:&quot;&apos; + (new Date().getTime() + 86400000).toString()[0..9] + &apos;&quot;,&quot;rt&quot;:&apos; + RT + &apos;,&quot;algorithm_type&quot;:&apos; + AlgorithmType + &apos;},&quot;addresses&quot;:[&apos; + b + &apos;]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(Str1))).toString()

vars.put(&apos;RequestBody&apos;, e)

(new File(&apos;${OptimizationsDir}/${Payload}&apos;)).text = e</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang.RandomStringUtils

a = new Random().ints(1,32).findFirst().getAsInt()
RandomeDate = ((new Date() + a ).getTime()).toString()[0..9]
vars.put(&apos;RouteStrtDate&apos;, RandomeDate.toString())</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Schedule/Route Start Time" enabled="true">
            <stringProp name="TestPlan.comments">E745D0D67858B6EB61C39C4EECE14B8D/56926CADCA1141C742BF80EDF7AA1000</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5APIPath}/routes-v2/0CBF3E7432859812A23DD977BC76E1E3/settings</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;route_start_time&quot;:${RouteStartTime}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${OptimizationsDir}/${PUTv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

NumberOfStops = 3
RT = &apos;true&apos;
AlgorithmType = 1

b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;address&quot;:&quot;&apos; + RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},&apos;

for (i in 1..NumberOfStops){
	a = &apos;{&quot;alias&quot;:&quot;&apos; +	RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;address&quot;:&quot;&apos; +	RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
	b = (i == NumberOfStops) ? b + a : b + a + &apos;,&apos;}

Str1 = &apos;{&quot;parameters&quot;:{&quot;route_name&quot;:&quot;&apos; + RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;route_date&quot;:&quot;&apos; + (new Date().getTime() + 86400000).toString()[0..9] + &apos;&quot;,&quot;rt&quot;:&apos; + RT + &apos;,&quot;algorithm_type&quot;:&apos; + AlgorithmType + &apos;},&quot;addresses&quot;:[&apos; + b + &apos;]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(Str1))).toString()

vars.put(&apos;RequestBody&apos;, e)

(new File(&apos;${OptimizationsDir}/${Payload}&apos;)).text = e</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang.RandomStringUtils

a = new Random().ints(0,86400).findFirst().getAsInt()
//RandomeTime = ((new Date() + a ).getTime()).toString()[0..9]
vars.put(&apos;RouteStartTime&apos;, a.toString())</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Schedule/Service Time per Destination" enabled="true">
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5APIPath}/routes-v2/0CBF3E7432859812A23DD977BC76E1E3/settings</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">{&#xd;
	&quot;service_time&quot;:${ServiceTime}&#xd;
}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${OptimizationsDir}/${PUTv4Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import groovy.json.*
import org.apache.commons.lang.RandomStringUtils

NumberOfStops = 3
RT = &apos;true&apos;
AlgorithmType = 1

b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;address&quot;:&quot;&apos; + RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},&apos;

for (i in 1..NumberOfStops){
	a = &apos;{&quot;alias&quot;:&quot;&apos; +	RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;address&quot;:&quot;&apos; +	RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
	b = (i == NumberOfStops) ? b + a : b + a + &apos;,&apos;}

Str1 = &apos;{&quot;parameters&quot;:{&quot;route_name&quot;:&quot;&apos; + RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray()) + &apos;&quot;,&quot;route_date&quot;:&quot;&apos; + (new Date().getTime() + 86400000).toString()[0..9] + &apos;&quot;,&quot;rt&quot;:&apos; + RT + &apos;,&quot;algorithm_type&quot;:&apos; + AlgorithmType + &apos;},&quot;addresses&quot;:[&apos; + b + &apos;]}&apos;

e = JsonOutput.prettyPrint(new JsonSlurper().parseText(JsonOutput.toJson(Str1))).toString()

vars.put(&apos;RequestBody&apos;, e)

(new File(&apos;${OptimizationsDir}/${Payload}&apos;)).text = e</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">import org.apache.commons.lang.RandomStringUtils

a = new Random().ints(1,86400).findFirst().getAsInt()
//RandomeTime = ((new Date() + a ).getTime()).toString()[0..9]
vars.put(&apos;ServiceTime&apos;, a.toString())</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="false">
            <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv4}&amp;wait_for_final_state=1</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Api-Key</stringProp>
                  <stringProp name="Header.value">${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${OptimizationsDir}/${GETv4ResponsePUT}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="PUT v5" enabled="false">
            <stringProp name="TestPlan.comments">?redirect=0</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv5}&amp;reoptimize=1&amp;redirect=0</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">PUT</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RequestBodyForPUT}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${OptimizationsDir}/${PUTv5Response}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()

FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
s1 = prev.getResponseHeaders()
s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
FileWithX.append(&apos;PUTv5Legacy &apos; +  s2)</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="false">
            <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv5}&amp;wait_for_final_state=1</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response to File" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())

RespFile = new File(&apos;${OptimizationsDir}/${GETv5ResponsePUT}&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()
	
FileWithX = new File(&apos;${OptimizationsDir}/${FileWithx-request-id}&apos;)
s1 = prev.getResponseHeaders()
s1 = s1.substring(s1.indexOf(&apos;x-request-id&apos;),s1.length())
s2 = &apos;x-request-id: &apos; + s1[s1.indexOf(&apos; &apos;) + 1..s1.indexOf(&apos;\n&apos;)]
FileWithX.append(&apos;GETv5LegacyPUT &apos; +  s2)</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Drafts" enabled="false"/>
        <hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="exs" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import org.skyscreamer.jsonassert.JSONCompareMode
import org.skyscreamer.jsonassert.JSONAssert
//import com.fasterxml.jackson.databind.JsonNode
import groovy.json.*

FileWithv4 = new File(&apos;${RoutesDir}/Routev4-1.json&apos;)
FileWithv5 = new File(&apos;${RoutesDir}/Routev5-1.json&apos;)
json1 = new JsonSlurper().parse(FileWithv4)
json2 = new JsonSlurper().parse(FileWithv5)
//json1 = &apos;{&quot;a&quot;:1,&quot;b&quot;:8}&apos;
//json2 = &apos;{&quot;a&quot;:1,&quot;b&quot;:2}&apos;

JSONAssert.assertEquals(json1, json2, JSONCompareMode.STRICT)

/*ObjectMapper mapper = new ObjectMapper();

JsonNode tree1 = mapper.readTree(jsonInput1);
JsonNode tree2 = mapper.readTree(jsonInput2);

areTheyEqual = tree1.equals(tree2);
println areTheyEqual*/

</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="exs" enabled="true">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import groovy.json.*
import org.skyscreamer.jsonassert.*
import org.json.*

FileWithv4 = new File(&apos;${RoutesDir}/Routev4-1.json&apos;)
FileWithv5 = new File(&apos;${RoutesDir}/Routev5-1.json&apos;)

b1 = JsonOutput.toJson(new JsonSlurper().parse(FileWithv4))
b2 = JsonOutput.toJson(new JsonSlurper().parse(FileWithv5))

println JSONAssert.assertEquals(b1, b2, JSONCompareMode.STRICT)</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Log" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="JLabel" enabled="false">
              <stringProp name="BeanShellSampler.query">import javax.swing.border.*;
JFrame F = new JFrame();
F.setLayout(null);
F.setBounds(10,10,600,600);
	JPanel Panel=new JPanel();  
	Panel.setLayout(null);
	Panel.setBounds(10,10,500,500);    
		JLabel L=new JLabel(&quot;r&quot;,SwingConstants.CENTER);
		L.setBounds(5,5,250,72);
		L.setForeground(Color.magenta);
		L.setBackground(Color.green);L.setOpaque(true);
		L.setFont(new Font(&quot;Tahoma&quot;, Font.BOLD, 30));
		Border border = BorderFactory.createLineBorder(Color.BLUE, 2);
		L.setBorder(border);
			JLabel L2=new JLabel();
			L2.setBounds(100,267,198,120);
	Panel.add(L);Panel.add(L2);
	F.add(Panel);	
F.setVisible(true);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Frame3" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.swing.*

myapp = new SwingBuilder()
myframe = myapp.frame(title : &apos;Tutorials Point&apos;, location : [200, 200], 
   size : [400, 300])
   {         
      label(text : &apos;a&apos;)
   } 

myframe.setVisible(true)</stringProp>
              <stringProp name="TestPlan.comments">, defaultCloseOperation : WindowConstants.EXIT_ON_CLOSE</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//String h=prev.getResponseHeaders();
//String b=prev.getResponseDataAsString();
//String r=prev.getRequestHeaders();//Заголовок запроса
//String r=prev.getResponseCode();
//String r=prev.getSampleLabel();
String r=prev.getResponseMessage();
//r=prev.getSamplerData();//Request body
println(r);</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Frame3" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">
println &apos;www&apos;</stringProp>
              <stringProp name="TestPlan.comments">, defaultCloseOperation : WindowConstants.EXIT_ON_CLOSE</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.swing.*
import groovy.json.*

FileWithv4 = new File(&apos;${TestDir}/${GETv4Response}&apos;)
ao1 = new JsonSlurper().parse(FileWithv4).&apos;routes&apos;.&apos;route_id&apos;
//str = FileWithv4.text

a = new SwingBuilder()
Frame1 = a.frame(title: &apos;addresses&apos;, location: [0, 600], size: [1600, 200], visible: true)
	{label(text: ao1)} 

//Frame1.setVisible(true)
//Frame1.pack()
Frame1.show()</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="MessageDialog" enabled="false">
              <stringProp name="BeanShellSampler.query">//import javax.swing.*;

ImageIcon icon = new ImageIcon(&quot;d:/test/yt.png&quot;);
JOptionPane.showMessageDialog
(
null,
&quot;message text&quot;,
&quot;title&quot;,
JOptionPane.
ERROR_MESSAGE
//INFORMATION_MESSAGE
//WARNING_MESSAGE
//QUESTION_MESSAGE
//PLAIN_MESSAGE
,null	
//icon for custom icon(JOptionPane must be set PLAIN_MESSAGE), null do not use a custom icon
);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Frame3" enabled="false">
              <stringProp name="BeanShellSampler.query">import java.util.concurrent.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;

JFrame jFrame = new JFrame();
JDialog jd = new JDialog(jFrame);
jd.setLayout(new FlowLayout());
jd.setBounds(10, 100, 600, 400);//positionX,positionY,width, height
jd.setIconImage(new ImageIcon(&quot;d:/test/i2.png&quot;).getImage());
jd.setTitle(&quot;TEST NAME&quot;);
jd.getContentPane().setBackground(Color.red);
jd.setVisible(true);//jd.setVisible(false);

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="In JLabel" enabled="false">
              <stringProp name="BeanShellSampler.query">JFrame f = new JFrame();
f.add(new JLabel(new ImageIcon(&quot;D:/g1.png&quot;)));
f.setBounds(10,10,100,100);
f.setVisible(true);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JLabel" enabled="false">
              <stringProp name="scriptLanguage">beanshell</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

JFrame jFrame = new JFrame();
JDialog jd = new JDialog(jFrame);
jd.setLayout(new FlowLayout());

jd.setBounds(500, 300, 300, 100);//positionX,positionY,width, height
jd.setIconImage(new ImageIcon(&quot;d:/g1.png&quot;).getImage());

JLabel jLabel = new JLabel(&quot;Press button to close the window&quot;);
JButton jButton = new JButton(&quot;Закрыть&quot;);
JButton jButton2 = new JButton(&quot;Закрыть&quot;);
jButton2.addActionListener(new ActionListener(){actionPerformed(ActionEvent e){jd.setVisible(false);}});
jd.add(jLabel);
//jd.add(jButton);
jd.add(jButton2);
jd.setVisible(true);</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//String h=prev.getResponseHeaders();
//String b=prev.getResponseDataAsString();
//String r=prev.getRequestHeaders();//Заголовок запроса
//String r=prev.getResponseCode();
//String r=prev.getSampleLabel();
String r=prev.getResponseMessage();
//r=prev.getSamplerData();//Request body
println(r);</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="log" enabled="false">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

JFrame jFrame = new JFrame();
JDialog jd = new JDialog(jFrame);
jd.setLayout(new FlowLayout());

jd.setBounds(500, 300, 300, 100);//positionX,positionY,width, height
jd.setIconImage(new ImageIcon(&quot;d:/test/i2.png&quot;).getImage());

JLabel jLabel = new JLabel(&quot;Press button to close the window&quot;);
JButton jButton = new JButton(&quot;Закрыть&quot;);
JButton jButton2 = new JButton(&quot;Закрыть&quot;);
jButton2.addActionListener(new ActionListener(){actionPerformed(ActionEvent e){jd.setVisible(false);}});
jd.add(jLabel);
//jd.add(jButton);
jd.add(jButton2);
jd.setVisible(true);</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//String h=prev.getResponseHeaders();
//String b=prev.getResponseDataAsString();
//String r=prev.getRequestHeaders();//Заголовок запроса
//String r=prev.getResponseCode();
//String r=prev.getSampleLabel();
String r=prev.getResponseMessage();
//r=prev.getSamplerData();//Request body
println(r);</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Custom style" enabled="false">
              <stringProp name="TestPlan.comments">No pause after popup </stringProp>
              <stringProp name="BeanShellSampler.query">import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

JFrame jFrame = new JFrame();
JDialog jd = new JDialog(jFrame);
jd.setLayout(new FlowLayout());

jd.setBounds(500, 300, 300, 100);//positionX,positionY,width, height
jd.setIconImage(new ImageIcon(&quot;d:/test/i2.png&quot;).getImage());

JLabel jLabel = new JLabel(&quot;Press button to close the window&quot;);
JButton jButton = new JButton(&quot;Закрыть&quot;);
JButton jButton2 = new JButton(&quot;Закрыть&quot;);
jButton2.addActionListener(new ActionListener(){actionPerformed(ActionEvent e){jd.setVisible(false);}});
jd.add(jLabel);
//jd.add(jButton);
jd.add(jButton2);
jd.setVisible(true);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="dialog" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import picocli.CommandLine
import static picocli.CommandLine.*

import java.security.MessageDigest
import java.util.concurrent.Callable
/*for (i in 0..4){
	
println &apos;)&apos;
/*
username = System.console().readLine &apos;What is your name?&apos;}
def readln = javax.swing.JOptionPane.&amp;showInputDialog
def username = readln &apos;What is your name?&apos;
println &quot;Hello $username.&quot;*/
//ProcessBuilder pb = new ProcessBuilder(&quot;cmd.exe&quot;, &quot;/c&quot;, &quot;mode con&quot;)

//CommandSpec spec = myCommandLine.getCommandSpec();
//spec.usageMessage().autoWidth(true); // use terminal width
//int width = spec.usageMessage().width(); 
TerminalFactory.get().getWidth();
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="dialog" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">r = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(&quot;cmd /c mode&quot;).getInputStream())).lines().toList()

a = r[4].reverse()
a = a[0..(a.indexOf(&apos; &apos;) - 1)].reverse()
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="dialog" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">println &apos;*&apos;.repeat(&apos;${__property(ConsoleWidth)}&apos;.toInteger())
println &apos;*&apos;.repeat(158)

def readln = javax.swing.JOptionPane.&amp;showInputDialog
def username = readln &apos;What is your name?&apos;
println &quot;Hello $username.&quot;</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="dialog" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script"></stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Old Single" enabled="false"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;routes&apos;

a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;routes&apos;[0]
a2 = new JsonSlurper().parse(prev.getResponseData()).&apos;routes&apos;[0]

b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2; println &apos;in v4 (&apos; + a1.size() + &apos;): &apos; + c1
c2 = b2 - b1; println &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2 + &apos;\n***&apos;
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()

println &apos;\nkeys&apos;
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
		
println &apos;\nvalues&apos;
j = 1
for (i in 0..a1.size() - 1){
	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n*****\n&apos;
		j++}}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes.addresses" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;routes.addresses&apos;

a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;routes&apos;[0].&apos;addresses&apos;
a2 = new JsonSlurper().parse(prev.getResponseData()).&apos;routes&apos;[0].&apos;addresses&apos;
b = a1.size()
c1 = []
c2 = []

for (i in 0..b - 1){
	j1 = a1[i].&apos;sequence_no&apos;
	j2 = a2[i].&apos;sequence_no&apos;
	c1[j1] = a1[i]
	c2[j2] = a2[i]}
	
for (i in 0..b - 1){
b1 = c1[i].keySet()
b2 = c2[i].keySet()
c11 = b1 - b2; println &apos;in v4 (&apos; + c1[i].size() + &apos;): &apos; + c11
c22 = b2 - b1; println &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c22 + &apos;\n***&apos;
for (j in 0..c11.size() - 1){c1[i].remove(c11[j])}
for (j in 0..c22.size() - 1){c2[i].remove(c22[j])}}

println &apos;\nkeys&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
	println &apos;*&apos;}

println &apos;\nvalues&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){

	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString())
		j++}}
	println &apos;*&apos;}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes.parameters" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;routes.parameters&apos;

a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;routes&apos;[0].&apos;parameters&apos;
a2 = new JsonSlurper().parse(prev.getResponseData()).&apos;routes&apos;[0].&apos;parameters&apos;

b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2; println &apos;in v4 (&apos; + a1.size() + &apos;): &apos; + c1
c2 = b2 - b1; println &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2 + &apos;\n***&apos;
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()

println &apos;\nkeys&apos;
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
		
println &apos;\nvalues&apos;
j = 1
for (i in 0..a1.size() - 1){
	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n*****\n&apos;
		j++}}</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Drafts Multi" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="addresses" enabled="false"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="1" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;addresses&apos;
b1 = a1.&apos;route_id&apos;.unique(); Depot = a1[0]

c1 = []
for (i in 1..b1.size() - 1){
	c11 = []
	k = 0
	for (j in 0..a1.size() - 1){
		if (b1[i] == a1[j].&apos;route_id&apos;){
			c11[k] = a1[j]
			k++}}
	c1[i - 1] = c11}

d1 = []
println &apos;v4 Routes:&apos;
for (i in 0..c1.size() - 1){
	d11 = []	
	for (j in 0..c1[i].size() - 1){
		k1 = c1[i][j].&apos;sequence_no&apos;
		d11[k1] = c1[i][j]}
	d11[0] = Depot
	d1[i] = d11
	println d1[i].size()}
println &apos;*&apos;

b = JsonOutput.prettyPrint(JsonOutput.toJson(d1))
FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.json&apos;)
if (FileWithAddressesv4.exists()){FileWithAddressesv4.delete()}
FileWithAddressesv4.append(b)

a1 = new JsonSlurper().parse(prev.getResponseData()).&apos;addresses&apos;
b1 = a1.&apos;route_id&apos;.unique()

c1 = []
for (i in 0..b1.size() - 1){
	c11 = []
	k = 0
	for (j in 0..a1.size() - 1){
		if (b1[i] == a1[j].&apos;route_id&apos;){
			c11[k] = a1[j]
			k++}}
	c1[i] = c11}

d1 = []
println &apos;v5Legacy Routes:&apos;
for (i in 0..c1.size() - 1){
	d11 = []	
	for (j in 0..c1[i].size() - 1){
		k1 = c1[i][j].&apos;sequence_no&apos;
		d11[k1] = c1[i][j]}
	d1[i] = d11;println d1[i].size()}

b = JsonOutput.prettyPrint(JsonOutput.toJson(d1))
FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.json&apos;)
if (FileWithAddressesv5.exists()){FileWithAddressesv5.delete()}
FileWithAddressesv5.append(b)</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="2" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
println &apos;addresses&apos;

FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.json&apos;)
FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.json&apos;)
a1 = new JsonSlurper().parse(FileWithAddressesv4)[0]
a2 = new JsonSlurper().parse(FileWithAddressesv5)[4]

b = a2.size()
c1 = []
c2 = []

for (i in 0..b - 1){
	j1 = a1[i].&apos;sequence_no&apos;
	j2 = a2[i].&apos;sequence_no&apos;
	c1[j1] = a1[i]
	c2[j2] = a2[i]}
	
for (i in 0..b - 1){
b1 = c1[i].keySet()
b2 = c2[i].keySet()
c11 = b1 - b2; println &apos;in v4 (&apos; + c1[i].size() + &apos;): &apos; + c11
c22 = b2 - b1; println &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c22 + &apos;\n***&apos;
for (j in 0..c11.size() - 1){c1[i].remove(c11[j])}
for (j in 0..c22.size() - 1){c2[i].remove(c22[j])}}

println &apos;\nkeys&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
	println &apos;*&apos;}

println &apos;\nvalues&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){

	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString())
		j++}}
	println &apos;*&apos;}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="-2" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
println &apos;addresses&apos;

FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.json&apos;)
FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.json&apos;)

a1 = new JsonSlurper().parse(FileWithAddressesv4)[0]
a2 = new JsonSlurper().parse(FileWithAddressesv5)[4]
println a2.&apos;route_id&apos;.unique()/*
println &apos;sequence_no, v4 | v5Legacy&apos;
println &apos;0,&apos; + a1[0].&apos;alias&apos;
for (i in 1..a1.size() - 1){
println i + &apos;,&apos; + a1[i].&apos;alias&apos; + &apos; | &apos; + a2[i].&apos;alias&apos;}
*/</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="3" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

File1 = new File(&apos;${TestDir}/v4Addresses1.txt&apos;)
if (File1.exists()){File1.delete()}
a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;addresses&apos;
k = 0
s = &apos;&apos;
for (i in 0..a1.size() - 1){
	if (a1[i].&apos;route_id&apos; == &apos;F16BB56FE7E78336A6F6B32135B4C3FC&apos;){
		s = s + a1[i].&apos;sequence_no&apos;.toString() + &apos;,&apos; + a1[i].&apos;alias&apos; + &apos;\n&apos;
	k++}}
File1.append(s)



File2 = new File(&apos;${TestDir}/v5Addresses1.txt&apos;)
if (File2.exists()){File2.delete()}
a2 = new JsonSlurper().parse(prev.getResponseData()).&apos;addresses&apos;
k = 0
s = &apos;&apos;
for (i in 0..a2.size() - 1){
	if (a2[i].&apos;route_id&apos; == &apos;E21B0355445F444A978C361FCAEBB0BC&apos;){
		s = s + a2[i].&apos;sequence_no&apos;.toString() + &apos;,&apos; + a2[i].&apos;alias&apos; + &apos;\n&apos;
	k++}}
File2.append(s)</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="-addresses" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.txt&apos;)
if (FileWithAddressesv4.exists()){FileWithAddressesv4.delete()}
a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;addresses&apos;
for (i in 0..a1.size() - 1){
FileWithAddressesv4.append(a1[i] + &apos;\n&apos;)
//println a1[i].&apos;sequence_no&apos; + &apos;,&apos; + a1[i].&apos;alias&apos;
}

FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.txt&apos;)
if (FileWithAddressesv5.exists()){FileWithAddressesv5.delete()}
a1 = new JsonSlurper().parse(prev.getResponseData()).&apos;addresses&apos;
for (i in 0..a1.size() - 1){
FileWithAddressesv5.append(a1[i] + &apos;\n&apos;)
println a1[i].&apos;sequence_no&apos; + &apos;,&apos; + a1[i].&apos;alias&apos;
}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="!addresses" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;addresses&apos;
b1 = a1.&apos;route_id&apos;.unique(); Depot = a1[0]

c1 = []
for (i in 1..b1.size() - 1){
	c11 = []
	k = 0
	for (j in 0..a1.size() - 1){
		if (b1[i] == a1[j].&apos;route_id&apos;){
			c11[k] = a1[j]
			k++}}
	c1[i - 1] = c11}

d1 = []
for (i in 0..c1.size() - 1){
	d11 = []	
	for (j in 0..c1[i].size() - 1){
		k1 = c1[i][j].&apos;sequence_no&apos;
		d11[k1] = c1[i][j]}	//*************************k1-1
	d11[0] = Depot;d1[i] = d11;println d1[i].size()}
//
//b = JsonOutput.toJson(d1)
b = JsonOutput.prettyPrint(JsonOutput.toJson(d1))
FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.json&apos;)
if (FileWithAddressesv4.exists()){FileWithAddressesv4.delete()}
FileWithAddressesv4.append(b)
/*
a1 = new JsonSlurper().parse(FileWithAddressesv4)
println a1[0][0]*/</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="!!addresses" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a1 = new JsonSlurper().parse(prev.getResponseData()).&apos;addresses&apos;
b1 = a1.&apos;route_id&apos;.unique()

c1 = []
for (i in 0..b1.size() - 1){
	c11 = []
	k = 0
	for (j in 0..a1.size() - 1){
		if (b1[i] == a1[j].&apos;route_id&apos;){
			c11[k] = a1[j]
			k++}}
	c1[i] = c11}

d1 = []
for (i in 0..c1.size() - 1){
	d11 = []	
	for (j in 0..c1[i].size() - 1){
		k1 = c1[i][j].&apos;sequence_no&apos;
		d11[k1] = c1[i][j]}
	d1[i] = d11;println d1[i].size()}
//
b = JsonOutput.toJson(d1)
FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.txt&apos;)
if (FileWithAddressesv5.exists()){FileWithAddressesv5.delete()}
FileWithAddressesv5.append(b)
/*
a1 = new JsonSlurper().parse(FileWithAddressesv5)
println a1[0][0]*/</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes.addresses" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

ao1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;routes&apos;
a2 = new JsonSlurper().parse(prev.getResponseData()).&apos;routes&apos;

c22 = []
for (i in 0..ao1.size() - 1){
	b1 = ao1[i].&apos;addresses&apos;.&apos;alias&apos;.sort()
	for (j in 0..a2.size() - 1){
		b2 = a2[j].&apos;addresses&apos;.&apos;alias&apos;.sort()
		if (b1 == b2){c22[i] = a2[j]; a2.remove(a2[j]);break}}}
for (r in 0..ao1.size() - 1){
a1 = ao1[r].&apos;addresses&apos;
a2 = c22[r].&apos;addresses&apos;
//
b = a1.size()
c1 = []
c2 = []

for (i in 0..b - 1){
	j1 = a1[i].&apos;sequence_no&apos;
	j2 = a2[i].&apos;sequence_no&apos;
	c1[j1] = a1[i]
	c2[j2] = a2[i]}
	
for (i in 0..b - 1){
b1 = c1[i].keySet()
b2 = c2[i].keySet()
c11 = b1 - b2; println &apos;in v4 (&apos; + c1[i].size() + &apos;): &apos; + c11
c22 = b2 - b1; println &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c22 + &apos;\n***&apos;
for (j in 0..c11.size() - 1){c1[i].remove(c11[j])}
for (j in 0..c22.size() - 1){c2[i].remove(c22[j])}}

println &apos;\nkeys&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
	println &apos;*&apos;}

println &apos;\nvalues&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){

	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString())
		j++}}
	println &apos;*&apos;}
}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="1-routes" enabled="false"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="1" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;addresses&apos;
b1 = a1.&apos;route_id&apos;.unique(); Depot = a1[0]

c1 = []
for (i in 1..b1.size() - 1){
	c11 = []
	k = 0
	for (j in 0..a1.size() - 1){
		if (b1[i] == a1[j].&apos;route_id&apos;){
			c11[k] = a1[j]
			k++}}
	c1[i - 1] = c11}

d1 = []
println &apos;v4 Routes:&apos;
for (i in 0..c1.size() - 1){
	d11 = []	
	for (j in 0..c1[i].size() - 1){
		k1 = c1[i][j].&apos;sequence_no&apos;
		d11[k1] = c1[i][j]}
	d11[0] = Depot
	d1[i] = d11
	println d1[i].size()}
println &apos;*&apos;

b = JsonOutput.prettyPrint(JsonOutput.toJson(d1))
FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.json&apos;)
if (FileWithAddressesv4.exists()){FileWithAddressesv4.delete()}
FileWithAddressesv4.append(b)

a1 = new JsonSlurper().parse(prev.getResponseData()).&apos;addresses&apos;
b1 = a1.&apos;route_id&apos;.unique()

c1 = []
for (i in 0..b1.size() - 1){
	c11 = []
	k = 0
	for (j in 0..a1.size() - 1){
		if (b1[i] == a1[j].&apos;route_id&apos;){
			c11[k] = a1[j]
			k++}}
	c1[i] = c11}

d1 = []
println &apos;v5Legacy Routes:&apos;
for (i in 0..c1.size() - 1){
	d11 = []	
	for (j in 0..c1[i].size() - 1){
		k1 = c1[i][j].&apos;sequence_no&apos;
		d11[k1] = c1[i][j]}
	d1[i] = d11;println d1[i].size()}

b = JsonOutput.prettyPrint(JsonOutput.toJson(d1))
FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.json&apos;)
if (FileWithAddressesv5.exists()){FileWithAddressesv5.delete()}
FileWithAddressesv5.append(b)</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="2" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
println &apos;addresses&apos;

FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.json&apos;)
FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.json&apos;)
a1 = new JsonSlurper().parse(FileWithAddressesv4)[0]
a2 = new JsonSlurper().parse(FileWithAddressesv5)[4]

b = a2.size()
c1 = []
c2 = []

for (i in 0..b - 1){
	j1 = a1[i].&apos;sequence_no&apos;
	j2 = a2[i].&apos;sequence_no&apos;
	c1[j1] = a1[i]
	c2[j2] = a2[i]}
	
for (i in 0..b - 1){
b1 = c1[i].keySet()
b2 = c2[i].keySet()
c11 = b1 - b2; println &apos;in v4 (&apos; + c1[i].size() + &apos;): &apos; + c11
c22 = b2 - b1; println &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c22 + &apos;\n***&apos;
for (j in 0..c11.size() - 1){c1[i].remove(c11[j])}
for (j in 0..c22.size() - 1){c2[i].remove(c22[j])}}

println &apos;\nkeys&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
	println &apos;*&apos;}

println &apos;\nvalues&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){

	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString())
		j++}}
	println &apos;*&apos;}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="-2" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
println &apos;addresses&apos;

FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.json&apos;)
FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.json&apos;)

a1 = new JsonSlurper().parse(FileWithAddressesv4)[0]
a2 = new JsonSlurper().parse(FileWithAddressesv5)[4]
println a2.&apos;route_id&apos;.unique()/*
println &apos;sequence_no, v4 | v5Legacy&apos;
println &apos;0,&apos; + a1[0].&apos;alias&apos;
for (i in 1..a1.size() - 1){
println i + &apos;,&apos; + a1[i].&apos;alias&apos; + &apos; | &apos; + a2[i].&apos;alias&apos;}
*/</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="3" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

File1 = new File(&apos;${TestDir}/v4Addresses1.txt&apos;)
if (File1.exists()){File1.delete()}
a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;addresses&apos;
k = 0
s = &apos;&apos;
for (i in 0..a1.size() - 1){
	if (a1[i].&apos;route_id&apos; == &apos;F16BB56FE7E78336A6F6B32135B4C3FC&apos;){
		s = s + a1[i].&apos;sequence_no&apos;.toString() + &apos;,&apos; + a1[i].&apos;alias&apos; + &apos;\n&apos;
	k++}}
File1.append(s)



File2 = new File(&apos;${TestDir}/v5Addresses1.txt&apos;)
if (File2.exists()){File2.delete()}
a2 = new JsonSlurper().parse(prev.getResponseData()).&apos;addresses&apos;
k = 0
s = &apos;&apos;
for (i in 0..a2.size() - 1){
	if (a2[i].&apos;route_id&apos; == &apos;E21B0355445F444A978C361FCAEBB0BC&apos;){
		s = s + a2[i].&apos;sequence_no&apos;.toString() + &apos;,&apos; + a2[i].&apos;alias&apos; + &apos;\n&apos;
	k++}}
File2.append(s)</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="-addresses" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.txt&apos;)
if (FileWithAddressesv4.exists()){FileWithAddressesv4.delete()}
a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;addresses&apos;
for (i in 0..a1.size() - 1){
FileWithAddressesv4.append(a1[i] + &apos;\n&apos;)
//println a1[i].&apos;sequence_no&apos; + &apos;,&apos; + a1[i].&apos;alias&apos;
}

FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.txt&apos;)
if (FileWithAddressesv5.exists()){FileWithAddressesv5.delete()}
a1 = new JsonSlurper().parse(prev.getResponseData()).&apos;addresses&apos;
for (i in 0..a1.size() - 1){
FileWithAddressesv5.append(a1[i] + &apos;\n&apos;)
println a1[i].&apos;sequence_no&apos; + &apos;,&apos; + a1[i].&apos;alias&apos;
}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="!addresses" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;addresses&apos;
b1 = a1.&apos;route_id&apos;.unique(); Depot = a1[0]

c1 = []
for (i in 1..b1.size() - 1){
	c11 = []
	k = 0
	for (j in 0..a1.size() - 1){
		if (b1[i] == a1[j].&apos;route_id&apos;){
			c11[k] = a1[j]
			k++}}
	c1[i - 1] = c11}

d1 = []
for (i in 0..c1.size() - 1){
	d11 = []	
	for (j in 0..c1[i].size() - 1){
		k1 = c1[i][j].&apos;sequence_no&apos;
		d11[k1] = c1[i][j]}	//*************************k1-1
	d11[0] = Depot;d1[i] = d11;println d1[i].size()}
//
//b = JsonOutput.toJson(d1)
b = JsonOutput.prettyPrint(JsonOutput.toJson(d1))
FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.json&apos;)
if (FileWithAddressesv4.exists()){FileWithAddressesv4.delete()}
FileWithAddressesv4.append(b)
/*
a1 = new JsonSlurper().parse(FileWithAddressesv4)
println a1[0][0]*/</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="!!addresses" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a1 = new JsonSlurper().parse(prev.getResponseData()).&apos;addresses&apos;
b1 = a1.&apos;route_id&apos;.unique()

c1 = []
for (i in 0..b1.size() - 1){
	c11 = []
	k = 0
	for (j in 0..a1.size() - 1){
		if (b1[i] == a1[j].&apos;route_id&apos;){
			c11[k] = a1[j]
			k++}}
	c1[i] = c11}

d1 = []
for (i in 0..c1.size() - 1){
	d11 = []	
	for (j in 0..c1[i].size() - 1){
		k1 = c1[i][j].&apos;sequence_no&apos;
		d11[k1] = c1[i][j]}
	d1[i] = d11;println d1[i].size()}
//
b = JsonOutput.toJson(d1)
FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.txt&apos;)
if (FileWithAddressesv5.exists()){FileWithAddressesv5.delete()}
FileWithAddressesv5.append(b)
/*
a1 = new JsonSlurper().parse(FileWithAddressesv5)
println a1[0][0]*/</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//String h=prev.getResponseHeaders();
//String b=prev.getResponseDataAsString();
//String r=prev.getRequestHeaders();//Заголовок запроса
//String r=prev.getResponseCode();
//String r=prev.getSampleLabel();
String r=prev.getResponseMessage();
//r=prev.getSamplerData();//Request body
println(r);</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv5Legacy" enabled="false">
            <stringProp name="TestPlan.comments">?redirect=0</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5Legacy}/services/ui/modules/features</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv5&apos;, b)

FileWithIDs = new File(&apos;${TestDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.append(b)</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4 Features" enabled="false">
            <stringProp name="TestPlan.comments">https://routeml.com/services/modules/features?api_key=${api_key} ?api_key=${APIKey}</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">modules/api/v5.0/billing-api/features</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Api-Key</stringProp>
                  <stringProp name="Header.value">${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, application/javascript, text/javascript, text/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy optimization_problem_id" enabled="false">
            <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=5447F52C6C5948E6BF9B2F61A53D0450</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">sleep(10000)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response for next Step" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
RespFile = new File(&apos;${TestDir}/Responsev5.json&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy route_id" enabled="false">
            <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
            <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">${v5Legacy}/${v4Routes}?route_id=</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">sleep(10000)</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response for next Step" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
RespFile = new File(&apos;${TestDir}/Responsev5.json&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Routes v4" enabled="false"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Api-Key</stringProp>
                  <stringProp name="Header.value">${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
              <stringProp name="TestPlan.comments">${RouteId}</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4Routes}?limit=100</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;RouteIDsForDelete1&apos;, JsonOutput.toJson(a.&apos;route_id&apos;).toString())

b = a.&apos;route_id&apos;.toString()
b = b.replace(&apos;[&apos;, &apos;&quot;&apos;)
b = b.replace(&apos;]&apos;, &apos;&quot;&apos;)
vars.put(&apos;RouteIDsForDelete2&apos;, b)

b = b.replace(&apos;&quot;&apos;, &apos;&apos;)
b = b.replace(&apos; &apos;, &apos;&apos;)
vars.put(&apos;RouteIDsForDelete3&apos;, b)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE Route" enabled="true">
              <stringProp name="TestPlan.comments">${RouteId}</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4Routes}?route_id=${RouteIDsForDelete3}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE1" enabled="false">
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4Routes}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;route_id&quot;: ${RouteIDsForDelete1}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE2" enabled="false">
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4Routes}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;route_id&quot;: ${RouteIDsForDelete2}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Route v5Legacy" enabled="false"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Api-Key</stringProp>
                  <stringProp name="Header.value">${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET" enabled="true">
              <stringProp name="TestPlan.comments">${RouteId}</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4Routes}?limit=100</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
println a.&apos;route_id&apos;
vars.put(&apos;RouteIDsForDelete1&apos;, JsonOutput.toJson(a.&apos;route_id&apos;).toString())

b = a.&apos;route_id&apos;.toString()
b = b.replace(&apos;[&apos;, &apos;&quot;&apos;)
b = b.replace(&apos;]&apos;, &apos;&quot;&apos;)
vars.put(&apos;RouteIDsForDelete2&apos;, b)

b = b.replace(&apos;&quot;&apos;, &apos;&apos;)
b = b.replace(&apos; &apos;, &apos;&apos;)
vars.put(&apos;RouteIDsForDelete3&apos;, b)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE2" enabled="true">
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4Routes}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;route_id&quot;: ${RouteIDsForDelete2}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Drafts1" enabled="false"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="keys" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">/*
v4 = (new File(&apos;${TestDir}/v4.json&apos;)).text
v5 = (new File(&apos;${TestDir}/v5.json&apos;)).text
a1 = new JsonSlurper().parseText(v4)
a2 = new JsonSlurper().parseText(v5)
*/</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="v4 optimization_problem_id" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">vars.put(&apos;OptimizationProblemIDv4&apos;, &apos;96231A5F0BAC0DE748D48646188624A7&apos;)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="v5 optimization_problem_id" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">vars.put(&apos;OptimizationProblemIDv5&apos;, &apos;2A7BC1D8D6FC47168A1BCB3C0A18FF6E&apos;)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4" enabled="false">
              <stringProp name="TestPlan.comments">Add New Route</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?redirect=0</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random Values" enabled="false">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-2123533228">RouteName</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="11884269">
                    <stringProp name="1513857054">${__RandomString(32, ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,)}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Addesses Generation" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..${NumberOfStops}){
a = &apos;\t\t{&quot;alias&quot;:&quot;Stop &apos; + i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
b = (i == ${NumberOfStops})? b + a : b + a + &apos;,\n&apos;}

vars.put(&apos;Addresses&apos;, b)
vars.put(&apos;RouteDate&apos;, a = (new Date().getTime() + 86400000).toString()[0..9])</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv4&apos;, b)

FileWithIDs = new File(&apos;${TestDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.append(b + &apos;\n&apos;)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with Request" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">RequestBody = prev.getSamplerData()
RequestHeader = prev.getRequestHeaders()
r = RequestHeader[0..RequestHeader.length()-2]
r = r.replace(&apos;\n&apos;, &apos;\n\t&apos;)
r = &apos;\t&apos;+ r
RequestBody = RequestBody.replace(&apos;[no cookies]&apos;, &apos;&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
s = RequestBody + &apos;Header\n&apos; + r + &apos;\nResponse\n&apos; + prev.getResponseDataAsString() + &apos;\n***********\n&apos;

FileWithRequests = new File(&apos;${TestDir}/${RequestsFile}&apos;)
FileWithRequests.append(s)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv5Legacy" enabled="false">
              <stringProp name="TestPlan.comments">Add New Route</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?redirect=0</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random Values" enabled="false">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-2123533228">RouteName</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="11884269">
                    <stringProp name="1513857054">${__RandomString(32, ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,)}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Addesses Generation" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..${NumberOfStops}){
a = &apos;\t\t{&quot;alias&quot;:&quot;Stop &apos; + i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
b = (i == ${NumberOfStops})? b + a : b + a + &apos;,\n&apos;}

vars.put(&apos;Addresses&apos;, b)
vars.put(&apos;RouteDate&apos;, a = (new Date().getTime() + 86400000).toString()[0..9])</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv5&apos;, b)

FileWithIDs = new File(&apos;${TestDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.append(b + &apos;\n&apos;)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id Getting" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;RouteID&apos;, a.&apos;addresses&apos;[0].&apos;route_id&apos;.toString())
vars.put(&apos;v5Response&apos;, prev.getResponseDataAsString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response for next Step" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">vars.put(&apos;v5Response&apos;, prev.getResponseDataAsString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="optimization_problem.php" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OPTIONS" enabled="false">
              <stringProp name="TestPlan.comments">Get Added Route</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;.&apos;route_id&apos;

for (i in 0..b.size() - 1){
	if (b[i] !=null){
		vars.put(&apos;RouteID&apos;, b[i].toString())
		break}}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with Request" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">RequestBody = prev.getSamplerData()
RequestHeader = prev.getRequestHeaders()
r = RequestHeader[0..RequestHeader.length()-2]
r = r.replace(&apos;\n&apos;, &apos;\n\t&apos;)
r = &apos;\t&apos;+ r
RequestBody = RequestBody.replace(&apos;[no cookies]&apos;, &apos;&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
s = RequestBody + &apos;Header\n&apos; + r + &apos;\nResponse\n&apos; + prev.getResponseDataAsString() + &apos;\n***********\n&apos;

FileWithRequests = new File(&apos;${TestDir}/${RequestsFile}&apos;)
FileWithRequests.append(s)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Comparison" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

CompFile = new File(&apos;${TestDir}/${ComparFile}&apos;)
//
Comp1 = &apos;v5Legacy Response&apos;
Comp2 = &apos;v4 Response&apos;
//
s = &apos;\n################################################################\n\
Comparison &quot;&apos; + Comp1 + &apos;&quot; and &quot;&apos; + Comp2 + &apos;&quot;\
\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n1.\
Keys difference.\n---------------------------------------------------------\n&apos;

Response1 = new JsonSlurper().parseText(vars.get(&apos;v5Response&apos;))
Response2 = new JsonSlurper().parse(prev.getResponseData())
a = Response1.size() - Response2.size()
switch (a){
	case {a&lt;0}:
		m = Response2.keySet() - Response1.keySet()
		s = s + &apos;Key(s) is(are) contained in &apos;+Comp2+&apos;\n\t&apos; + m + &apos;\n&apos;
		m.forEach(Response2::remove)
		break		
	case {a&gt;0}:
		m = Response1.keySet() - Response2.keySet()
		s = s + &apos;Key(s) is(are) contained in &apos;+Comp1+&apos;\n\t&apos; + m + &apos;\n&apos;
		m.forEach(Response1::remove)
		break
	case {a=0}:
		s = s + &apos;Responses from &apos;+Comp1+&apos; and &apos;+Comp2+&apos; are equal&apos;
		break
	}
b = Response1.keySet()
s = s + &apos;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
2. Values difference.\n-------------------------------------------------------\
\nkey:\n\t&apos;+Comp1+&apos; Value(Value Type)\n\t&apos;+Comp2+&apos; Value(Value Type)\
\n-------------------------------------------------------&apos;
println s
CompFile.append(s + &apos;\n&apos;)
for (i in 0..b.size() - 1){
	if (Response1.(b[i].toString()) != Response2.(b[i].toString())){
		f = (Response1.(b[i].toString())).getClass().toString()
		f = f.reverse()
		f = f[0..f.indexOf(&apos;.&apos;) - 1]
		f = f.reverse()
		
		f1 = (Response2.(b[i].toString())).getClass().toString()
		f1 = f1.reverse()
		f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
		f1 = f1.reverse()
s1 = b[i].toString() + &apos;:\n\t&apos; + Response1.(b[i].toString()) + &apos;(&apos; + f + &apos;)&apos; + &apos;\n\t&apos; + Response2.(b[i].toString()) + &apos;(&apos; + f1 + &apos;)&apos;
println s1
CompFile.append(s1 + &apos;\n&apos;)
		}
}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

Response1 = new JsonSlurper().parseText(vars.get(&apos;v5Response&apos;))
Response2 = new JsonSlurper().parse(prev.getResponseData())

println Response1.&apos;routes&apos;[0].keySet() - Response2.&apos;routes&apos;[0].keySet()
//println Response2.&apos;routes&apos;.keySet() - Response1.&apos;routes&apos;.keySet()</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="addresses" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

Response1 = new JsonSlurper().parseText(vars.get(&apos;v5Response&apos;))
Response2 = new JsonSlurper().parse(prev.getResponseData())

println Response2.&apos;addresses&apos;[0].keySet() - Response2.&apos;addresses&apos;[0].keySet()
//println Response2.&apos;routes&apos;.keySet() - Response1.&apos;routes&apos;.keySet()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Drafts" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add Route v5 without Flag" enabled="false"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add New Route v5" enabled="true">
                <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_name&quot;:&quot;${RouteName}&quot;,&#xd;
		&quot;route_date&quot;:${RouteDate},&#xd;
		&quot;rt&quot;:true,&#xd;
		&quot;algorithm_type&quot;:100},&#xd;
	&quot;addresses&quot;:[&#xd;
		${Addresses}]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random Values" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="-2123533228">RouteName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="11884269">
                      <stringProp name="1513857054">${__RandomString(32, ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,)}</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Addesses Generation" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..${NumberOfStops}){
a = &apos;\t\t{&quot;alias&quot;:&quot;Stop &apos; + i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
b = (i == ${NumberOfStops})? b + a : b + a + &apos;,\n&apos;}

vars.put(&apos;Addresses&apos;, b)
vars.put(&apos;RouteDate&apos;, a = (new Date().getTime() + 86400000).toString()[0..9])</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new groovy.json.JsonSlurper().parse(prev.getResponseData())
//vars.put(&apos;OptimizationID&apos;, a.&apos;optimization_id&apos;.toString())
vars.put(&apos;OptimizationID&apos;, a.&apos;optimization_problem_id&apos;.toString())</stringProp>
                  <stringProp name="TestPlan.comments">100%works</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__groovy(${a1} == &apos;1&apos;)}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5 Added Route" enabled="true">
                  <stringProp name="TestPlan.comments">route_id Getting &amp;wait_for_final_state=1</stringProp>
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationID}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = prev.getResponseDataAsString()

if (b.contains(&apos;route_id&apos;)){
	vars.put(&apos;RouteID&apos;, a.&apos;addresses&apos;[0].&apos;route_id&apos;.toString())
	vars.put(&apos;a1&apos;, &apos;1&apos;)
}</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Route" enabled="true">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a[0].&apos;addresses&apos;.&apos;route_destination_id&apos;.size()
c = a[0].&apos;addresses&apos;.&apos;route_destination_id&apos;[b - 2]
vars.put(&apos;DepotForPUT&apos;, a[0].&apos;addresses&apos;.&apos;route_destination_id&apos;[0].toString())
vars.put(&apos;StopForPUT&apos;, c.toString())
vars.put(&apos;AddressesLat&apos;, (a[0].&apos;addresses&apos;.&apos;lat&apos;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesLng&apos;, (a[0].&apos;addresses&apos;.&apos;lng&apos;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLat&apos;, (a[0].&apos;addresses&apos;.&apos;curbside_lat&apos;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLnt&apos;, (a[0].&apos;addresses&apos;.&apos;curbside_lng&apos;[b - 2] + 0.005).toString())
vars.put(&apos;SequenceNo&apos;, a[0].&apos;addresses&apos;.&apos;sequence_no&apos;[b - 2].toString())
vars.put(&apos;StopForDelete&apos;, a[0].&apos;addresses&apos;.&apos;route_destination_id&apos;[2].toString())</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE" enabled="true">
                <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForDelete}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Route" enabled="true">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Route" enabled="true">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Routes v4" enabled="false"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add New Route" enabled="false">
                <stringProp name="TestPlan.comments">OK</stringProp>
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4OptimizationProblem}?redirect=0</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;parameters&quot;:{&#xd;
	&quot;route_name&quot;:&quot;${RouteName}-${RNN}&quot;,&#xd;
	&quot;route_date&quot;:${RouteDate},&#xd;
	&quot;rt&quot;:true,&#xd;
	&quot;algorithm_type&quot;:100},&#xd;
&quot;addresses&quot;:[${Addresses}]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random Values" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="-2123533228">RouteName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="11884269">
                      <stringProp name="1513857054">${__RandomString(32, ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,)}</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Addesses Generation" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..${NumberOfStops}){
a = &apos;{&quot;alias&quot;:&quot;Stop &apos; +	i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
b = (i == ${NumberOfStops})? b + a: b + a + &apos;,\n&apos;}

FileName = new File(&apos;${MainDrive}/${MainDir}/${TestDir}/AddedRoutes.csv&apos;)
if (FileName.exists())
{
	FileContent = new File(&apos;${MainDrive}/${MainDir}/${TestDir}/AddedRoutes.csv&apos;).text
	NumberForRoute = (FileContent.count(&apos;,&apos;) + 1).toString()
	n = NumberForRoute.length()
			switch(n){
			case &apos;1&apos;: r = &apos;00&apos; + NumberForRoute;break
			case &apos;2&apos;: r = &apos;0&apos; + NumberForRoute;break
			default: r = &apos;&apos;;break}}
else{r = &apos;001&apos;}

vars.put(&apos;Addresses&apos;, b)
vars.put(&apos;RouteDate&apos;, a = (new Date().getTime() + 604800000).toString()[0..9])
vars.put(&apos;RNN&apos;, r)</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="AlgorithmType" enabled="false">
                  <stringProp name="filename">D:/Route4Me/Config/AlgorithmTypes.csv</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="variableNames">AlgorithmType</stringProp>
                  <boolProp name="ignoreFirstLine">false</boolProp>
                  <stringProp name="delimiter">,</stringProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                </CSVDataSet>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="OptimizationProblemID for GET" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">a = new groovy.json.JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;OptimizationProblemID&apos;, a.&apos;optimization_problem_id&apos;)</stringProp>
                  <stringProp name="TestPlan.comments">100%works</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Added Route" enabled="false">
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemID}&amp;wait_for_final_state=1</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;.&apos;route_id&apos;

for (i in 0..b.size() - 1){
	if (b[i] !=null){
		vars.put(&apos;RouteID&apos;, b[i].toString())
		break}}
vars.put(&apos;RouteAddResponse&apos;, JsonOutput.toJson(a.&apos;parameters&apos;).toString())
//vars.put(&apos;GETv4Response&apos;, prev.getResponseDataAsString())</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Route" enabled="true">
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;.&apos;route_id&apos;

for (i in 0..b.size() - 1){
	if (b[i] !=null){
		vars.put(&apos;RouteID&apos;, b[i].toString())
		break}}
vars.put(&apos;RouteAddResponse&apos;, JsonOutput.toJson(a.&apos;parameters&apos;).toString())
//vars.put(&apos;GETv4Response&apos;, prev.getResponseDataAsString())</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5/legacy" enabled="true">
                <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with Request" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">RequestBody = prev.getSamplerData()
RequestHeader = prev.getRequestHeaders()
r = RequestHeader[0..RequestHeader.length()-2]
r = r.replace(&apos;\n&apos;, &apos;\n\t&apos;)
r = &apos;\t&apos;+ r
RequestBody = RequestBody.replace(&apos;[no cookies]&apos;, &apos;&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
s = RequestBody + &apos;Header\n&apos; + r + &apos;\nResponse\n&apos; + prev.getResponseDataAsString() + &apos;\n***********\n&apos;

FileWithRequests = new File(&apos;${TestDir}/${RequestsFile}&apos;)
FileWithRequests.append(s)</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="route_id" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">vars.put(&apos;RouteID&apos;, &quot;6647429856DA498439C6F926064B111C&quot;)</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PUT" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="No in Response" enabled="false"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ignore_tw" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;ignore_tw&quot;:true&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="target_duration" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;target_duration&quot;:100&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="target_distance" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;target_distance&quot;:100&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="target_wait_by_tail_size" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;target_wait_by_tail_size&quot;:100&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="balance" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;balance&quot;:{&quot;mode&quot;:&quot;localtions&quot;}&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Don&apos;t work" enabled="false"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="is_upload" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;is_upload&quot;:true}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ip" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;ip&quot;:1467254080}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="device_id" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;device_id&quot;:&quot;${DeviceID}&quot;}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random Number" enabled="true">
                      <collectionProp name="UserParameters.names">
                        <stringProp name="1173835281">DeviceID</stringProp>
                      </collectionProp>
                      <collectionProp name="UserParameters.thread_values">
                        <collectionProp name="11884269">
                          <stringProp name="1513857054">${__RandomString(32, ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,)}</stringProp>
                        </collectionProp>
                      </collectionProp>
                      <boolProp name="UserParameters.per_iteration">false</boolProp>
                    </UserParameters>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="device_type" enabled="false">
                    <stringProp name="TestPlan.comments">web, iphone, ipad, android_phone, android_tablet</stringProp>
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;device_type&quot;:&quot;iphone&quot;}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_height&quot;:4,&#xd;
		&quot;truck_width&quot;:2.8,&#xd;
		&quot;truck_length&quot;:13.9,&#xd;
		&quot;truck_axles&quot;:1&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_toll_road_usage" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_toll_road_usage&quot;:&quot;YES&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_avoid_ferries" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_avoid_ferries&quot;:&quot;YES&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_hwy_only" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_hwy_only&quot;:&quot;YES&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_lcv" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_lcv&quot;:&quot;YES&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_borders" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_borders&quot;:&quot;YES&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_side_street_adherence" enabled="false">
                    <stringProp name="TestPlan.comments">OFF, MINIMAL, MODERATE, AVERAGE, STRICT, ADHERE, STRONGLYHERE</stringProp>
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_side_street_adherence&quot;:&quot;OFF&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_config" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_config&quot;:&quot;NONE&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_dim_unit" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_dim_unit&quot;:&quot;km&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_type" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_type&quot;:&quot;van&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_weight" enabled="false">
                    <stringProp name="TestPlan.comments">If travel_mode = &apos;Trucking&apos;, specifies the truck weight (required)</stringProp>
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_weight&quot;:21&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="route_time_multiplier" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_time_multiplier&quot;:11&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="route_service_time_multiplier" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_service_time_multiplier&quot;:11&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="optimization_engine" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;optimization_engine&quot;:1&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="slowdowns" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;slowdowns&quot;:{&quot;service_time&quot;:17,&quot;travel_time&quot;:18}&#xd;
}&#xd;
}&#xd;
&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="route_date" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_date&quot;:1703755500&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="distance_unit" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;distance_unit&quot;:&quot;km&quot;&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dev_lat" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;dev_lat&quot;:23.45,&#xd;
		&quot;dev_lng&quot;:123.897&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Work OK" enabled="false"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="algorithm_type" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;algorithm_type&quot;:9}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member_id" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;member_id&quot;:&quot;1280829&quot;}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dm" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;dm&quot;:11}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dirm" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;dirm&quot;:3}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="parts" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;parts&quot;:3}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="parts_min" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;parts_min&quot;:2}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="avoid" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;avoid&quot;:&quot;Tolls&quot;}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="avoidance_zones" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;avoidance_zones&quot;:[&quot;5D9182203129F97939457A797F173461&quot;]}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="first_drive_then_wait_between_stops" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;first_drive_then_wait_between_stops&quot;:true}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="has_trailer" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;has_trailer&quot;:true}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trailer_3" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;trailer_weight_t&quot;:100.2,&#xd;
		&quot;limited_weight_t&quot;:98,&#xd;
		&quot;weight_per_axle_t&quot;:64.9&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_hazardous_goods" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_hazardous_goods&quot;:&quot;ST123987&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="min_tour_size" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;min_tour_size&quot;:123&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="max_tour_size" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;max_tour_size&quot;:987&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="optimization_quality" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;optimization_quality&quot;:3&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="uturn" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;uturn&quot;:3&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="leftturn" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;leftturn&quot;:3&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="rightturn" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;rightturn&quot;:3&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="is_dynamic_start_time" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;is_dynamic_start_time&quot;:true&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="disable_optimization" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;disable_optimization&quot;:true&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="lock_last" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;lock_last&quot;:false&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="metric" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;metric&quot;:5&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="optimize" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;optimize&quot;:&quot;timeWithTraffic&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="route_name" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_name&quot;:&quot;PUT-route_name&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="route_time" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_time&quot;:36600&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="rt" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;rt&quot;:false&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="travel_mode" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;travel_mode&quot;:&quot;Walking&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="vehicle_4" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;vehicle_capacity&quot;:99,&#xd;
		&quot;vehicle_max_cargo_weight&quot;:12000,&#xd;
		&quot;vehicle_max_cargo_volume&quot;:332,&#xd;
		&quot;vehicle_max_distance_mi&quot;:987654&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="subtour_max_revenue" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;subtour_max_revenue&quot;:1020304050&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="vehicle_id" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;vehicle_id&quot;:&quot;E745D0D67858B6EB61C39C4EECE14B8D&quot;&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="route_max_duration" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_max_duration&quot;:99000&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="route_email" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_email&quot;:&quot;route_email@e.com&quot;&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Comparison of &quot;parameters&quot;" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">false</stringProp>
                      <stringProp name="script">import groovy.json.*

CompFile = new File(&apos;${TestDir}/${ComparFile}&apos;)

s = &apos;\n################################################################\n\
Comparison &quot;GET v4 Response&quot; and &quot;GET v5 Response by order_uuid&quot;\
\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n1.\
Keys difference.\n---------------------------------------------------------\n&apos;

GETResponse = new JsonSlurper().parseText(vars.get(&apos;RouteAddResponse&apos;))
b = new JsonSlurper().parse(prev.getResponseData())
GETResponseID = b.&apos;parameters&apos;

a = GETResponse.size() - GETResponseID.size()
switch (a){
	case {a&lt;0}:
		m = GETResponseID.keySet() - GETResponse.keySet()
		s = s + &apos;Key(s) is(are) contained in GET v5 Response by order_uuid\n\t&apos; + m + &apos;\n&apos;
		m.forEach(GETResponseID::remove)
		break		
	case {a&gt;0}:
		m = GETResponse.keySet() - GETResponseID.keySet()
		s = s + &apos;Key(s) is(are) contained in GET v4 Response\n&apos; + m + &apos;\n&apos;
		m.forEach(GETResponse::remove)
		break
	case {a=0}:
		s = s + &apos;Responses from GET v4 and GET v5 are equal&apos;
		break
	}
b = GETResponse.keySet()
s = s + &apos;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
2. Values difference.\n-------------------------------------------------------\
\nkey:\n\tGET v4 Response Value(Value Type)\n\tGET v5 Response by order_uuid Value(Value Type)\
\n-------------------------------------------------------&apos;
println s
CompFile.append(s + &apos;\n&apos;)
for (i in 0..b.size() - 1){
	if (GETResponse.(b[i].toString()) != GETResponseID.(b[i].toString())){
		f = (GETResponse.(b[i].toString())).getClass().toString()
		f = f.reverse()
		f = f[0..f.indexOf(&apos;.&apos;) - 1]
		f = f.reverse()
		
		f1 = (GETResponseID.(b[i].toString())).getClass().toString()
		f1 = f1.reverse()
		f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
		f1 = f1.reverse()
s1 = b[i].toString() + &apos;:\n\t&apos; + GETResponse.(b[i].toString()) + &apos;(&apos; + f + &apos;)&apos; + &apos;\n\t&apos; + GETResponseID.(b[i].toString()) + &apos;(&apos; + f1 + &apos;)&apos;
println s1
CompFile.append(s1 + &apos;\n&apos;)
		}
}</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="---------------override_addresses" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;rightturn&quot;:3&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="---------------bundling" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;is_dynamic_start_time&quot;:true&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="---------------advanced_constraints" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_email&quot;:&quot;route_email@e.com&quot;&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Comparison 2" enabled="false">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">false</stringProp>
                      <stringProp name="script">import groovy.json.*

CompFile = new File(&apos;${TestDir}/${ComparFile}&apos;)

s = &apos;\n################################################################\n\
Comparison &quot;GET v4 Response&quot; and &quot;GET v5 Response by order_uuid&quot;\
\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n1.\
Keys difference.\n---------------------------------------------------------\n&apos;

GETResponse = new JsonSlurper().parseText(vars.get(&apos;GETv4Response&apos;))
GETResponseID = new JsonSlurper().parse(prev.getResponseData())
a = GETResponse.size() - GETResponseID.size()
switch (a){
	case {a&lt;0}:
		m = GETResponseID.keySet() - GETResponse.keySet()
		s = s + &apos;Key(s) is(are) contained in GET v5 Response by order_uuid\n\t&apos; + m + &apos;\n&apos;
		m.forEach(GETResponseID::remove)
		break		
	case {a&gt;0}:
		m = GETResponse.keySet() - GETResponseID.keySet()
		s = s + &apos;Key(s) is(are) contained in GET v4 Response\n&apos; + m + &apos;\n&apos;
		m.forEach(GETResponse::remove)
		break
	case {a=0}:
		s = s + &apos;Responses from GET v4 and GET v5 are equal&apos;
		break
	}
b = GETResponse.keySet()
s = s + &apos;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
2. Values difference.\n-------------------------------------------------------\
\nkey:\n\tGET v4 Response Value(Value Type)\n\tGET v5 Response by order_uuid Value(Value Type)\
\n-------------------------------------------------------&apos;
println s
CompFile.append(s + &apos;\n&apos;)
for (i in 0..b.size() - 1){
	if (GETResponse.(b[i].toString()) != GETResponseID.(b[i].toString())){
		f = (GETResponse.(b[i].toString())).getClass().toString()
		f = f.reverse()
		f = f[0..f.indexOf(&apos;.&apos;) - 1]
		f = f.reverse()
		
		f1 = (GETResponseID.(b[i].toString())).getClass().toString()
		f1 = f1.reverse()
		f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
		f1 = f1.reverse()
s1 = b[i].toString() + &apos;:\n\t&apos; + GETResponse.(b[i].toString()) + &apos;(&apos; + f + &apos;)&apos; + &apos;\n\t&apos; + GETResponseID.(b[i].toString()) + &apos;(&apos; + f1 + &apos;)&apos;
println s1
CompFile.append(s1 + &apos;\n&apos;)
		}
}</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Comparison" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

CompFile = new File(&apos;${TestDir}/${ComparFile}&apos;)

s = &apos;\n################################################################\n\
Comparison &quot;GET v4 Response&quot; and &quot;GET v5 Response by order_uuid&quot;\
\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n1.\
Keys difference.\n---------------------------------------------------------\n&apos;

GETResponse = new JsonSlurper().parseText(vars.get(&apos;GETv4Response&apos;))
GETResponseID = new JsonSlurper().parse(prev.getResponseData())
a = GETResponse.size() - GETResponseID.size()
switch (a){
	case {a&lt;0}:
		m = GETResponseID.keySet() - GETResponse.keySet()
		s = s + &apos;Key(s) is(are) contained in GET v5 Response by order_uuid\n\t&apos; + m + &apos;\n&apos;
		m.forEach(GETResponseID::remove)
		break		
	case {a&gt;0}:
		m = GETResponse.keySet() - GETResponseID.keySet()
		s = s + &apos;Key(s) is(are) contained in GET v4 Response\n&apos; + m + &apos;\n&apos;
		m.forEach(GETResponse::remove)
		break
	case {a=0}:
		s = s + &apos;Responses from GET v4 and GET v5 are equal&apos;
		break
	}
b = GETResponse.keySet()
s = s + &apos;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
2. Values difference.\n-------------------------------------------------------\
\nkey:\n\tGET v4 Response Value(Value Type)\n\tGET v5 Response by order_uuid Value(Value Type)\
\n-------------------------------------------------------&apos;
println s
CompFile.append(s + &apos;\n&apos;)
for (i in 0..b.size() - 1){
	if (GETResponse.(b[i].toString()) != GETResponseID.(b[i].toString())){
		f = (GETResponse.(b[i].toString())).getClass().toString()
		f = f.reverse()
		f = f[0..f.indexOf(&apos;.&apos;) - 1]
		f = f.reverse()
		
		f1 = (GETResponseID.(b[i].toString())).getClass().toString()
		f1 = f1.reverse()
		f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
		f1 = f1.reverse()
s1 = b[i].toString() + &apos;:\n\t&apos; + GETResponse.(b[i].toString()) + &apos;(&apos; + f + &apos;)&apos; + &apos;\n\t&apos; + GETResponseID.(b[i].toString()) + &apos;(&apos; + f1 + &apos;)&apos;
println s1
CompFile.append(s1 + &apos;\n&apos;)
		}
}</stringProp>
                <stringProp name="TestPlan.comments">Original</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Edited Comparison" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">a = vars.get(&apos;RouteAddResponse&apos;)

println a</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Edited Comparison" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE" enabled="false">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with Request" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">RequestBody = prev.getSamplerData()
RequestHeader = prev.getRequestHeaders()
r = RequestHeader[0..RequestHeader.length()-2]
r = r.replace(&apos;\n&apos;, &apos;\n\t&apos;)
r = &apos;\t&apos;+ r
RequestBody = RequestBody.replace(&apos;[no cookies]&apos;, &apos;&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
s = RequestBody + &apos;Header\n&apos; + r + &apos;\nResponse\n&apos; + prev.getResponseDataAsString() + &apos;\n***********\n&apos;

FileWithRequests = new File(&apos;${TestDir}/${RequestsFile}&apos;)
FileWithRequests.append(s)</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET route_destination_id" enabled="false">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&quot;addresses&quot;.&quot;route_destination_id&quot;.size()
c = a.&quot;addresses&quot;.&quot;route_destination_id&quot;[b - 2]
vars.put(&apos;DepotForPUT&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[0].toString())
vars.put(&apos;StopForPUT&apos;, c.toString())
vars.put(&apos;AddressesLat&apos;, (a.&quot;addresses&quot;.&quot;lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesLng&apos;, (a.&quot;addresses&quot;.&quot;lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLat&apos;, (a.&quot;addresses&quot;.&quot;curbside_lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLnt&apos;, (a.&quot;addresses&quot;.&quot;curbside_lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;SequenceNo&apos;, a.&quot;addresses&quot;.&quot;sequence_no&quot;[b - 2].toString())
vars.put(&apos;StopForDelete&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[2].toString())</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GETs" enabled="false"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Route" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
                  <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&quot;addresses&quot;.&quot;route_destination_id&quot;.size()
c = a.&quot;addresses&quot;.&quot;route_destination_id&quot;[b - 2]
vars.put(&apos;DepotForPUT&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[0].toString())
vars.put(&apos;StopForPUT&apos;, c.toString())
vars.put(&apos;AddressesLat&apos;, (a.&quot;addresses&quot;.&quot;lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesLng&apos;, (a.&quot;addresses&quot;.&quot;lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLat&apos;, (a.&quot;addresses&quot;.&quot;curbside_lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLnt&apos;, (a.&quot;addresses&quot;.&quot;curbside_lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;SequenceNo&apos;, a.&quot;addresses&quot;.&quot;sequence_no&quot;[b - 2].toString())
vars.put(&apos;StopForDelete&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[2].toString())</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Api-Key</stringProp>
                        <stringProp name="Header.value">${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="false">
                  <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=6647429856DA498439C6F926064B111C</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&quot;addresses&quot;.&quot;route_destination_id&quot;.size()
c = a.&quot;addresses&quot;.&quot;route_destination_id&quot;[b - 2]
vars.put(&apos;DepotForPUT&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[0].toString())
vars.put(&apos;StopForPUT&apos;, c.toString())
vars.put(&apos;AddressesLat&apos;, (a.&quot;addresses&quot;.&quot;lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesLng&apos;, (a.&quot;addresses&quot;.&quot;lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLat&apos;, (a.&quot;addresses&quot;.&quot;curbside_lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLnt&apos;, (a.&quot;addresses&quot;.&quot;curbside_lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;SequenceNo&apos;, a.&quot;addresses&quot;.&quot;sequence_no&quot;[b - 2].toString())
vars.put(&apos;StopForDelete&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[2].toString())</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Api-Key</stringProp>
                        <stringProp name="Header.value">${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5/legacy" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with Request" enabled="false">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">RequestBody = prev.getSamplerData()
RequestHeader = prev.getRequestHeaders()
r = RequestHeader[0..RequestHeader.length()-2]
r = r.replace(&apos;\n&apos;, &apos;\n\t&apos;)
r = &apos;\t&apos;+ r
RequestBody = RequestBody.replace(&apos;[no cookies]&apos;, &apos;&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
s = RequestBody + &apos;Header\n&apos; + r + &apos;\nResponse\n&apos; + prev.getResponseDataAsString() + &apos;\n***********\n&apos;

FileWithRequests = new File(&apos;${TestDir}/${RequestsFile}&apos;)
FileWithRequests.append(s)</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5/legacy" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}?route_id=6647429856DA498439C6F926064B111C</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with Request" enabled="false">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">RequestBody = prev.getSamplerData()
RequestHeader = prev.getRequestHeaders()
r = RequestHeader[0..RequestHeader.length()-2]
r = r.replace(&apos;\n&apos;, &apos;\n\t&apos;)
r = &apos;\t&apos;+ r
RequestBody = RequestBody.replace(&apos;[no cookies]&apos;, &apos;&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
s = RequestBody + &apos;Header\n&apos; + r + &apos;\nResponse\n&apos; + prev.getResponseDataAsString() + &apos;\n***********\n&apos;

FileWithRequests = new File(&apos;${TestDir}/${RequestsFile}&apos;)
FileWithRequests.append(s)</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Address" enabled="false"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
                  <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=6647429856DA498439C6F926064B111C&amp;route_destination_id=768335520</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&quot;addresses&quot;.&quot;route_destination_id&quot;.size()
c = a.&quot;addresses&quot;.&quot;route_destination_id&quot;[b - 2]
vars.put(&apos;DepotForPUT&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[0].toString())
vars.put(&apos;StopForPUT&apos;, c.toString())
vars.put(&apos;AddressesLat&apos;, (a.&quot;addresses&quot;.&quot;lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesLng&apos;, (a.&quot;addresses&quot;.&quot;lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLat&apos;, (a.&quot;addresses&quot;.&quot;curbside_lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLnt&apos;, (a.&quot;addresses&quot;.&quot;curbside_lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;SequenceNo&apos;, a.&quot;addresses&quot;.&quot;sequence_no&quot;[b - 2].toString())
vars.put(&apos;StopForDelete&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[2].toString())</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Api-Key</stringProp>
                        <stringProp name="Header.value">${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5/legacy" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Address}?route_id=6647429856DA498439C6F926064B111C&amp;route_destination_id=768335520</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with Request" enabled="false">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">RequestBody = prev.getSamplerData()
RequestHeader = prev.getRequestHeaders()
r = RequestHeader[0..RequestHeader.length()-2]
r = r.replace(&apos;\n&apos;, &apos;\n\t&apos;)
r = &apos;\t&apos;+ r
RequestBody = RequestBody.replace(&apos;[no cookies]&apos;, &apos;&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
s = RequestBody + &apos;Header\n&apos; + r + &apos;\nResponse\n&apos; + prev.getResponseDataAsString() + &apos;\n***********\n&apos;

FileWithRequests = new File(&apos;${TestDir}/${RequestsFile}&apos;)
FileWithRequests.append(s)</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5 route_destination_id" enabled="false">
              <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;[0].&apos;route_destination_id&apos;.size()
println b
c = a.&apos;addresses&apos;[0].&apos;route_destination_id&apos;[b - 2]
vars.put(&apos;DepotForPUT&apos;, a.&apos;addresses&apos;[0].&apos;route_destination_id&apos;[0].toString())
vars.put(&apos;StopForPUT&apos;, c.toString())/*
vars.put(&apos;AddressesLat&apos;, (a.&quot;addresses&quot;.&quot;lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesLng&apos;, (a.&quot;addresses&quot;.&quot;lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLat&apos;, (a.&quot;addresses&quot;.&quot;curbside_lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLnt&apos;, (a.&quot;addresses&quot;.&quot;curbside_lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;SequenceNo&apos;, a.&quot;addresses&quot;.&quot;sequence_no&quot;[b - 2].toString())
vars.put(&apos;StopForDelete&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[2].toString())*/</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PUT" enabled="false"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Don&apos;t work" enabled="false"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="No in Response" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-route_name" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
		&quot;route_name&quot;:&quot;PUTroute_name&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="!is_departed" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;is_departed&quot;:true&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="!tracking_number" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;tracking_number&quot;:&quot;${TrackingNumber}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random Number" enabled="true">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="868519168">TrackingNumber</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="328221088">
                        <stringProp name="-1232936257">${__RandomString(8, ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,)}</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">false</boolProp>
                  </UserParameters>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="!additional_status" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;additional_status&quot;:&quot;PUTaddst&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Work OK" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="is_visited" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;is_visited&quot;:true&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="alias/Depot" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${DepotForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;alias&quot;:&quot;PUT Depot1&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="alias/Stop" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;alias&quot;:&quot;PUT alias&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member_id" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;member_id&quot;:1234567&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="address" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;address&quot;:&quot;PUT address&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Geo" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;lat&quot;:${AddressesLat},&#xd;
		&quot;lng&quot;:${AddressesLng},&#xd;
		&quot;curbside_lat&quot;:${AddressesCurbsideLat},&#xd;
		&quot;curbside_lng&quot;:${AddressesCurbsideLnt}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="priority" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;priority&quot;:1&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sequence_no" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;sequence_no&quot;:${SequenceNo}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="contact_id" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;contact_id&quot;:1&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="order_id" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;order_id&quot;:2&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="address_stop_type" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;address_stop_type&quot;:&quot;MEETUP&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="group" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;group&quot;:&quot;PUT group&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="customer_po" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;customer_po&quot;:&quot;PUT_po&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="invoice_no" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;invoice_no&quot;:&quot;PUTInvoice_no&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="reference_no" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;reference_no&quot;:&quot;PUTreference_no&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="order_no" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;order_no&quot;:&quot;PUTorder_no&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="weight/cost/revenue/cube" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;weight&quot;:1.1,&#xd;
		&quot;cost&quot;:2.2,&#xd;
		&quot;revenue&quot;:3.3,&#xd;
		&quot;cube&quot;:4.4&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="pieces" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;pieces&quot;:106&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="first_name/last_name/email/phone" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;first_name&quot;:&quot;PUTfirst_name&quot;,&#xd;
		&quot;last_name&quot;:&quot;PUTlast_name&quot;,&#xd;
		&quot;email&quot;:&quot;PUTemail@m.com&quot;,&#xd;
		&quot;phone&quot;:&quot;1234567890&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="pickup" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;pickup&quot;:&quot;PUTpickup&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dropoff" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;dropoff&quot;:&quot;PUTdropoff&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="joint" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;joint&quot;:0&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="time_window_" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;time_window_start&quot;:50000,&#xd;
		&quot;time_window_end&quot;:54000,&#xd;
		&quot;time_window_start_2&quot;:70000,&#xd;
		&quot;time_window_end_2&quot;	:74000&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="time" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;time&quot;:1800&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="custom_fields" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;custom_fields&quot;:{&quot;a&quot;:&quot;1&quot;,&quot;b&quot;:2,&quot;c&quot;:&quot;true&quot;}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="required_skills" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;required_skills&quot;:[&quot;req&quot;,&quot;req2&quot;]&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="is_depot" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;is_depot&quot;:true&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Added Route" enabled="false">
              <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=3BB4AEB65B6F46FE888AD839408E8901</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;.&apos;route_id&apos;
println a.&apos;addresses&apos;.&apos;route_id&apos;
for (i in 0..b.size() - 1){
	if (b[i] !=null){
		vars.put(&apos;RouteID&apos;, b[i].toString())
		break}}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Added Route" enabled="false">
              <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationID}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;.&apos;route_id&apos;

for (i in 0..b.size() - 1){
	if (b[i] !=null){
		vars.put(&apos;RouteID&apos;, b[i].toString())
		break}}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE Route" enabled="false">
              <stringProp name="TestPlan.comments">${RouteId}</stringProp>
              <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}?route_id=08CB299C3C564A968E6AEEBFB89E0CCD</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
n = &apos;${CreatedRouteName}&apos;
println a.size()
println a.&apos;route_id&apos;
for (i in a.size() - 1){if (a.&apos;parameters&apos;[i].&apos;route_name&apos;== n){
	println a.&apos;route_id&apos;;break}}

//c = a.&quot;addresses&quot;.&quot;route_destination_id&quot;[b - 2]
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&quot;addresses&quot;.&quot;route_destination_id&quot;.size()
c = a.&quot;addresses&quot;.&quot;route_destination_id&quot;[b - 2]
vars.put(&apos;DepotForPUT&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[0].toString())
vars.put(&apos;StopForPUT&apos;, c.toString())
vars.put(&apos;AddressesLat&apos;, (a.&quot;addresses&quot;.&quot;lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesLng&apos;, (a.&quot;addresses&quot;.&quot;lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLat&apos;, (a.&quot;addresses&quot;.&quot;curbside_lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLnt&apos;, (a.&quot;addresses&quot;.&quot;curbside_lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;SequenceNo&apos;, a.&quot;addresses&quot;.&quot;sequence_no&quot;[b - 2].toString())
vars.put(&apos;StopForDelete&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[2].toString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="route_id" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">vars.put(&apos;RouteID&apos;, &apos;6647429856DA498439C6F926064B111C&apos;)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="DELETE" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE" enabled="true">
                <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForDelete}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="!Add New Route v5 with &quot;address&quot;" enabled="false">
              <stringProp name="TestPlan.comments">Worked before RR-20 wqs fixed</stringProp>
              <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;parameters&quot;:{&#xd;
	&quot;route_name&quot;:&quot;${RouteName}&quot;,&#xd;
	&quot;route_date&quot;:${RouteDate},&#xd;
	&quot;rt&quot;:true,&#xd;
	&quot;algorithm_type&quot;:100},&#xd;
&quot;addresses&quot;:[${Addresses}]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random Values" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-2123533228">RouteName</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="11884269">
                    <stringProp name="1513857054">${__RandomString(32, ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,)}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Addesses Generation" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">b = &apos;{&quot;address&quot;:&quot;Depot&quot;,&quot;alias&quot;:&quot;Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..${NumberOfStops}){
a = &apos;{&quot;address&quot;:&quot;Address&apos; + i + &apos;&quot;,&quot;alias&quot;:&quot;Stop &apos; + i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
b = (i == ${NumberOfStops})? b + a: b + a + &apos;,\n&apos;}

vars.put(&apos;Addresses&apos;, b)
vars.put(&apos;RouteDate&apos;, a = (new Date().getTime() + 86400000).toString()[0..9])</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new groovy.json.JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;OptimizationID&apos;, a.&apos;optimization_id&apos;.toString())</stringProp>
                <stringProp name="TestPlan.comments">100%works</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5 Added Route" enabled="false">
              <stringProp name="TestPlan.comments">route_id Getting</stringProp>
              <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationID}&amp;wait_for_final_state=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id Getting" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;[0]
vars.put(&apos;RouteID&apos;, b.toString())</stringProp>
                <stringProp name="TestPlan.comments">100%works</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">sleep(30000)</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5 Added Route" enabled="false">
              <stringProp name="TestPlan.comments">route_id Getting</stringProp>
              <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=2A8783DDF6334A509E0431E7527ECF43</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;[0]//.&apos;route_id&apos;
if (&apos;route_id&apos; in b.keySet()){println &apos;Y&apos;}else{println &apos;N&apos;}
//println b.keySet()
vars.put(&apos;RouteID&apos;, b.toString())</stringProp>
                <stringProp name="TestPlan.comments">100%works</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">sleep(30000)</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete" enabled="true"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Add New Route" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${NumberOfRoutes}</stringProp>
              </LoopController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add New Route" enabled="true">
                  <stringProp name="TestPlan.comments">OK</stringProp>
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4OptimizationProblem}?redirect=0</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;parameters&quot;:{&#xd;
	&quot;route_name&quot;:&quot;${RouteName}-${RNN}&quot;,&#xd;
	&quot;route_date&quot;:${RouteDate},&#xd;
	&quot;rt&quot;:true,&#xd;
	&quot;algorithm_type&quot;:${AlgorithmType}},&#xd;
&quot;addresses&quot;:[${Addresses}]&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Addesses Generation" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..${NumberOfStops}){
a = &apos;{&quot;alias&quot;:&quot;Stop &apos; +	i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
b = (i == ${NumberOfStops})? b + a: b + a + &apos;,\n&apos;}

FileName = new File(&apos;${MainDrive}/${MainDir}/${TestDir}/AddedRoutes.csv&apos;)
if (FileName.exists())
{
	FileContent = new File(&apos;${MainDrive}/${MainDir}/${TestDir}/AddedRoutes.csv&apos;).text
	NumberForRoute = (FileContent.count(&apos;,&apos;) + 1).toString()
	n = NumberForRoute.length()
			switch(n){
			case &apos;1&apos;: r = &apos;00&apos; + NumberForRoute;break
			case &apos;2&apos;: r = &apos;0&apos; + NumberForRoute;break
			default: r = &apos;&apos;;break}}
else{r = &apos;001&apos;}

vars.put(&apos;Addresses&apos;, b)
vars.put(&apos;RouteDate&apos;, a = (new Date().getTime() + 86400000).toString()[0..9])
vars.put(&apos;RNN&apos;, r)</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="AlgorithmType" enabled="true">
                    <stringProp name="filename">D:/Route4Me/Config/AlgorithmTypes.csv</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="variableNames">AlgorithmType</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <stringProp name="delimiter">,</stringProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="RouteID" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">a = new groovy.json.JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;OptimizationProblemID&apos;, a.&apos;optimization_problem_id&apos;)</stringProp>
                    <stringProp name="TestPlan.comments">100%works</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Added Route" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemID}&amp;wait_for_final_state=1</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with RouteID Added" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">FileName = new File(&apos;${MainDrive}/${MainDir}/${TestDir}/AddedRoutes.csv&apos;)
a = new groovy.json.JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;.&apos;route_id&apos;
for (i in 0..b.size() - 1){
	if (b[i] !=null){
		FileName.append(b[i].toString() + &apos;,&apos;)
		break}}</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete a Route" enabled="true">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="RouteID for Delete" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">FileName = new File(&apos;${MainDrive}/${MainDir}/${TestDir}/AddedRoutes.csv&apos;)
FileContent = FileName.text
vars.put(&apos;RouteID&apos;, FileContent[0..FileContent.length()-2])
FileName.delete()</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="001" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add New Route" enabled="true">
                <stringProp name="TestPlan.comments">OK</stringProp>
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4OptimizationProblem}?redirect=0</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;parameters&quot;:{&#xd;
	&quot;route_name&quot;:&quot;${RouteName}-${RNN}&quot;,&#xd;
	&quot;route_date&quot;:${RouteDate},&#xd;
	&quot;rt&quot;:true,&#xd;
	&quot;algorithm_type&quot;:${AlgorithmType}},&#xd;
&quot;addresses&quot;:[${Addresses}]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Addesses Generation" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..${NumberOfStops}){
a = &apos;{&quot;alias&quot;:&quot;Stop &apos; +	i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
b = (i == ${NumberOfStops})? b + a: b + a + &apos;,\n&apos;}

FileName = new File(&apos;${MainDrive}/${MainDir}/${TestDir}/AddedRoutes.csv&apos;)
if (FileName.exists())
{
	FileContent = new File(&apos;${MainDrive}/${MainDir}/${TestDir}/AddedRoutes.csv&apos;).text
	NumberForRoute = (FileContent.count(&apos;,&apos;) + 1).toString()
	n = NumberForRoute.length()
			switch(n){
			case &apos;1&apos;: r = &apos;00&apos; + NumberForRoute;break
			case &apos;2&apos;: r = &apos;0&apos; + NumberForRoute;break
			default: r = &apos;&apos;;break}}
else{r = &apos;001&apos;}

vars.put(&apos;Addresses&apos;, b)
vars.put(&apos;RouteDate&apos;, a = (new Date().getTime() + 86400000).toString()[0..9])
vars.put(&apos;RNN&apos;, r)</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="AlgorithmType" enabled="true">
                  <stringProp name="filename">D:/Route4Me/Config/AlgorithmTypes.csv</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="variableNames">AlgorithmType</stringProp>
                  <boolProp name="ignoreFirstLine">false</boolProp>
                  <stringProp name="delimiter">,</stringProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                </CSVDataSet>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="OptimizationProblemID for GET" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">a = new groovy.json.JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;OptimizationProblemID&apos;, a.&apos;optimization_problem_id&apos;)</stringProp>
                  <stringProp name="TestPlan.comments">100%works</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Added Route" enabled="true">
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemID}&amp;wait_for_final_state=1</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;.&apos;route_id&apos;

for (i in 0..b.size() - 1){
	if (b[i] !=null){
		vars.put(&apos;RouteID&apos;, b[i].toString())
		break}}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Route" enabled="true">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;RouteDestinationID&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[0].toString())</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Address" enabled="true">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${RouteDestinationID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="!!!!!!!!!!!!!!!!!!!!!!!Address v5" enabled="false">
              <stringProp name="TestPlan.comments">Template of Add&amp; Addesses Generation</stringProp>
            </GenericController>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add New Route v5" enabled="true">
                <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_name&quot;:&quot;${RouteName}&quot;,&#xd;
		&quot;route_date&quot;:${RouteDate},&#xd;
		&quot;rt&quot;:true,&#xd;
		&quot;algorithm_type&quot;:100},&#xd;
	&quot;addresses&quot;:[&#xd;
		${Addresses}]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random Values" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="-2123533228">RouteName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="11884269">
                      <stringProp name="1513857054">${__RandomString(32, ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,)}</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Addesses Generation" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..${NumberOfStops}){
a = &apos;\t\t{&quot;alias&quot;:&quot;Stop &apos; + i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
b = (i == ${NumberOfStops})? b + a : b + a + &apos;,\n&apos;}

vars.put(&apos;Addresses&apos;, b)
vars.put(&apos;RouteDate&apos;, a = (new Date().getTime() + 86400000).toString()[0..9])</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new groovy.json.JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;OptimizationID&apos;, a.&apos;optimization_id&apos;.toString())
//vars.put(&apos;a1&apos;, &apos;0&apos;)</stringProp>
                  <stringProp name="TestPlan.comments">100%works</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="false">
                <stringProp name="WhileController.condition">${__groovy(${a1} == &apos;1&apos;)}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5 Added Route" enabled="true">
                  <stringProp name="TestPlan.comments">route_id Getting &amp;wait_for_final_state=1</stringProp>
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationID}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;[0]
if (&apos;route_id&apos; in b.keySet()){
	println a.&apos;addresses&apos;[0].&apos;route_id&apos;
	vars.put(&apos;RouteID&apos;, a.&apos;addresses&apos;[0].&apos;route_id&apos;.toString())
	vars.put(&apos;a1&apos;, &apos;1&apos;)
}</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Route" enabled="false">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&quot;addresses&quot;.&quot;route_destination_id&quot;.size()
c = a.&quot;addresses&quot;.&quot;route_destination_id&quot;[b - 2]
vars.put(&apos;DepotForPUT&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[0].toString())
vars.put(&apos;StopForPUT&apos;, c.toString())
vars.put(&apos;AddressesLat&apos;, (a.&quot;addresses&quot;.&quot;lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesLng&apos;, (a.&quot;addresses&quot;.&quot;lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLat&apos;, (a.&quot;addresses&quot;.&quot;curbside_lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLnt&apos;, (a.&quot;addresses&quot;.&quot;curbside_lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;SequenceNo&apos;, a.&quot;addresses&quot;.&quot;sequence_no&quot;[b - 2].toString())
vars.put(&apos;StopForDelete&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[2].toString())</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add New Route v4" enabled="false">
                <stringProp name="TestPlan.comments">OK</stringProp>
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4OptimizationProblem}?redirect=0</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_name&quot;:&quot;${RouteName}&quot;,&#xd;
		&quot;route_date&quot;:${RouteDate},&#xd;
		&quot;rt&quot;:true,&#xd;
		&quot;algorithm_type&quot;:100},&#xd;
	&quot;addresses&quot;:[&#xd;
		${Addresses}]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Api-Key</stringProp>
                      <stringProp name="Header.value">${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random Values" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="-2123533228">RouteName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="11884269">
                      <stringProp name="1513857054">${__RandomString(32, ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,)}</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Addesses Generation" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..${NumberOfStops}){
a = &apos;\t\t{&quot;alias&quot;:&quot;Stop &apos; + i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
b = (i == ${NumberOfStops})? b + a : b + a + &apos;,\n&apos;}

vars.put(&apos;Addresses&apos;, b)
vars.put(&apos;RouteDate&apos;, a = (new Date().getTime() + 86400000).toString()[0..9])</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="OptimizationProblemID for GET" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new groovy.json.JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;OptimizationProblemID&apos;, a.&apos;optimization_problem_id&apos;)</stringProp>
                  <stringProp name="TestPlan.comments">100%works</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4 Added Route" enabled="false">
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemID}&amp;wait_for_final_state=1</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Api-Key</stringProp>
                      <stringProp name="Header.value">${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;.&apos;route_id&apos;

for (i in 0..b.size() - 1){
	if (b[i] !=null){
		vars.put(&apos;RouteID&apos;, b[i].toString())
		break}}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GETv5/v4" enabled="false"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5/Optimizations" enabled="true">
                  <stringProp name="TestPlan.comments">route_id Getting</stringProp>
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}?limit=100</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4/Optimizations" enabled="true">
                  <stringProp name="TestPlan.comments">route_id Getting</stringProp>
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4OptimizationProblem}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Api-Key</stringProp>
                        <stringProp name="Header.value">${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5/Route" enabled="true">
                  <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}?limit=100</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4/Route" enabled="true">
                  <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Api-Key</stringProp>
                        <stringProp name="Header.value">${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>false</responseData>
                      <samplerData>false</samplerData>
                      <xml>false</xml>
                      <fieldNames>true</fieldNames>
                      <responseHeaders>false</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                      <sentBytes>true</sentBytes>
                      <url>true</url>
                      <threadCounts>true</threadCounts>
                      <idleTime>true</idleTime>
                      <connectTime>true</connectTime>
                    </value>
                  </objProp>
                  <stringProp name="filename"></stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="optimization_problem.php" enabled="false"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_problem_id Getting" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;OptimizationProblemIDsForDelete&apos;, JsonOutput.toJson(a.&apos;optimizations&apos;.&apos;optimization_problem_id&apos;).toString())</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE" enabled="true">
                  <stringProp name="TestPlan.comments">route_id Getting</stringProp>
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;optimization_problem_ids&quot;: ${OptimizationProblemIDsForDelete}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OPTIONS" enabled="true">
                  <stringProp name="TestPlan.comments">route_id Getting</stringProp>
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>false</responseData>
                      <samplerData>false</samplerData>
                      <xml>false</xml>
                      <fieldNames>true</fieldNames>
                      <responseHeaders>false</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                      <sentBytes>true</sentBytes>
                      <url>true</url>
                      <threadCounts>true</threadCounts>
                      <idleTime>true</idleTime>
                      <connectTime>true</connectTime>
                    </value>
                  </objProp>
                  <stringProp name="filename"></stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="route.php" enabled="false"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id Getting" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;RouteIDsForDelete1&apos;, JsonOutput.toJson(a.&apos;route_id&apos;).toString())

b = a.&apos;route_id&apos;.toString()
b = b.replace(&apos;[&apos;, &apos;&quot;&apos;)
b = b.replace(&apos;]&apos;, &apos;&quot;&apos;)
vars.put(&apos;RouteIDsForDelete2&apos;, b)

b = b.replace(&apos;&quot;&apos;, &apos;&apos;)
b = b.replace(&apos; &apos;, &apos;&apos;)
vars.put(&apos;RouteIDsForDelete3&apos;, b)</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE1" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;route_id&quot;: ${RouteIDsForDelete2}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE2" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;route_id&quot;: ${RouteIDsForDelete1}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE3" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}?route_id=${RouteIDsForDelete3}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>false</responseData>
                      <samplerData>false</samplerData>
                      <xml>false</xml>
                      <fieldNames>true</fieldNames>
                      <responseHeaders>false</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                      <sentBytes>true</sentBytes>
                      <url>true</url>
                      <threadCounts>true</threadCounts>
                      <idleTime>true</idleTime>
                      <connectTime>true</connectTime>
                    </value>
                  </objProp>
                  <stringProp name="filename"></stringProp>
                </ResultCollector>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OPTIONS" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="exs" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">a = [1, &apos;w&apos;, true]
b1 = &apos;vb&apos;
b2 = false
b3 = 2
b4 = [5, &apos;t&apos;,25,5,15, &apos;t&apos;, &apos;tt&apos;, &apos;uittte&apos;]
c = b4 + b1
println b4-&apos;t&apos;</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Clear screen" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">os = System.getProperty(&quot;os.name&quot;)
println os

//import org.python.util.PythonInterpreter
import org.python.util.*
PythonInterpreter pyInterp = new PythonInterpreter()
pyInterp.exec(&quot;print(&apos;pppp&apos;)&quot;)

import org.apache.jmeter.util.JMeterUtils
import org.jline.terminal.*

Terminal terminal = TerminalBuilder.builder().system(false).streams(System.in, System.out).build()
JMeterUtils.setProperty(&apos;ConsoleWidth&apos;,terminal.getWidth().toString())
println &apos;import org.jline.terminal.*&apos;
println terminal.getWidth().toString()

import org.apache.jmeter.util.JMeterUtils

r = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(&apos;cmd /c mode&apos;).getInputStream())).lines().toList()

a = r[4].reverse()
a = a[0..(a.indexOf(&apos; &apos;) - 1)].reverse()
println a
JMeterUtils.setProperty(&apos;ConsoleWidth&apos;, a)

new ProcessBuilder(&quot;cmd&quot;, &quot;/c&quot;, &quot;MODE&quot;).inheritIO().start().waitFor()
//new ProcessBuilder(&quot;cmd&quot;, &quot;/c&quot;, &quot;echo Q1986AKoM&quot;).inheritIO().start().waitFor()
r = new BufferedReader(new InputStreamReader(Runtime.getRuntime().exec(&apos;cmd&apos;, &apos;/c&apos;, &apos;mode&apos;).getInputStream())).lines().toList()

import org.jline.terminal.*
//terminalWidth = jline.TerminalFactory.get().getWidth()
//terminalWidth = org.jline.terminal.TerminalBuilder.terminal().getWidth()
t1 = TerminalBuilder.terminal().getWidth()
println t1
//println &apos;*&apos;.repeat(158)
//Process p = Runtime.getRuntime().exec(&apos;cmd&apos;, &apos;/c&apos;, &apos;mode 80,25&apos;)
//Process p = Runtime.getRuntime().exec(&apos;cmd&apos;, &apos;/c&apos;, &apos;mode&apos;)
//new ProcessBuilder(&apos;cmd&apos;, &apos;/c&apos;, &apos;mode 80,25&apos;).inheritIO().start().waitFor()
//Runtime.getRuntime().exec(&apos;cmd /c mode&apos;)
//t = TerminalBuilder.terminal().getWidth()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Width" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">import org.apache.jmeter.util.JMeterUtils
import scala.tools.jline.*

terminalWidth = TerminalFactory.get().getWidth()
JMeterUtils.setProperty(&apos;ConsoleWidth&apos;,terminalWidth.toString())

//println terminalWidth
//println terminal.getWidth().toString()</stringProp>
          </JSR223Sampler>
          <hashTree/>
          <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="data" enabled="false">
            <stringProp name="scriptLanguage">groovy</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">TimeZone.setDefault(TimeZone.getTimeZone(&apos;GMT&apos;))
dateAtMidnight = new Date()
a = (dateAtMidnight.clearTime().getTime()).toString()[0..9]
println a</stringProp>
          </JSR223Sampler>
          <hashTree/>
        </hashTree>
        <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Oleh" enabled="false"/>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Authorization" elementType="Header">
                <stringProp name="Header.name">Authorization</stringProp>
                <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="" elementType="Header">
                <stringProp name="Header.name">X-Api-Key</stringProp>
                <stringProp name="Header.value">${APIKey}</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="api/v1/health" enabled="true">
            <stringProp name="TestPlan.comments">Add New Route</stringProp>
            <stringProp name="HTTPSampler.domain">distance-staging.route4me.com</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">api/v1/health</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="api/v1/route/metrics" enabled="true">
            <stringProp name="TestPlan.comments">Add New Route</stringProp>
            <stringProp name="HTTPSampler.domain">distance-staging.route4me.com</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">api/v1/route/CF1B087FC51BD7B279B5F61E3C75F0DE/metrics</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
              <collectionProp name="Arguments.arguments"/>
            </elementProp>
          </HTTPSamplerProxy>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="1" enabled="false"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Request Body" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import org.apache.commons.lang.RandomStringUtils
import groovy.json.*

FileName = new File(&apos;${BodyPath}/${Body}&apos;)
a1 = new JsonSlurper().parse(FileName)
for (i in 0..a1.&apos;addresses&apos;.size() - 1){
	a2 = RandomStringUtils.random(32, (((&apos;A&apos;..&apos;Z&apos;) + (&apos;0&apos;..&apos;9&apos;)).join()).toCharArray())
	a1.&apos;addresses&apos;[i].put(&apos;alias&apos;, a2)
	a1.&apos;addresses&apos;[i].remove(&apos;route_destination_id&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;optimization_problem_id&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;channel_name&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;distance_to_next_destination&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;drive_time_to_next_destination&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;route_id&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;sequence_no&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;tracking_number&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;custom_fields&apos;)
	a1.&apos;addresses&apos;[i].remove(&apos;custom_fields_str_json&apos;)}
a1.&apos;parameters&apos;.put(&apos;route_date&apos;, (new Date().getTime() + 86400000).toString()[0..9].toInteger())
vars.put(&apos;RequestBody&apos;, JsonOutput.prettyPrint(JsonOutput.toJson(a1)).toString())</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
              <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv4}&amp;wait_for_final_state=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response for next Step" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">vars.put(&apos;v4Response&apos;, prev.getResponseDataAsString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response for next Step" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
RespFile = new File(&apos;${TestDir}/Responsev4.json&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv5Legacy" enabled="true">
              <stringProp name="TestPlan.comments">Add New Route</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?redirect=0</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv5&apos;, b)

FileWithIDs = new File(&apos;${TestDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.append(b)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5Legacy" enabled="true">
              <stringProp name="TestPlan.comments">&amp;wait_for_final_state=1</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemIDv5}&amp;wait_for_final_state=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">sleep(10000)</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response for next Step" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
RespFile = new File(&apos;${TestDir}/Responsev5.json&apos;)
RespFile.text = JsonOutput.prettyPrint(JsonOutput.toJson(a)).toString()</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Comparision" enabled="false"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;routes\n**************\n&apos;
FileWithv4 = new File(&apos;${TestDir}/Responsev4.json&apos;)
FileWithv5 = new File(&apos;${TestDir}/Responsev5.json&apos;)

ao1 = new JsonSlurper().parse(FileWithv4).&apos;routes&apos;
a2 = new JsonSlurper().parse(FileWithv5).&apos;routes&apos;;println ao1.size()/*

c22 = []
for (i in 0..ao1.size() - 1){
	b1 = ao1[i].&apos;addresses&apos;.&apos;alias&apos;.sort()
	for (j in 0..a2.size() - 1){
		b2 = a2[j].&apos;addresses&apos;.&apos;alias&apos;.sort()
		if (b1 == b2){c22[i] = a2[j]; a2.remove(a2[j]);break}}}
for (r in 0..ao1.size() - 1){
a1 = ao1[r]
a2 = c22[r]

b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2; println &apos;in v4 (&apos; + a1.size() + &apos;): &apos; + c1
c2 = b2 - b1; println &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2 + &apos;\n***&apos;
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()

println &apos;\nkeys&apos;
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
		
println &apos;\nvalues&apos;
j = 1
for (i in 0..a1.size() - 1){
	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n*****\n&apos;
		j++}}
System.console().readLine &apos;Next?&apos;}*/</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes.parameters" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;routes.parameters\n**************\n&apos;
FileWithv4 = new File(&apos;${TestDir}/Responsev4.json&apos;)
FileWithv5 = new File(&apos;${TestDir}/Responsev5.json&apos;)

ao1 = new JsonSlurper().parse(FileWithv4).&apos;routes&apos;
a2 = new JsonSlurper().parse(FileWithv5).&apos;routes&apos;

c22 = []
for (i in 0..ao1.size() - 1){
	b1 = ao1[i].&apos;addresses&apos;.&apos;alias&apos;.sort()
	for (j in 0..a2.size() - 1){
		b2 = a2[j].&apos;addresses&apos;.&apos;alias&apos;.sort()
		if (b1 == b2){c22[i] = a2[j]; a2.remove(a2[j]);break}}}
for (r in 0..ao1.size() - 1){
a1 = ao1[r].&apos;parameters&apos;
a2 = c22[r].&apos;parameters&apos;

b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2; println &apos;in v4 (&apos; + a1.size() + &apos;): &apos; + c1
c2 = b2 - b1; println &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2 + &apos;\n***&apos;
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()

println &apos;\nkeys&apos;
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
		
println &apos;\nvalues&apos;
j = 1
for (i in 0..a1.size() - 1){
	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n*****\n&apos;
		j++}}
System.console().readLine &apos;Next?&apos;}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes.addresses" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;routes.addresses\n**************\n&apos;
FileWithv4 = new File(&apos;${TestDir}/Responsev4.json&apos;)
FileWithv5 = new File(&apos;${TestDir}/Responsev5.json&apos;)

ao1 = new JsonSlurper().parse(FileWithv4).&apos;routes&apos;
a2 = new JsonSlurper().parse(FileWithv5).&apos;routes&apos;

c22 = []
for (i in 0..ao1.size() - 1){
	b1 = ao1[i].&apos;addresses&apos;.&apos;alias&apos;.sort()
	for (j in 0..a2.size() - 1){
		b2 = a2[j].&apos;addresses&apos;.&apos;alias&apos;.sort()
		if (b1 == b2){c22[i] = a2[j]; a2.remove(a2[j]);break}}}
for (r in 0..ao1.size() - 1){
a1 = ao1[r].&apos;addresses&apos;
a2 = c22[r].&apos;addresses&apos;
b = a1.size()
c1 = []
c2 = []

for (i in 0..b - 1){
	j1 = a1[i].&apos;sequence_no&apos;
	j2 = a2[i].&apos;sequence_no&apos;
	c1[j1] = a1[i]
	c2[j2] = a2[i]}

for (i in 0..b - 1){
b1 = c1[i].keySet()
b2 = c2[i].keySet()
c11 = b1 - b2; println &apos;in v4 (&apos; + c1[i].size() + &apos;): &apos; + c11
c12 = b2 - b1; println &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c12 + &apos;\n***&apos;
for (j in 0..c11.size() - 1){c1[i].remove(c11[j])}
for (j in 0..c12.size() - 1){c2[i].remove(c12[j])}}


println &apos;\nkeys&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
	println &apos;*&apos;}

println &apos;\nvalues&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1) + &apos; (&quot;sequence_no&quot;:&apos; + k + &apos;)&apos;
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){

	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString())
		j++}}
	println &apos;*&apos;}
System.console().readLine &apos;Next?&apos;}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="keys" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;keys&apos;
FileWithv4 = new File(&apos;${TestDir}/Responsev4.json&apos;)
FileWithv5 = new File(&apos;${TestDir}/Responsev5.json&apos;)

a1 = new JsonSlurper().parse(FileWithv4)
a2 = new JsonSlurper().parse(FileWithv5)


b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2; println &apos;in v4 (&apos; + a1.size() + &apos;): &apos; + c1
c2 = b2 - b1; println &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2 + &apos;\n***&apos;
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()
System.console().readLine &apos;Next?&apos;
println &apos;\nkeys&apos;
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
System.console().readLine &apos;Next?&apos;		
println &apos;\nvalues&apos;
j = 1
for (i in 0..a1.size() - 1){
	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n*****\n&apos;
		System.console().readLine &apos;Next?&apos;
		j++}}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="parameters" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;parameters&apos;
FileWithv4 = new File(&apos;${TestDir}/Responsev4.json&apos;)
FileWithv5 = new File(&apos;${TestDir}/Responsev5.json&apos;)

a1 = new JsonSlurper().parse(FileWithv4).&apos;parameters&apos;
a2 = new JsonSlurper().parse(FileWithv5).&apos;parameters&apos;

//a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;parameters&apos;
//a2 = new JsonSlurper().parse(prev.getResponseData()).&apos;parameters&apos;

b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2; println &apos;in v4 (&apos; + a1.size() + &apos;): &apos; + c1
c2 = b2 - b1; println &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2 + &apos;\n***&apos;
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()

println &apos;\nkeys&apos;
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
		
println &apos;\nvalues&apos;
j = 1
for (i in 0..a1.size() - 1){
	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n*****\n&apos;
		j++}}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes.addresses.manifest" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;routes.addresses.manifest&apos;

a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;routes&apos;[0].&apos;addresses&apos;
a2 = new JsonSlurper().parse(prev.getResponseData()).&apos;routes&apos;[0].&apos;addresses&apos;

for (i in 0..a1.size() - 1){
b1 = a1[i].&apos;manifest&apos;
b2 = a2[i].&apos;manifest&apos;
println b1 - b2;println b2 - b1}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes.route_demand_stats" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;routes.route_demand_stats&apos;

a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;routes&apos;[0].&apos;route_demand_stats&apos;
a2 = new JsonSlurper().parse(prev.getResponseData()).&apos;routes&apos;[0].&apos;route_demand_stats&apos;
b1 = a1.sort()
b2 = a2.sort()
println b1 - b2
println b2 - b1</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="addresses" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;addresses&apos;

a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;addresses&apos;
a2 = new JsonSlurper().parse(prev.getResponseData()).&apos;addresses&apos;
b = a1.size()

c1 = []
c2 = []

for (i in 0..b - 1){
	j1 = a1[i].&apos;sequence_no&apos;
	j2 = a2[i].&apos;sequence_no&apos;
	c1[j1] = a1[i]
	c2[j2] = a2[i]}
	
for (i in 0..b - 1){
b1 = c1[i].keySet()
b2 = c2[i].keySet()
c11 = b1 - b2; println &apos;in v4 (&apos; + c1[i].size() + &apos;): &apos; + c11
c22 = b2 - b1; println &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c22 + &apos;\n***&apos;
for (j in 0..c11.size() - 1){c1[i].remove(c11[j])}
for (j in 0..c22.size() - 1){c2[i].remove(c22[j])}}

println &apos;\nkeys&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
	println &apos;*&apos;}

println &apos;\nvalues&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){

	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString())
		j++}}
	println &apos;*&apos;}</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Log" enabled="false"/>
          <hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="JLabel" enabled="false">
              <stringProp name="BeanShellSampler.query">import javax.swing.border.*;
JFrame F = new JFrame();
F.setLayout(null);
F.setBounds(10,10,600,600);
	JPanel Panel=new JPanel();  
	Panel.setLayout(null);
	Panel.setBounds(10,10,500,500);    
		JLabel L=new JLabel(&quot;r&quot;,SwingConstants.CENTER);
		L.setBounds(5,5,250,72);
		L.setForeground(Color.magenta);
		L.setBackground(Color.green);L.setOpaque(true);
		L.setFont(new Font(&quot;Tahoma&quot;, Font.BOLD, 30));
		Border border = BorderFactory.createLineBorder(Color.BLUE, 2);
		L.setBorder(border);
			JLabel L2=new JLabel();
			L2.setBounds(100,267,198,120);
	Panel.add(L);Panel.add(L2);
	F.add(Panel);	
F.setVisible(true);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Frame3" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.swing.*
import javax.swing.* 
a = ${prev.getResponseMessage()}.toString()
println a
myapp = new SwingBuilder()
myframe = myapp.frame(title : &apos;Tutorials Point&apos;, location : [200, 200], 
   size : [400, 300])
   {         
      label(text : a)
   } 

myframe.setVisible(true)</stringProp>
              <stringProp name="TestPlan.comments">, defaultCloseOperation : WindowConstants.EXIT_ON_CLOSE</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//String h=prev.getResponseHeaders();
//String b=prev.getResponseDataAsString();
//String r=prev.getRequestHeaders();//Заголовок запроса
//String r=prev.getResponseCode();
//String r=prev.getSampleLabel();
String r=prev.getResponseMessage();
//r=prev.getSamplerData();//Request body
println(r);</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Frame3" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">
println www</stringProp>
              <stringProp name="TestPlan.comments">, defaultCloseOperation : WindowConstants.EXIT_ON_CLOSE</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.swing.*

a = new SwingBuilder()
Frame1 = a.frame(title: &apos;addresses&apos;, location: [0, 600], size: [1600, 200], visible: true)
	{label(text: &apos; &apos; + prev.getResponseMessage())} 

//Frame1.setVisible(true)
//Frame1.pack()
//Frame1.show()</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="MessageDialog" enabled="false">
              <stringProp name="BeanShellSampler.query">//import javax.swing.*;

ImageIcon icon = new ImageIcon(&quot;d:/test/yt.png&quot;);
JOptionPane.showMessageDialog
(
null,
&quot;message text&quot;,
&quot;title&quot;,
JOptionPane.
ERROR_MESSAGE
//INFORMATION_MESSAGE
//WARNING_MESSAGE
//QUESTION_MESSAGE
//PLAIN_MESSAGE
,null	
//icon for custom icon(JOptionPane must be set PLAIN_MESSAGE), null do not use a custom icon
);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Frame3" enabled="false">
              <stringProp name="BeanShellSampler.query">import java.util.concurrent.*;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;

JFrame jFrame = new JFrame();
JDialog jd = new JDialog(jFrame);
jd.setLayout(new FlowLayout());
jd.setBounds(10, 100, 600, 400);//positionX,positionY,width, height
jd.setIconImage(new ImageIcon(&quot;d:/test/i2.png&quot;).getImage());
jd.setTitle(&quot;TEST NAME&quot;);
jd.getContentPane().setBackground(Color.red);
jd.setVisible(true);//jd.setVisible(false);

</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="In JLabel" enabled="false">
              <stringProp name="BeanShellSampler.query">JFrame f = new JFrame();
f.add(new JLabel(new ImageIcon(&quot;D:/g1.png&quot;)));
f.setBounds(10,10,100,100);
f.setVisible(true);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JLabel" enabled="false">
              <stringProp name="scriptLanguage">beanshell</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

JFrame jFrame = new JFrame();
JDialog jd = new JDialog(jFrame);
jd.setLayout(new FlowLayout());

jd.setBounds(500, 300, 300, 100);//positionX,positionY,width, height
jd.setIconImage(new ImageIcon(&quot;d:/g1.png&quot;).getImage());

JLabel jLabel = new JLabel(&quot;Press button to close the window&quot;);
JButton jButton = new JButton(&quot;Закрыть&quot;);
JButton jButton2 = new JButton(&quot;Закрыть&quot;);
jButton2.addActionListener(new ActionListener(){actionPerformed(ActionEvent e){jd.setVisible(false);}});
jd.add(jLabel);
//jd.add(jButton);
jd.add(jButton2);
jd.setVisible(true);</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//String h=prev.getResponseHeaders();
//String b=prev.getResponseDataAsString();
//String r=prev.getRequestHeaders();//Заголовок запроса
//String r=prev.getResponseCode();
//String r=prev.getSampleLabel();
String r=prev.getResponseMessage();
//r=prev.getSamplerData();//Request body
println(r);</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="log" enabled="false">
              <stringProp name="scriptLanguage">java</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

JFrame jFrame = new JFrame();
JDialog jd = new JDialog(jFrame);
jd.setLayout(new FlowLayout());

jd.setBounds(500, 300, 300, 100);//positionX,positionY,width, height
jd.setIconImage(new ImageIcon(&quot;d:/test/i2.png&quot;).getImage());

JLabel jLabel = new JLabel(&quot;Press button to close the window&quot;);
JButton jButton = new JButton(&quot;Закрыть&quot;);
JButton jButton2 = new JButton(&quot;Закрыть&quot;);
jButton2.addActionListener(new ActionListener(){actionPerformed(ActionEvent e){jd.setVisible(false);}});
jd.add(jLabel);
//jd.add(jButton);
jd.add(jButton2);
jd.setVisible(true);</stringProp>
            </JSR223Sampler>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">//String h=prev.getResponseHeaders();
//String b=prev.getResponseDataAsString();
//String r=prev.getRequestHeaders();//Заголовок запроса
//String r=prev.getResponseCode();
//String r=prev.getSampleLabel();
String r=prev.getResponseMessage();
//r=prev.getSamplerData();//Request body
println(r);</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <BeanShellSampler guiclass="BeanShellSamplerGui" testclass="BeanShellSampler" testname="Custom style" enabled="false">
              <stringProp name="TestPlan.comments">No pause after popup </stringProp>
              <stringProp name="BeanShellSampler.query">import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

JFrame jFrame = new JFrame();
JDialog jd = new JDialog(jFrame);
jd.setLayout(new FlowLayout());

jd.setBounds(500, 300, 300, 100);//positionX,positionY,width, height
jd.setIconImage(new ImageIcon(&quot;d:/test/i2.png&quot;).getImage());

JLabel jLabel = new JLabel(&quot;Press button to close the window&quot;);
JButton jButton = new JButton(&quot;Закрыть&quot;);
JButton jButton2 = new JButton(&quot;Закрыть&quot;);
jButton2.addActionListener(new ActionListener(){actionPerformed(ActionEvent e){jd.setVisible(false);}});
jd.add(jLabel);
//jd.add(jButton);
jd.add(jButton2);
jd.setVisible(true);</stringProp>
            </BeanShellSampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="dialog" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">/*for (i in 0..4){
	
println &apos;)&apos;

username = System.console().readLine &apos;What is your name?&apos;}*/
def readln = javax.swing.JOptionPane.&amp;showInputDialog
def username = readln &apos;What is your name?&apos;
println &quot;Hello $username.&quot;</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Old Single" enabled="false"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;routes&apos;

a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;routes&apos;[0]
a2 = new JsonSlurper().parse(prev.getResponseData()).&apos;routes&apos;[0]

b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2; println &apos;in v4 (&apos; + a1.size() + &apos;): &apos; + c1
c2 = b2 - b1; println &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2 + &apos;\n***&apos;
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()

println &apos;\nkeys&apos;
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
		
println &apos;\nvalues&apos;
j = 1
for (i in 0..a1.size() - 1){
	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n*****\n&apos;
		j++}}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes.addresses" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;routes.addresses&apos;

a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;routes&apos;[0].&apos;addresses&apos;
a2 = new JsonSlurper().parse(prev.getResponseData()).&apos;routes&apos;[0].&apos;addresses&apos;
b = a1.size()
c1 = []
c2 = []

for (i in 0..b - 1){
	j1 = a1[i].&apos;sequence_no&apos;
	j2 = a2[i].&apos;sequence_no&apos;
	c1[j1] = a1[i]
	c2[j2] = a2[i]}
	
for (i in 0..b - 1){
b1 = c1[i].keySet()
b2 = c2[i].keySet()
c11 = b1 - b2; println &apos;in v4 (&apos; + c1[i].size() + &apos;): &apos; + c11
c22 = b2 - b1; println &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c22 + &apos;\n***&apos;
for (j in 0..c11.size() - 1){c1[i].remove(c11[j])}
for (j in 0..c22.size() - 1){c2[i].remove(c22[j])}}

println &apos;\nkeys&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
	println &apos;*&apos;}

println &apos;\nvalues&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){

	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString())
		j++}}
	println &apos;*&apos;}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes.parameters" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*
println &apos;routes.parameters&apos;

a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;routes&apos;[0].&apos;parameters&apos;
a2 = new JsonSlurper().parse(prev.getResponseData()).&apos;routes&apos;[0].&apos;parameters&apos;

b1 = a1.keySet()
b2 = a2.keySet()
c1 = b1 - b2; println &apos;in v4 (&apos; + a1.size() + &apos;): &apos; + c1
c2 = b2 - b1; println &apos;in v5 (&apos; + a2.size() + &apos;): &apos; + c2 + &apos;\n***&apos;
for (i in 0..c1.size() - 1){a1.remove(c1[i])}
for (i in 0..c2.size() - 1){a2.remove(c2[i])}
d1 = a1.sort(); d2 = a2.sort()
b1 = d1.keySet(); b2 = d2.keySet()

println &apos;\nkeys&apos;
j = 1
for (i in 0..a1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
		
println &apos;\nvalues&apos;
j = 1
for (i in 0..a1.size() - 1){
	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString()) + &apos;\n*****\n&apos;
		j++}}</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Drafts Multi" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="addresses" enabled="false"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="1" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;addresses&apos;
b1 = a1.&apos;route_id&apos;.unique(); Depot = a1[0]

c1 = []
for (i in 1..b1.size() - 1){
	c11 = []
	k = 0
	for (j in 0..a1.size() - 1){
		if (b1[i] == a1[j].&apos;route_id&apos;){
			c11[k] = a1[j]
			k++}}
	c1[i - 1] = c11}

d1 = []
println &apos;v4 Routes:&apos;
for (i in 0..c1.size() - 1){
	d11 = []	
	for (j in 0..c1[i].size() - 1){
		k1 = c1[i][j].&apos;sequence_no&apos;
		d11[k1] = c1[i][j]}
	d11[0] = Depot
	d1[i] = d11
	println d1[i].size()}
println &apos;*&apos;

b = JsonOutput.prettyPrint(JsonOutput.toJson(d1))
FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.json&apos;)
if (FileWithAddressesv4.exists()){FileWithAddressesv4.delete()}
FileWithAddressesv4.append(b)

a1 = new JsonSlurper().parse(prev.getResponseData()).&apos;addresses&apos;
b1 = a1.&apos;route_id&apos;.unique()

c1 = []
for (i in 0..b1.size() - 1){
	c11 = []
	k = 0
	for (j in 0..a1.size() - 1){
		if (b1[i] == a1[j].&apos;route_id&apos;){
			c11[k] = a1[j]
			k++}}
	c1[i] = c11}

d1 = []
println &apos;v5Legacy Routes:&apos;
for (i in 0..c1.size() - 1){
	d11 = []	
	for (j in 0..c1[i].size() - 1){
		k1 = c1[i][j].&apos;sequence_no&apos;
		d11[k1] = c1[i][j]}
	d1[i] = d11;println d1[i].size()}

b = JsonOutput.prettyPrint(JsonOutput.toJson(d1))
FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.json&apos;)
if (FileWithAddressesv5.exists()){FileWithAddressesv5.delete()}
FileWithAddressesv5.append(b)</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="2" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
println &apos;addresses&apos;

FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.json&apos;)
FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.json&apos;)
a1 = new JsonSlurper().parse(FileWithAddressesv4)[0]
a2 = new JsonSlurper().parse(FileWithAddressesv5)[4]

b = a2.size()
c1 = []
c2 = []

for (i in 0..b - 1){
	j1 = a1[i].&apos;sequence_no&apos;
	j2 = a2[i].&apos;sequence_no&apos;
	c1[j1] = a1[i]
	c2[j2] = a2[i]}
	
for (i in 0..b - 1){
b1 = c1[i].keySet()
b2 = c2[i].keySet()
c11 = b1 - b2; println &apos;in v4 (&apos; + c1[i].size() + &apos;): &apos; + c11
c22 = b2 - b1; println &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c22 + &apos;\n***&apos;
for (j in 0..c11.size() - 1){c1[i].remove(c11[j])}
for (j in 0..c22.size() - 1){c2[i].remove(c22[j])}}

println &apos;\nkeys&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
	println &apos;*&apos;}

println &apos;\nvalues&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){

	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString())
		j++}}
	println &apos;*&apos;}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="-2" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
println &apos;addresses&apos;

FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.json&apos;)
FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.json&apos;)

a1 = new JsonSlurper().parse(FileWithAddressesv4)[0]
a2 = new JsonSlurper().parse(FileWithAddressesv5)[4]
println a2.&apos;route_id&apos;.unique()/*
println &apos;sequence_no, v4 | v5Legacy&apos;
println &apos;0,&apos; + a1[0].&apos;alias&apos;
for (i in 1..a1.size() - 1){
println i + &apos;,&apos; + a1[i].&apos;alias&apos; + &apos; | &apos; + a2[i].&apos;alias&apos;}
*/</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="3" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

File1 = new File(&apos;${TestDir}/v4Addresses1.txt&apos;)
if (File1.exists()){File1.delete()}
a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;addresses&apos;
k = 0
s = &apos;&apos;
for (i in 0..a1.size() - 1){
	if (a1[i].&apos;route_id&apos; == &apos;F16BB56FE7E78336A6F6B32135B4C3FC&apos;){
		s = s + a1[i].&apos;sequence_no&apos;.toString() + &apos;,&apos; + a1[i].&apos;alias&apos; + &apos;\n&apos;
	k++}}
File1.append(s)



File2 = new File(&apos;${TestDir}/v5Addresses1.txt&apos;)
if (File2.exists()){File2.delete()}
a2 = new JsonSlurper().parse(prev.getResponseData()).&apos;addresses&apos;
k = 0
s = &apos;&apos;
for (i in 0..a2.size() - 1){
	if (a2[i].&apos;route_id&apos; == &apos;E21B0355445F444A978C361FCAEBB0BC&apos;){
		s = s + a2[i].&apos;sequence_no&apos;.toString() + &apos;,&apos; + a2[i].&apos;alias&apos; + &apos;\n&apos;
	k++}}
File2.append(s)</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="-addresses" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.txt&apos;)
if (FileWithAddressesv4.exists()){FileWithAddressesv4.delete()}
a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;addresses&apos;
for (i in 0..a1.size() - 1){
FileWithAddressesv4.append(a1[i] + &apos;\n&apos;)
//println a1[i].&apos;sequence_no&apos; + &apos;,&apos; + a1[i].&apos;alias&apos;
}

FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.txt&apos;)
if (FileWithAddressesv5.exists()){FileWithAddressesv5.delete()}
a1 = new JsonSlurper().parse(prev.getResponseData()).&apos;addresses&apos;
for (i in 0..a1.size() - 1){
FileWithAddressesv5.append(a1[i] + &apos;\n&apos;)
println a1[i].&apos;sequence_no&apos; + &apos;,&apos; + a1[i].&apos;alias&apos;
}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="!addresses" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;addresses&apos;
b1 = a1.&apos;route_id&apos;.unique(); Depot = a1[0]

c1 = []
for (i in 1..b1.size() - 1){
	c11 = []
	k = 0
	for (j in 0..a1.size() - 1){
		if (b1[i] == a1[j].&apos;route_id&apos;){
			c11[k] = a1[j]
			k++}}
	c1[i - 1] = c11}

d1 = []
for (i in 0..c1.size() - 1){
	d11 = []	
	for (j in 0..c1[i].size() - 1){
		k1 = c1[i][j].&apos;sequence_no&apos;
		d11[k1] = c1[i][j]}	//*************************k1-1
	d11[0] = Depot;d1[i] = d11;println d1[i].size()}
//
//b = JsonOutput.toJson(d1)
b = JsonOutput.prettyPrint(JsonOutput.toJson(d1))
FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.json&apos;)
if (FileWithAddressesv4.exists()){FileWithAddressesv4.delete()}
FileWithAddressesv4.append(b)
/*
a1 = new JsonSlurper().parse(FileWithAddressesv4)
println a1[0][0]*/</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="!!addresses" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a1 = new JsonSlurper().parse(prev.getResponseData()).&apos;addresses&apos;
b1 = a1.&apos;route_id&apos;.unique()

c1 = []
for (i in 0..b1.size() - 1){
	c11 = []
	k = 0
	for (j in 0..a1.size() - 1){
		if (b1[i] == a1[j].&apos;route_id&apos;){
			c11[k] = a1[j]
			k++}}
	c1[i] = c11}

d1 = []
for (i in 0..c1.size() - 1){
	d11 = []	
	for (j in 0..c1[i].size() - 1){
		k1 = c1[i][j].&apos;sequence_no&apos;
		d11[k1] = c1[i][j]}
	d1[i] = d11;println d1[i].size()}
//
b = JsonOutput.toJson(d1)
FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.txt&apos;)
if (FileWithAddressesv5.exists()){FileWithAddressesv5.delete()}
FileWithAddressesv5.append(b)
/*
a1 = new JsonSlurper().parse(FileWithAddressesv5)
println a1[0][0]*/</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes.addresses" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

ao1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;routes&apos;
a2 = new JsonSlurper().parse(prev.getResponseData()).&apos;routes&apos;

c22 = []
for (i in 0..ao1.size() - 1){
	b1 = ao1[i].&apos;addresses&apos;.&apos;alias&apos;.sort()
	for (j in 0..a2.size() - 1){
		b2 = a2[j].&apos;addresses&apos;.&apos;alias&apos;.sort()
		if (b1 == b2){c22[i] = a2[j]; a2.remove(a2[j]);break}}}
for (r in 0..ao1.size() - 1){
a1 = ao1[r].&apos;addresses&apos;
a2 = c22[r].&apos;addresses&apos;
//
b = a1.size()
c1 = []
c2 = []

for (i in 0..b - 1){
	j1 = a1[i].&apos;sequence_no&apos;
	j2 = a2[i].&apos;sequence_no&apos;
	c1[j1] = a1[i]
	c2[j2] = a2[i]}
	
for (i in 0..b - 1){
b1 = c1[i].keySet()
b2 = c2[i].keySet()
c11 = b1 - b2; println &apos;in v4 (&apos; + c1[i].size() + &apos;): &apos; + c11
c22 = b2 - b1; println &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c22 + &apos;\n***&apos;
for (j in 0..c11.size() - 1){c1[i].remove(c11[j])}
for (j in 0..c22.size() - 1){c2[i].remove(c22[j])}}

println &apos;\nkeys&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
	println &apos;*&apos;}

println &apos;\nvalues&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){

	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString())
		j++}}
	println &apos;*&apos;}
}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="1-routes" enabled="false"/>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="1" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;addresses&apos;
b1 = a1.&apos;route_id&apos;.unique(); Depot = a1[0]

c1 = []
for (i in 1..b1.size() - 1){
	c11 = []
	k = 0
	for (j in 0..a1.size() - 1){
		if (b1[i] == a1[j].&apos;route_id&apos;){
			c11[k] = a1[j]
			k++}}
	c1[i - 1] = c11}

d1 = []
println &apos;v4 Routes:&apos;
for (i in 0..c1.size() - 1){
	d11 = []	
	for (j in 0..c1[i].size() - 1){
		k1 = c1[i][j].&apos;sequence_no&apos;
		d11[k1] = c1[i][j]}
	d11[0] = Depot
	d1[i] = d11
	println d1[i].size()}
println &apos;*&apos;

b = JsonOutput.prettyPrint(JsonOutput.toJson(d1))
FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.json&apos;)
if (FileWithAddressesv4.exists()){FileWithAddressesv4.delete()}
FileWithAddressesv4.append(b)

a1 = new JsonSlurper().parse(prev.getResponseData()).&apos;addresses&apos;
b1 = a1.&apos;route_id&apos;.unique()

c1 = []
for (i in 0..b1.size() - 1){
	c11 = []
	k = 0
	for (j in 0..a1.size() - 1){
		if (b1[i] == a1[j].&apos;route_id&apos;){
			c11[k] = a1[j]
			k++}}
	c1[i] = c11}

d1 = []
println &apos;v5Legacy Routes:&apos;
for (i in 0..c1.size() - 1){
	d11 = []	
	for (j in 0..c1[i].size() - 1){
		k1 = c1[i][j].&apos;sequence_no&apos;
		d11[k1] = c1[i][j]}
	d1[i] = d11;println d1[i].size()}

b = JsonOutput.prettyPrint(JsonOutput.toJson(d1))
FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.json&apos;)
if (FileWithAddressesv5.exists()){FileWithAddressesv5.delete()}
FileWithAddressesv5.append(b)</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="2" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
println &apos;addresses&apos;

FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.json&apos;)
FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.json&apos;)
a1 = new JsonSlurper().parse(FileWithAddressesv4)[0]
a2 = new JsonSlurper().parse(FileWithAddressesv5)[4]

b = a2.size()
c1 = []
c2 = []

for (i in 0..b - 1){
	j1 = a1[i].&apos;sequence_no&apos;
	j2 = a2[i].&apos;sequence_no&apos;
	c1[j1] = a1[i]
	c2[j2] = a2[i]}
	
for (i in 0..b - 1){
b1 = c1[i].keySet()
b2 = c2[i].keySet()
c11 = b1 - b2; println &apos;in v4 (&apos; + c1[i].size() + &apos;): &apos; + c11
c22 = b2 - b1; println &apos;in v5 (&apos; + c2[i].size() + &apos;): &apos; + c22 + &apos;\n***&apos;
for (j in 0..c11.size() - 1){c1[i].remove(c11[j])}
for (j in 0..c22.size() - 1){c2[i].remove(c22[j])}}

println &apos;\nkeys&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){
	f1 = (d1.(b1[i].toString())).getClass().toString()
	f1 = f1.reverse()
	f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
	f1 = f1.reverse()
		f2 = (d2.(b2[i].toString())).getClass().toString()
		f2 = f2.reverse()
		f2 = f2[0..f2.indexOf(&apos;.&apos;) - 1]
		f2 = f2.reverse()
	if (f1 != f2){
		println j + &apos;) &apos; + b1[i] + &apos;: &apos; + f1 + &apos; | &apos; + f2
		j++}}
	println &apos;*&apos;}

println &apos;\nvalues&apos;
for (k in 0..b - 1){
println &apos;Stop &apos; + (k + 1)
d1 = c1[k].sort()
d2 = c2[k].sort()
b1 = d1.keySet()
b2 = d2.keySet()
j = 1
for (i in 0..d1.size() - 1){

	if (d1.(b1[i].toString()) != d2.(b2[i].toString())){
		println j + &apos;) &apos; + b1[i] + &apos;:&apos;+ d1.(b1[i].toString()) + &apos; | &apos; + d2.(b2[i].toString())
		j++}}
	println &apos;*&apos;}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="-2" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*
println &apos;addresses&apos;

FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.json&apos;)
FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.json&apos;)

a1 = new JsonSlurper().parse(FileWithAddressesv4)[0]
a2 = new JsonSlurper().parse(FileWithAddressesv5)[4]
println a2.&apos;route_id&apos;.unique()/*
println &apos;sequence_no, v4 | v5Legacy&apos;
println &apos;0,&apos; + a1[0].&apos;alias&apos;
for (i in 1..a1.size() - 1){
println i + &apos;,&apos; + a1[i].&apos;alias&apos; + &apos; | &apos; + a2[i].&apos;alias&apos;}
*/</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="3" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

File1 = new File(&apos;${TestDir}/v4Addresses1.txt&apos;)
if (File1.exists()){File1.delete()}
a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;addresses&apos;
k = 0
s = &apos;&apos;
for (i in 0..a1.size() - 1){
	if (a1[i].&apos;route_id&apos; == &apos;F16BB56FE7E78336A6F6B32135B4C3FC&apos;){
		s = s + a1[i].&apos;sequence_no&apos;.toString() + &apos;,&apos; + a1[i].&apos;alias&apos; + &apos;\n&apos;
	k++}}
File1.append(s)



File2 = new File(&apos;${TestDir}/v5Addresses1.txt&apos;)
if (File2.exists()){File2.delete()}
a2 = new JsonSlurper().parse(prev.getResponseData()).&apos;addresses&apos;
k = 0
s = &apos;&apos;
for (i in 0..a2.size() - 1){
	if (a2[i].&apos;route_id&apos; == &apos;E21B0355445F444A978C361FCAEBB0BC&apos;){
		s = s + a2[i].&apos;sequence_no&apos;.toString() + &apos;,&apos; + a2[i].&apos;alias&apos; + &apos;\n&apos;
	k++}}
File2.append(s)</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="-addresses" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.txt&apos;)
if (FileWithAddressesv4.exists()){FileWithAddressesv4.delete()}
a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;addresses&apos;
for (i in 0..a1.size() - 1){
FileWithAddressesv4.append(a1[i] + &apos;\n&apos;)
//println a1[i].&apos;sequence_no&apos; + &apos;,&apos; + a1[i].&apos;alias&apos;
}

FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.txt&apos;)
if (FileWithAddressesv5.exists()){FileWithAddressesv5.delete()}
a1 = new JsonSlurper().parse(prev.getResponseData()).&apos;addresses&apos;
for (i in 0..a1.size() - 1){
FileWithAddressesv5.append(a1[i] + &apos;\n&apos;)
println a1[i].&apos;sequence_no&apos; + &apos;,&apos; + a1[i].&apos;alias&apos;
}</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="!addresses" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a1 = new JsonSlurper().parseText(vars.get(&apos;v4Response&apos;)).&apos;addresses&apos;
b1 = a1.&apos;route_id&apos;.unique(); Depot = a1[0]

c1 = []
for (i in 1..b1.size() - 1){
	c11 = []
	k = 0
	for (j in 0..a1.size() - 1){
		if (b1[i] == a1[j].&apos;route_id&apos;){
			c11[k] = a1[j]
			k++}}
	c1[i - 1] = c11}

d1 = []
for (i in 0..c1.size() - 1){
	d11 = []	
	for (j in 0..c1[i].size() - 1){
		k1 = c1[i][j].&apos;sequence_no&apos;
		d11[k1] = c1[i][j]}	//*************************k1-1
	d11[0] = Depot;d1[i] = d11;println d1[i].size()}
//
//b = JsonOutput.toJson(d1)
b = JsonOutput.prettyPrint(JsonOutput.toJson(d1))
FileWithAddressesv4 = new File(&apos;${TestDir}/v4Addressed.json&apos;)
if (FileWithAddressesv4.exists()){FileWithAddressesv4.delete()}
FileWithAddressesv4.append(b)
/*
a1 = new JsonSlurper().parse(FileWithAddressesv4)
println a1[0][0]*/</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="!!addresses" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a1 = new JsonSlurper().parse(prev.getResponseData()).&apos;addresses&apos;
b1 = a1.&apos;route_id&apos;.unique()

c1 = []
for (i in 0..b1.size() - 1){
	c11 = []
	k = 0
	for (j in 0..a1.size() - 1){
		if (b1[i] == a1[j].&apos;route_id&apos;){
			c11[k] = a1[j]
			k++}}
	c1[i] = c11}

d1 = []
for (i in 0..c1.size() - 1){
	d11 = []	
	for (j in 0..c1[i].size() - 1){
		k1 = c1[i][j].&apos;sequence_no&apos;
		d11[k1] = c1[i][j]}
	d1[i] = d11;println d1[i].size()}
//
b = JsonOutput.toJson(d1)
FileWithAddressesv5 = new File(&apos;${TestDir}/v5Addressed.txt&apos;)
if (FileWithAddressesv5.exists()){FileWithAddressesv5.delete()}
FileWithAddressesv5.append(b)
/*
a1 = new JsonSlurper().parse(FileWithAddressesv5)
println a1[0][0]*/</stringProp>
              </JSR223Sampler>
              <hashTree/>
            </hashTree>
            <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="JSR223 PostProcessor" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">//String h=prev.getResponseHeaders();
//String b=prev.getResponseDataAsString();
//String r=prev.getRequestHeaders();//Заголовок запроса
//String r=prev.getResponseCode();
//String r=prev.getSampleLabel();
String r=prev.getResponseMessage();
//r=prev.getSamplerData();//Request body
println(r);</stringProp>
            </JSR223PostProcessor>
            <hashTree/>
          </hashTree>
          <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
            <boolProp name="ResultCollector.error_logging">false</boolProp>
            <objProp>
              <name>saveConfig</name>
              <value class="SampleSaveConfiguration">
                <time>true</time>
                <latency>true</latency>
                <timestamp>true</timestamp>
                <success>true</success>
                <label>true</label>
                <code>true</code>
                <message>true</message>
                <threadName>true</threadName>
                <dataType>true</dataType>
                <encoding>false</encoding>
                <assertions>true</assertions>
                <subresults>true</subresults>
                <responseData>false</responseData>
                <samplerData>false</samplerData>
                <xml>false</xml>
                <fieldNames>true</fieldNames>
                <responseHeaders>false</responseHeaders>
                <requestHeaders>false</requestHeaders>
                <responseDataOnError>false</responseDataOnError>
                <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                <assertionsResultsToSave>0</assertionsResultsToSave>
                <bytes>true</bytes>
                <sentBytes>true</sentBytes>
                <url>true</url>
                <threadCounts>true</threadCounts>
                <idleTime>true</idleTime>
                <connectTime>true</connectTime>
              </value>
            </objProp>
            <stringProp name="filename"></stringProp>
          </ResultCollector>
          <hashTree/>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Routes v4" enabled="false"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Api-Key</stringProp>
                  <stringProp name="Header.value">${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
              <stringProp name="TestPlan.comments">${RouteId}</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4Routes}?limit=100</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;RouteIDsForDelete1&apos;, JsonOutput.toJson(a.&apos;route_id&apos;).toString())

b = a.&apos;route_id&apos;.toString()
b = b.replace(&apos;[&apos;, &apos;&quot;&apos;)
b = b.replace(&apos;]&apos;, &apos;&quot;&apos;)
vars.put(&apos;RouteIDsForDelete2&apos;, b)

b = b.replace(&apos;&quot;&apos;, &apos;&apos;)
b = b.replace(&apos; &apos;, &apos;&apos;)
vars.put(&apos;RouteIDsForDelete3&apos;, b)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE Route" enabled="true">
              <stringProp name="TestPlan.comments">${RouteId}</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4Routes}?route_id=${RouteIDsForDelete3}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE1" enabled="false">
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4Routes}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;route_id&quot;: ${RouteIDsForDelete1}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE2" enabled="false">
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4Routes}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;route_id&quot;: ${RouteIDsForDelete2}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete Route v5Legacy" enabled="false"/>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="false">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="" elementType="Header">
                  <stringProp name="Header.name">X-Api-Key</stringProp>
                  <stringProp name="Header.value">${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Authorization" elementType="Header">
                  <stringProp name="Header.name">Authorization</stringProp>
                  <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET" enabled="true">
              <stringProp name="TestPlan.comments">${RouteId}</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4Routes}?limit=100</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
println a.&apos;route_id&apos;
vars.put(&apos;RouteIDsForDelete1&apos;, JsonOutput.toJson(a.&apos;route_id&apos;).toString())

b = a.&apos;route_id&apos;.toString()
b = b.replace(&apos;[&apos;, &apos;&quot;&apos;)
b = b.replace(&apos;]&apos;, &apos;&quot;&apos;)
vars.put(&apos;RouteIDsForDelete2&apos;, b)

b = b.replace(&apos;&quot;&apos;, &apos;&apos;)
b = b.replace(&apos; &apos;, &apos;&apos;)
vars.put(&apos;RouteIDsForDelete3&apos;, b)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE2" enabled="true">
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4Routes}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
  &quot;route_id&quot;: ${RouteIDsForDelete2}&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Drafts1" enabled="false"/>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="keys" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">/*
v4 = (new File(&apos;${TestDir}/v4.json&apos;)).text
v5 = (new File(&apos;${TestDir}/v5.json&apos;)).text
a1 = new JsonSlurper().parseText(v4)
a2 = new JsonSlurper().parseText(v5)
*/</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="v4 optimization_problem_id" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">vars.put(&apos;OptimizationProblemIDv4&apos;, &apos;96231A5F0BAC0DE748D48646188624A7&apos;)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="v5 optimization_problem_id" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">vars.put(&apos;OptimizationProblemIDv5&apos;, &apos;2A7BC1D8D6FC47168A1BCB3C0A18FF6E&apos;)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv4" enabled="false">
              <stringProp name="TestPlan.comments">Add New Route</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}?redirect=0</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random Values" enabled="false">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-2123533228">RouteName</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="11884269">
                    <stringProp name="1513857054">${__RandomString(32, ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,)}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Addesses Generation" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..${NumberOfStops}){
a = &apos;\t\t{&quot;alias&quot;:&quot;Stop &apos; + i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
b = (i == ${NumberOfStops})? b + a : b + a + &apos;,\n&apos;}

vars.put(&apos;Addresses&apos;, b)
vars.put(&apos;RouteDate&apos;, a = (new Date().getTime() + 86400000).toString()[0..9])</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv4&apos;, b)

FileWithIDs = new File(&apos;${TestDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.append(b + &apos;\n&apos;)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with Request" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">RequestBody = prev.getSamplerData()
RequestHeader = prev.getRequestHeaders()
r = RequestHeader[0..RequestHeader.length()-2]
r = r.replace(&apos;\n&apos;, &apos;\n\t&apos;)
r = &apos;\t&apos;+ r
RequestBody = RequestBody.replace(&apos;[no cookies]&apos;, &apos;&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
s = RequestBody + &apos;Header\n&apos; + r + &apos;\nResponse\n&apos; + prev.getResponseDataAsString() + &apos;\n***********\n&apos;

FileWithRequests = new File(&apos;${TestDir}/${RequestsFile}&apos;)
FileWithRequests.append(s)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="POSTv5Legacy" enabled="false">
              <stringProp name="TestPlan.comments">Add New Route</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5Legacy}/${v4OptimizationProblem}?redirect=0</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestBody}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random Values" enabled="false">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-2123533228">RouteName</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="11884269">
                    <stringProp name="1513857054">${__RandomString(32, ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,)}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Addesses Generation" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..${NumberOfStops}){
a = &apos;\t\t{&quot;alias&quot;:&quot;Stop &apos; + i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
b = (i == ${NumberOfStops})? b + a : b + a + &apos;,\n&apos;}

vars.put(&apos;Addresses&apos;, b)
vars.put(&apos;RouteDate&apos;, a = (new Date().getTime() + 86400000).toString()[0..9])</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;optimization_problem_id&apos;.toString()
vars.put(&apos;OptimizationProblemIDv5&apos;, b)

FileWithIDs = new File(&apos;${TestDir}/${FileWithOptimizationProblemIDs}&apos;)
FileWithIDs.append(b + &apos;\n&apos;)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id Getting" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;RouteID&apos;, a.&apos;addresses&apos;[0].&apos;route_id&apos;.toString())
vars.put(&apos;v5Response&apos;, prev.getResponseDataAsString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Response for next Step" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">vars.put(&apos;v5Response&apos;, prev.getResponseDataAsString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
              <boolProp name="ResultCollector.error_logging">false</boolProp>
              <objProp>
                <name>saveConfig</name>
                <value class="SampleSaveConfiguration">
                  <time>true</time>
                  <latency>true</latency>
                  <timestamp>true</timestamp>
                  <success>true</success>
                  <label>true</label>
                  <code>true</code>
                  <message>true</message>
                  <threadName>true</threadName>
                  <dataType>true</dataType>
                  <encoding>false</encoding>
                  <assertions>true</assertions>
                  <subresults>true</subresults>
                  <responseData>false</responseData>
                  <samplerData>false</samplerData>
                  <xml>false</xml>
                  <fieldNames>true</fieldNames>
                  <responseHeaders>false</responseHeaders>
                  <requestHeaders>false</requestHeaders>
                  <responseDataOnError>false</responseDataOnError>
                  <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                  <assertionsResultsToSave>0</assertionsResultsToSave>
                  <bytes>true</bytes>
                  <sentBytes>true</sentBytes>
                  <url>true</url>
                  <threadCounts>true</threadCounts>
                  <idleTime>true</idleTime>
                  <connectTime>true</connectTime>
                </value>
              </objProp>
              <stringProp name="filename"></stringProp>
            </ResultCollector>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="optimization_problem.php" enabled="false"/>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OPTIONS" enabled="false">
              <stringProp name="TestPlan.comments">Get Added Route</stringProp>
              <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v4}/${v4OptimizationProblem}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;.&apos;route_id&apos;

for (i in 0..b.size() - 1){
	if (b[i] !=null){
		vars.put(&apos;RouteID&apos;, b[i].toString())
		break}}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with Request" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">RequestBody = prev.getSamplerData()
RequestHeader = prev.getRequestHeaders()
r = RequestHeader[0..RequestHeader.length()-2]
r = r.replace(&apos;\n&apos;, &apos;\n\t&apos;)
r = &apos;\t&apos;+ r
RequestBody = RequestBody.replace(&apos;[no cookies]&apos;, &apos;&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
s = RequestBody + &apos;Header\n&apos; + r + &apos;\nResponse\n&apos; + prev.getResponseDataAsString() + &apos;\n***********\n&apos;

FileWithRequests = new File(&apos;${TestDir}/${RequestsFile}&apos;)
FileWithRequests.append(s)</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Comparison" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

CompFile = new File(&apos;${TestDir}/${ComparFile}&apos;)
//
Comp1 = &apos;v5Legacy Response&apos;
Comp2 = &apos;v4 Response&apos;
//
s = &apos;\n################################################################\n\
Comparison &quot;&apos; + Comp1 + &apos;&quot; and &quot;&apos; + Comp2 + &apos;&quot;\
\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n1.\
Keys difference.\n---------------------------------------------------------\n&apos;

Response1 = new JsonSlurper().parseText(vars.get(&apos;v5Response&apos;))
Response2 = new JsonSlurper().parse(prev.getResponseData())
a = Response1.size() - Response2.size()
switch (a){
	case {a&lt;0}:
		m = Response2.keySet() - Response1.keySet()
		s = s + &apos;Key(s) is(are) contained in &apos;+Comp2+&apos;\n\t&apos; + m + &apos;\n&apos;
		m.forEach(Response2::remove)
		break		
	case {a&gt;0}:
		m = Response1.keySet() - Response2.keySet()
		s = s + &apos;Key(s) is(are) contained in &apos;+Comp1+&apos;\n\t&apos; + m + &apos;\n&apos;
		m.forEach(Response1::remove)
		break
	case {a=0}:
		s = s + &apos;Responses from &apos;+Comp1+&apos; and &apos;+Comp2+&apos; are equal&apos;
		break
	}
b = Response1.keySet()
s = s + &apos;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
2. Values difference.\n-------------------------------------------------------\
\nkey:\n\t&apos;+Comp1+&apos; Value(Value Type)\n\t&apos;+Comp2+&apos; Value(Value Type)\
\n-------------------------------------------------------&apos;
println s
CompFile.append(s + &apos;\n&apos;)
for (i in 0..b.size() - 1){
	if (Response1.(b[i].toString()) != Response2.(b[i].toString())){
		f = (Response1.(b[i].toString())).getClass().toString()
		f = f.reverse()
		f = f[0..f.indexOf(&apos;.&apos;) - 1]
		f = f.reverse()
		
		f1 = (Response2.(b[i].toString())).getClass().toString()
		f1 = f1.reverse()
		f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
		f1 = f1.reverse()
s1 = b[i].toString() + &apos;:\n\t&apos; + Response1.(b[i].toString()) + &apos;(&apos; + f + &apos;)&apos; + &apos;\n\t&apos; + Response2.(b[i].toString()) + &apos;(&apos; + f1 + &apos;)&apos;
println s1
CompFile.append(s1 + &apos;\n&apos;)
		}
}</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="routes" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

Response1 = new JsonSlurper().parseText(vars.get(&apos;v5Response&apos;))
Response2 = new JsonSlurper().parse(prev.getResponseData())

println Response1.&apos;routes&apos;[0].keySet() - Response2.&apos;routes&apos;[0].keySet()
//println Response2.&apos;routes&apos;.keySet() - Response1.&apos;routes&apos;.keySet()</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="addresses" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">import groovy.json.*

Response1 = new JsonSlurper().parseText(vars.get(&apos;v5Response&apos;))
Response2 = new JsonSlurper().parse(prev.getResponseData())

println Response2.&apos;addresses&apos;[0].keySet() - Response2.&apos;addresses&apos;[0].keySet()
//println Response2.&apos;routes&apos;.keySet() - Response1.&apos;routes&apos;.keySet()</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Drafts" enabled="false"/>
          <hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Add Route v5 without Flag" enabled="false"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                  <elementProp name="Authorization" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add New Route v5" enabled="true">
                <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_name&quot;:&quot;${RouteName}&quot;,&#xd;
		&quot;route_date&quot;:${RouteDate},&#xd;
		&quot;rt&quot;:true,&#xd;
		&quot;algorithm_type&quot;:100},&#xd;
	&quot;addresses&quot;:[&#xd;
		${Addresses}]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random Values" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="-2123533228">RouteName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="11884269">
                      <stringProp name="1513857054">${__RandomString(32, ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,)}</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Addesses Generation" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..${NumberOfStops}){
a = &apos;\t\t{&quot;alias&quot;:&quot;Stop &apos; + i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
b = (i == ${NumberOfStops})? b + a : b + a + &apos;,\n&apos;}

vars.put(&apos;Addresses&apos;, b)
vars.put(&apos;RouteDate&apos;, a = (new Date().getTime() + 86400000).toString()[0..9])</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new groovy.json.JsonSlurper().parse(prev.getResponseData())
//vars.put(&apos;OptimizationID&apos;, a.&apos;optimization_id&apos;.toString())
vars.put(&apos;OptimizationID&apos;, a.&apos;optimization_problem_id&apos;.toString())</stringProp>
                  <stringProp name="TestPlan.comments">100%works</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
                <stringProp name="WhileController.condition">${__groovy(${a1} == &apos;1&apos;)}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5 Added Route" enabled="true">
                  <stringProp name="TestPlan.comments">route_id Getting &amp;wait_for_final_state=1</stringProp>
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationID}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = prev.getResponseDataAsString()

if (b.contains(&apos;route_id&apos;)){
	vars.put(&apos;RouteID&apos;, a.&apos;addresses&apos;[0].&apos;route_id&apos;.toString())
	vars.put(&apos;a1&apos;, &apos;1&apos;)
}</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Route" enabled="true">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a[0].&apos;addresses&apos;.&apos;route_destination_id&apos;.size()
c = a[0].&apos;addresses&apos;.&apos;route_destination_id&apos;[b - 2]
vars.put(&apos;DepotForPUT&apos;, a[0].&apos;addresses&apos;.&apos;route_destination_id&apos;[0].toString())
vars.put(&apos;StopForPUT&apos;, c.toString())
vars.put(&apos;AddressesLat&apos;, (a[0].&apos;addresses&apos;.&apos;lat&apos;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesLng&apos;, (a[0].&apos;addresses&apos;.&apos;lng&apos;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLat&apos;, (a[0].&apos;addresses&apos;.&apos;curbside_lat&apos;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLnt&apos;, (a[0].&apos;addresses&apos;.&apos;curbside_lng&apos;[b - 2] + 0.005).toString())
vars.put(&apos;SequenceNo&apos;, a[0].&apos;addresses&apos;.&apos;sequence_no&apos;[b - 2].toString())
vars.put(&apos;StopForDelete&apos;, a[0].&apos;addresses&apos;.&apos;route_destination_id&apos;[2].toString())</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE" enabled="true">
                <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForDelete}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Route" enabled="true">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Route" enabled="true">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Routes v4" enabled="false"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add New Route" enabled="false">
                <stringProp name="TestPlan.comments">OK</stringProp>
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4OptimizationProblem}?redirect=0</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;parameters&quot;:{&#xd;
	&quot;route_name&quot;:&quot;${RouteName}-${RNN}&quot;,&#xd;
	&quot;route_date&quot;:${RouteDate},&#xd;
	&quot;rt&quot;:true,&#xd;
	&quot;algorithm_type&quot;:100},&#xd;
&quot;addresses&quot;:[${Addresses}]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random Values" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="-2123533228">RouteName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="11884269">
                      <stringProp name="1513857054">${__RandomString(32, ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,)}</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Addesses Generation" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..${NumberOfStops}){
a = &apos;{&quot;alias&quot;:&quot;Stop &apos; +	i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
b = (i == ${NumberOfStops})? b + a: b + a + &apos;,\n&apos;}

FileName = new File(&apos;${MainDrive}/${MainDir}/${TestDir}/AddedRoutes.csv&apos;)
if (FileName.exists())
{
	FileContent = new File(&apos;${MainDrive}/${MainDir}/${TestDir}/AddedRoutes.csv&apos;).text
	NumberForRoute = (FileContent.count(&apos;,&apos;) + 1).toString()
	n = NumberForRoute.length()
			switch(n){
			case &apos;1&apos;: r = &apos;00&apos; + NumberForRoute;break
			case &apos;2&apos;: r = &apos;0&apos; + NumberForRoute;break
			default: r = &apos;&apos;;break}}
else{r = &apos;001&apos;}

vars.put(&apos;Addresses&apos;, b)
vars.put(&apos;RouteDate&apos;, a = (new Date().getTime() + 604800000).toString()[0..9])
vars.put(&apos;RNN&apos;, r)</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="AlgorithmType" enabled="false">
                  <stringProp name="filename">D:/Route4Me/Config/AlgorithmTypes.csv</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="variableNames">AlgorithmType</stringProp>
                  <boolProp name="ignoreFirstLine">false</boolProp>
                  <stringProp name="delimiter">,</stringProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                </CSVDataSet>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="OptimizationProblemID for GET" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">a = new groovy.json.JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;OptimizationProblemID&apos;, a.&apos;optimization_problem_id&apos;)</stringProp>
                  <stringProp name="TestPlan.comments">100%works</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Added Route" enabled="false">
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemID}&amp;wait_for_final_state=1</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;.&apos;route_id&apos;

for (i in 0..b.size() - 1){
	if (b[i] !=null){
		vars.put(&apos;RouteID&apos;, b[i].toString())
		break}}
vars.put(&apos;RouteAddResponse&apos;, JsonOutput.toJson(a.&apos;parameters&apos;).toString())
//vars.put(&apos;GETv4Response&apos;, prev.getResponseDataAsString())</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Route" enabled="true">
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;.&apos;route_id&apos;

for (i in 0..b.size() - 1){
	if (b[i] !=null){
		vars.put(&apos;RouteID&apos;, b[i].toString())
		break}}
vars.put(&apos;RouteAddResponse&apos;, JsonOutput.toJson(a.&apos;parameters&apos;).toString())
//vars.put(&apos;GETv4Response&apos;, prev.getResponseDataAsString())</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5/legacy" enabled="true">
                <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with Request" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">RequestBody = prev.getSamplerData()
RequestHeader = prev.getRequestHeaders()
r = RequestHeader[0..RequestHeader.length()-2]
r = r.replace(&apos;\n&apos;, &apos;\n\t&apos;)
r = &apos;\t&apos;+ r
RequestBody = RequestBody.replace(&apos;[no cookies]&apos;, &apos;&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
s = RequestBody + &apos;Header\n&apos; + r + &apos;\nResponse\n&apos; + prev.getResponseDataAsString() + &apos;\n***********\n&apos;

FileWithRequests = new File(&apos;${TestDir}/${RequestsFile}&apos;)
FileWithRequests.append(s)</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="route_id" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">vars.put(&apos;RouteID&apos;, &quot;6647429856DA498439C6F926064B111C&quot;)</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PUT" enabled="true"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="No in Response" enabled="false"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ignore_tw" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;ignore_tw&quot;:true&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="target_duration" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;target_duration&quot;:100&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="target_distance" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;target_distance&quot;:100&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="target_wait_by_tail_size" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;target_wait_by_tail_size&quot;:100&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="balance" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;balance&quot;:{&quot;mode&quot;:&quot;localtions&quot;}&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Don&apos;t work" enabled="false"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="is_upload" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;is_upload&quot;:true}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="ip" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;ip&quot;:1467254080}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="device_id" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;device_id&quot;:&quot;${DeviceID}&quot;}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random Number" enabled="true">
                      <collectionProp name="UserParameters.names">
                        <stringProp name="1173835281">DeviceID</stringProp>
                      </collectionProp>
                      <collectionProp name="UserParameters.thread_values">
                        <collectionProp name="11884269">
                          <stringProp name="1513857054">${__RandomString(32, ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,)}</stringProp>
                        </collectionProp>
                      </collectionProp>
                      <boolProp name="UserParameters.per_iteration">false</boolProp>
                    </UserParameters>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="device_type" enabled="false">
                    <stringProp name="TestPlan.comments">web, iphone, ipad, android_phone, android_tablet</stringProp>
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;device_type&quot;:&quot;iphone&quot;}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_height&quot;:4,&#xd;
		&quot;truck_width&quot;:2.8,&#xd;
		&quot;truck_length&quot;:13.9,&#xd;
		&quot;truck_axles&quot;:1&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_toll_road_usage" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_toll_road_usage&quot;:&quot;YES&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_avoid_ferries" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_avoid_ferries&quot;:&quot;YES&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_hwy_only" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_hwy_only&quot;:&quot;YES&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_lcv" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_lcv&quot;:&quot;YES&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_borders" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_borders&quot;:&quot;YES&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_side_street_adherence" enabled="false">
                    <stringProp name="TestPlan.comments">OFF, MINIMAL, MODERATE, AVERAGE, STRICT, ADHERE, STRONGLYHERE</stringProp>
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_side_street_adherence&quot;:&quot;OFF&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_config" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_config&quot;:&quot;NONE&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_dim_unit" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_dim_unit&quot;:&quot;km&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_type" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_type&quot;:&quot;van&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_weight" enabled="false">
                    <stringProp name="TestPlan.comments">If travel_mode = &apos;Trucking&apos;, specifies the truck weight (required)</stringProp>
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_weight&quot;:21&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="route_time_multiplier" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_time_multiplier&quot;:11&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="route_service_time_multiplier" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_service_time_multiplier&quot;:11&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="optimization_engine" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;optimization_engine&quot;:1&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="slowdowns" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;slowdowns&quot;:{&quot;service_time&quot;:17,&quot;travel_time&quot;:18}&#xd;
}&#xd;
}&#xd;
&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="route_date" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_date&quot;:1703755500&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="distance_unit" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;distance_unit&quot;:&quot;km&quot;&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dev_lat" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;dev_lat&quot;:23.45,&#xd;
		&quot;dev_lng&quot;:123.897&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                </hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Work OK" enabled="false"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="algorithm_type" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;algorithm_type&quot;:9}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member_id" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;member_id&quot;:&quot;1280829&quot;}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dm" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;dm&quot;:11}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dirm" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;dirm&quot;:3}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="parts" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;parts&quot;:3}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="parts_min" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;parts_min&quot;:2}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="avoid" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;avoid&quot;:&quot;Tolls&quot;}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="avoidance_zones" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;avoidance_zones&quot;:[&quot;5D9182203129F97939457A797F173461&quot;]}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="first_drive_then_wait_between_stops" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;first_drive_then_wait_between_stops&quot;:true}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="has_trailer" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;has_trailer&quot;:true}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="trailer_3" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;trailer_weight_t&quot;:100.2,&#xd;
		&quot;limited_weight_t&quot;:98,&#xd;
		&quot;weight_per_axle_t&quot;:64.9&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="truck_hazardous_goods" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;truck_hazardous_goods&quot;:&quot;ST123987&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="min_tour_size" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;min_tour_size&quot;:123&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="max_tour_size" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;max_tour_size&quot;:987&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="optimization_quality" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;optimization_quality&quot;:3&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="uturn" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;uturn&quot;:3&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="leftturn" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;leftturn&quot;:3&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="rightturn" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;rightturn&quot;:3&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="is_dynamic_start_time" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;is_dynamic_start_time&quot;:true&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="disable_optimization" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;disable_optimization&quot;:true&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="lock_last" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;lock_last&quot;:false&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="metric" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;metric&quot;:5&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="optimize" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;optimize&quot;:&quot;timeWithTraffic&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="route_name" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_name&quot;:&quot;PUT-route_name&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="route_time" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_time&quot;:36600&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="rt" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;rt&quot;:false&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="travel_mode" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;travel_mode&quot;:&quot;Walking&quot;&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="vehicle_4" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;vehicle_capacity&quot;:99,&#xd;
		&quot;vehicle_max_cargo_weight&quot;:12000,&#xd;
		&quot;vehicle_max_cargo_volume&quot;:332,&#xd;
		&quot;vehicle_max_distance_mi&quot;:987654&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="subtour_max_revenue" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;subtour_max_revenue&quot;:1020304050&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="vehicle_id" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;vehicle_id&quot;:&quot;E745D0D67858B6EB61C39C4EECE14B8D&quot;&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="route_max_duration" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_max_duration&quot;:99000&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="route_email" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_email&quot;:&quot;route_email@e.com&quot;&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Comparison of &quot;parameters&quot;" enabled="true">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">false</stringProp>
                      <stringProp name="script">import groovy.json.*

CompFile = new File(&apos;${TestDir}/${ComparFile}&apos;)

s = &apos;\n################################################################\n\
Comparison &quot;GET v4 Response&quot; and &quot;GET v5 Response by order_uuid&quot;\
\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n1.\
Keys difference.\n---------------------------------------------------------\n&apos;

GETResponse = new JsonSlurper().parseText(vars.get(&apos;RouteAddResponse&apos;))
b = new JsonSlurper().parse(prev.getResponseData())
GETResponseID = b.&apos;parameters&apos;

a = GETResponse.size() - GETResponseID.size()
switch (a){
	case {a&lt;0}:
		m = GETResponseID.keySet() - GETResponse.keySet()
		s = s + &apos;Key(s) is(are) contained in GET v5 Response by order_uuid\n\t&apos; + m + &apos;\n&apos;
		m.forEach(GETResponseID::remove)
		break		
	case {a&gt;0}:
		m = GETResponse.keySet() - GETResponseID.keySet()
		s = s + &apos;Key(s) is(are) contained in GET v4 Response\n&apos; + m + &apos;\n&apos;
		m.forEach(GETResponse::remove)
		break
	case {a=0}:
		s = s + &apos;Responses from GET v4 and GET v5 are equal&apos;
		break
	}
b = GETResponse.keySet()
s = s + &apos;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
2. Values difference.\n-------------------------------------------------------\
\nkey:\n\tGET v4 Response Value(Value Type)\n\tGET v5 Response by order_uuid Value(Value Type)\
\n-------------------------------------------------------&apos;
println s
CompFile.append(s + &apos;\n&apos;)
for (i in 0..b.size() - 1){
	if (GETResponse.(b[i].toString()) != GETResponseID.(b[i].toString())){
		f = (GETResponse.(b[i].toString())).getClass().toString()
		f = f.reverse()
		f = f[0..f.indexOf(&apos;.&apos;) - 1]
		f = f.reverse()
		
		f1 = (GETResponseID.(b[i].toString())).getClass().toString()
		f1 = f1.reverse()
		f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
		f1 = f1.reverse()
s1 = b[i].toString() + &apos;:\n\t&apos; + GETResponse.(b[i].toString()) + &apos;(&apos; + f + &apos;)&apos; + &apos;\n\t&apos; + GETResponseID.(b[i].toString()) + &apos;(&apos; + f1 + &apos;)&apos;
println s1
CompFile.append(s1 + &apos;\n&apos;)
		}
}</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="---------------override_addresses" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;rightturn&quot;:3&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="---------------bundling" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;is_dynamic_start_time&quot;:true&#xd;
}&#xd;
}&#xd;
</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="---------------advanced_constraints" enabled="false">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_email&quot;:&quot;route_email@e.com&quot;&#xd;
}&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree>
                    <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Comparison 2" enabled="false">
                      <stringProp name="scriptLanguage">groovy</stringProp>
                      <stringProp name="parameters"></stringProp>
                      <stringProp name="filename"></stringProp>
                      <stringProp name="cacheKey">false</stringProp>
                      <stringProp name="script">import groovy.json.*

CompFile = new File(&apos;${TestDir}/${ComparFile}&apos;)

s = &apos;\n################################################################\n\
Comparison &quot;GET v4 Response&quot; and &quot;GET v5 Response by order_uuid&quot;\
\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n1.\
Keys difference.\n---------------------------------------------------------\n&apos;

GETResponse = new JsonSlurper().parseText(vars.get(&apos;GETv4Response&apos;))
GETResponseID = new JsonSlurper().parse(prev.getResponseData())
a = GETResponse.size() - GETResponseID.size()
switch (a){
	case {a&lt;0}:
		m = GETResponseID.keySet() - GETResponse.keySet()
		s = s + &apos;Key(s) is(are) contained in GET v5 Response by order_uuid\n\t&apos; + m + &apos;\n&apos;
		m.forEach(GETResponseID::remove)
		break		
	case {a&gt;0}:
		m = GETResponse.keySet() - GETResponseID.keySet()
		s = s + &apos;Key(s) is(are) contained in GET v4 Response\n&apos; + m + &apos;\n&apos;
		m.forEach(GETResponse::remove)
		break
	case {a=0}:
		s = s + &apos;Responses from GET v4 and GET v5 are equal&apos;
		break
	}
b = GETResponse.keySet()
s = s + &apos;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
2. Values difference.\n-------------------------------------------------------\
\nkey:\n\tGET v4 Response Value(Value Type)\n\tGET v5 Response by order_uuid Value(Value Type)\
\n-------------------------------------------------------&apos;
println s
CompFile.append(s + &apos;\n&apos;)
for (i in 0..b.size() - 1){
	if (GETResponse.(b[i].toString()) != GETResponseID.(b[i].toString())){
		f = (GETResponse.(b[i].toString())).getClass().toString()
		f = f.reverse()
		f = f[0..f.indexOf(&apos;.&apos;) - 1]
		f = f.reverse()
		
		f1 = (GETResponseID.(b[i].toString())).getClass().toString()
		f1 = f1.reverse()
		f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
		f1 = f1.reverse()
s1 = b[i].toString() + &apos;:\n\t&apos; + GETResponse.(b[i].toString()) + &apos;(&apos; + f + &apos;)&apos; + &apos;\n\t&apos; + GETResponseID.(b[i].toString()) + &apos;(&apos; + f1 + &apos;)&apos;
println s1
CompFile.append(s1 + &apos;\n&apos;)
		}
}</stringProp>
                    </JSR223PostProcessor>
                    <hashTree/>
                  </hashTree>
                </hashTree>
              </hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Comparison" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

CompFile = new File(&apos;${TestDir}/${ComparFile}&apos;)

s = &apos;\n################################################################\n\
Comparison &quot;GET v4 Response&quot; and &quot;GET v5 Response by order_uuid&quot;\
\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n1.\
Keys difference.\n---------------------------------------------------------\n&apos;

GETResponse = new JsonSlurper().parseText(vars.get(&apos;GETv4Response&apos;))
GETResponseID = new JsonSlurper().parse(prev.getResponseData())
a = GETResponse.size() - GETResponseID.size()
switch (a){
	case {a&lt;0}:
		m = GETResponseID.keySet() - GETResponse.keySet()
		s = s + &apos;Key(s) is(are) contained in GET v5 Response by order_uuid\n\t&apos; + m + &apos;\n&apos;
		m.forEach(GETResponseID::remove)
		break		
	case {a&gt;0}:
		m = GETResponse.keySet() - GETResponseID.keySet()
		s = s + &apos;Key(s) is(are) contained in GET v4 Response\n&apos; + m + &apos;\n&apos;
		m.forEach(GETResponse::remove)
		break
	case {a=0}:
		s = s + &apos;Responses from GET v4 and GET v5 are equal&apos;
		break
	}
b = GETResponse.keySet()
s = s + &apos;+++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
2. Values difference.\n-------------------------------------------------------\
\nkey:\n\tGET v4 Response Value(Value Type)\n\tGET v5 Response by order_uuid Value(Value Type)\
\n-------------------------------------------------------&apos;
println s
CompFile.append(s + &apos;\n&apos;)
for (i in 0..b.size() - 1){
	if (GETResponse.(b[i].toString()) != GETResponseID.(b[i].toString())){
		f = (GETResponse.(b[i].toString())).getClass().toString()
		f = f.reverse()
		f = f[0..f.indexOf(&apos;.&apos;) - 1]
		f = f.reverse()
		
		f1 = (GETResponseID.(b[i].toString())).getClass().toString()
		f1 = f1.reverse()
		f1 = f1[0..f1.indexOf(&apos;.&apos;) - 1]
		f1 = f1.reverse()
s1 = b[i].toString() + &apos;:\n\t&apos; + GETResponse.(b[i].toString()) + &apos;(&apos; + f + &apos;)&apos; + &apos;\n\t&apos; + GETResponseID.(b[i].toString()) + &apos;(&apos; + f1 + &apos;)&apos;
println s1
CompFile.append(s1 + &apos;\n&apos;)
		}
}</stringProp>
                <stringProp name="TestPlan.comments">Original</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Edited Comparison" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">a = vars.get(&apos;RouteAddResponse&apos;)

println a</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Edited Comparison" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script"></stringProp>
              </JSR223Sampler>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE" enabled="false">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <stringProp name="HTTPSampler.domain">${Stagev4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with Request" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">RequestBody = prev.getSamplerData()
RequestHeader = prev.getRequestHeaders()
r = RequestHeader[0..RequestHeader.length()-2]
r = r.replace(&apos;\n&apos;, &apos;\n\t&apos;)
r = &apos;\t&apos;+ r
RequestBody = RequestBody.replace(&apos;[no cookies]&apos;, &apos;&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
s = RequestBody + &apos;Header\n&apos; + r + &apos;\nResponse\n&apos; + prev.getResponseDataAsString() + &apos;\n***********\n&apos;

FileWithRequests = new File(&apos;${TestDir}/${RequestsFile}&apos;)
FileWithRequests.append(s)</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET route_destination_id" enabled="false">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&quot;addresses&quot;.&quot;route_destination_id&quot;.size()
c = a.&quot;addresses&quot;.&quot;route_destination_id&quot;[b - 2]
vars.put(&apos;DepotForPUT&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[0].toString())
vars.put(&apos;StopForPUT&apos;, c.toString())
vars.put(&apos;AddressesLat&apos;, (a.&quot;addresses&quot;.&quot;lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesLng&apos;, (a.&quot;addresses&quot;.&quot;lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLat&apos;, (a.&quot;addresses&quot;.&quot;curbside_lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLnt&apos;, (a.&quot;addresses&quot;.&quot;curbside_lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;SequenceNo&apos;, a.&quot;addresses&quot;.&quot;sequence_no&quot;[b - 2].toString())
vars.put(&apos;StopForDelete&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[2].toString())</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GETs" enabled="false"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Route" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
                  <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&quot;addresses&quot;.&quot;route_destination_id&quot;.size()
c = a.&quot;addresses&quot;.&quot;route_destination_id&quot;[b - 2]
vars.put(&apos;DepotForPUT&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[0].toString())
vars.put(&apos;StopForPUT&apos;, c.toString())
vars.put(&apos;AddressesLat&apos;, (a.&quot;addresses&quot;.&quot;lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesLng&apos;, (a.&quot;addresses&quot;.&quot;lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLat&apos;, (a.&quot;addresses&quot;.&quot;curbside_lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLnt&apos;, (a.&quot;addresses&quot;.&quot;curbside_lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;SequenceNo&apos;, a.&quot;addresses&quot;.&quot;sequence_no&quot;[b - 2].toString())
vars.put(&apos;StopForDelete&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[2].toString())</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Api-Key</stringProp>
                        <stringProp name="Header.value">${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="false">
                  <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=6647429856DA498439C6F926064B111C</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&quot;addresses&quot;.&quot;route_destination_id&quot;.size()
c = a.&quot;addresses&quot;.&quot;route_destination_id&quot;[b - 2]
vars.put(&apos;DepotForPUT&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[0].toString())
vars.put(&apos;StopForPUT&apos;, c.toString())
vars.put(&apos;AddressesLat&apos;, (a.&quot;addresses&quot;.&quot;lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesLng&apos;, (a.&quot;addresses&quot;.&quot;lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLat&apos;, (a.&quot;addresses&quot;.&quot;curbside_lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLnt&apos;, (a.&quot;addresses&quot;.&quot;curbside_lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;SequenceNo&apos;, a.&quot;addresses&quot;.&quot;sequence_no&quot;[b - 2].toString())
vars.put(&apos;StopForDelete&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[2].toString())</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Api-Key</stringProp>
                        <stringProp name="Header.value">${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5/legacy" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with Request" enabled="false">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">RequestBody = prev.getSamplerData()
RequestHeader = prev.getRequestHeaders()
r = RequestHeader[0..RequestHeader.length()-2]
r = r.replace(&apos;\n&apos;, &apos;\n\t&apos;)
r = &apos;\t&apos;+ r
RequestBody = RequestBody.replace(&apos;[no cookies]&apos;, &apos;&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
s = RequestBody + &apos;Header\n&apos; + r + &apos;\nResponse\n&apos; + prev.getResponseDataAsString() + &apos;\n***********\n&apos;

FileWithRequests = new File(&apos;${TestDir}/${RequestsFile}&apos;)
FileWithRequests.append(s)</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5/legacy" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}?route_id=6647429856DA498439C6F926064B111C</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with Request" enabled="false">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">RequestBody = prev.getSamplerData()
RequestHeader = prev.getRequestHeaders()
r = RequestHeader[0..RequestHeader.length()-2]
r = r.replace(&apos;\n&apos;, &apos;\n\t&apos;)
r = &apos;\t&apos;+ r
RequestBody = RequestBody.replace(&apos;[no cookies]&apos;, &apos;&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
s = RequestBody + &apos;Header\n&apos; + r + &apos;\nResponse\n&apos; + prev.getResponseDataAsString() + &apos;\n***********\n&apos;

FileWithRequests = new File(&apos;${TestDir}/${RequestsFile}&apos;)
FileWithRequests.append(s)</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Address" enabled="false"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4" enabled="true">
                  <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=6647429856DA498439C6F926064B111C&amp;route_destination_id=768335520</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&quot;addresses&quot;.&quot;route_destination_id&quot;.size()
c = a.&quot;addresses&quot;.&quot;route_destination_id&quot;[b - 2]
vars.put(&apos;DepotForPUT&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[0].toString())
vars.put(&apos;StopForPUT&apos;, c.toString())
vars.put(&apos;AddressesLat&apos;, (a.&quot;addresses&quot;.&quot;lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesLng&apos;, (a.&quot;addresses&quot;.&quot;lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLat&apos;, (a.&quot;addresses&quot;.&quot;curbside_lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLnt&apos;, (a.&quot;addresses&quot;.&quot;curbside_lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;SequenceNo&apos;, a.&quot;addresses&quot;.&quot;sequence_no&quot;[b - 2].toString())
vars.put(&apos;StopForDelete&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[2].toString())</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Api-Key</stringProp>
                        <stringProp name="Header.value">${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5/legacy" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Address}?route_id=6647429856DA498439C6F926064B111C&amp;route_destination_id=768335520</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">Authorization</stringProp>
                        <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with Request" enabled="false">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">RequestBody = prev.getSamplerData()
RequestHeader = prev.getRequestHeaders()
r = RequestHeader[0..RequestHeader.length()-2]
r = r.replace(&apos;\n&apos;, &apos;\n\t&apos;)
r = &apos;\t&apos;+ r
RequestBody = RequestBody.replace(&apos;[no cookies]&apos;, &apos;&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
RequestBody = RequestBody.replace(&apos;\n\n&apos;, &apos;\n&apos;)
s = RequestBody + &apos;Header\n&apos; + r + &apos;\nResponse\n&apos; + prev.getResponseDataAsString() + &apos;\n***********\n&apos;

FileWithRequests = new File(&apos;${TestDir}/${RequestsFile}&apos;)
FileWithRequests.append(s)</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5 route_destination_id" enabled="false">
              <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;[0].&apos;route_destination_id&apos;.size()
println b
c = a.&apos;addresses&apos;[0].&apos;route_destination_id&apos;[b - 2]
vars.put(&apos;DepotForPUT&apos;, a.&apos;addresses&apos;[0].&apos;route_destination_id&apos;[0].toString())
vars.put(&apos;StopForPUT&apos;, c.toString())/*
vars.put(&apos;AddressesLat&apos;, (a.&quot;addresses&quot;.&quot;lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesLng&apos;, (a.&quot;addresses&quot;.&quot;lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLat&apos;, (a.&quot;addresses&quot;.&quot;curbside_lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLnt&apos;, (a.&quot;addresses&quot;.&quot;curbside_lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;SequenceNo&apos;, a.&quot;addresses&quot;.&quot;sequence_no&quot;[b - 2].toString())
vars.put(&apos;StopForDelete&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[2].toString())*/</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="PUT" enabled="false"/>
            <hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Don&apos;t work" enabled="false"/>
              <hashTree>
                <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="No in Response" enabled="true"/>
                <hashTree>
                  <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="-route_name" enabled="true">
                    <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                    <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                    <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                    <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                    <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                    <stringProp name="HTTPSampler.method">PUT</stringProp>
                    <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                    <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                    <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                      <collectionProp name="Arguments.arguments">
                        <elementProp name="" elementType="HTTPArgument">
                          <boolProp name="HTTPArgument.always_encode">false</boolProp>
                          <stringProp name="Argument.value">{&#xd;
		&quot;route_name&quot;:&quot;PUTroute_name&quot;&#xd;
}</stringProp>
                          <stringProp name="Argument.metadata">=</stringProp>
                        </elementProp>
                      </collectionProp>
                    </elementProp>
                  </HTTPSamplerProxy>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="!is_departed" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;is_departed&quot;:true&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="!tracking_number" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;tracking_number&quot;:&quot;${TrackingNumber}&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random Number" enabled="true">
                    <collectionProp name="UserParameters.names">
                      <stringProp name="868519168">TrackingNumber</stringProp>
                    </collectionProp>
                    <collectionProp name="UserParameters.thread_values">
                      <collectionProp name="328221088">
                        <stringProp name="-1232936257">${__RandomString(8, ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,)}</stringProp>
                      </collectionProp>
                    </collectionProp>
                    <boolProp name="UserParameters.per_iteration">false</boolProp>
                  </UserParameters>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="!additional_status" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;additional_status&quot;:&quot;PUTaddst&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Work OK" enabled="true"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="is_visited" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;is_visited&quot;:true&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="alias/Depot" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${DepotForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
	&quot;alias&quot;:&quot;PUT Depot1&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="alias/Stop" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;alias&quot;:&quot;PUT alias&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="member_id" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;member_id&quot;:1234567&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="address" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;address&quot;:&quot;PUT address&quot;&#xd;
}&#xd;
</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Geo" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;lat&quot;:${AddressesLat},&#xd;
		&quot;lng&quot;:${AddressesLng},&#xd;
		&quot;curbside_lat&quot;:${AddressesCurbsideLat},&#xd;
		&quot;curbside_lng&quot;:${AddressesCurbsideLnt}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="priority" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;priority&quot;:1&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="sequence_no" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;sequence_no&quot;:${SequenceNo}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="contact_id" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;contact_id&quot;:1&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="order_id" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;order_id&quot;:2&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="address_stop_type" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;address_stop_type&quot;:&quot;MEETUP&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="group" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;group&quot;:&quot;PUT group&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="customer_po" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;customer_po&quot;:&quot;PUT_po&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="invoice_no" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;invoice_no&quot;:&quot;PUTInvoice_no&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="reference_no" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;reference_no&quot;:&quot;PUTreference_no&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="order_no" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;order_no&quot;:&quot;PUTorder_no&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="weight/cost/revenue/cube" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;weight&quot;:1.1,&#xd;
		&quot;cost&quot;:2.2,&#xd;
		&quot;revenue&quot;:3.3,&#xd;
		&quot;cube&quot;:4.4&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="pieces" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;pieces&quot;:106&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="first_name/last_name/email/phone" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;first_name&quot;:&quot;PUTfirst_name&quot;,&#xd;
		&quot;last_name&quot;:&quot;PUTlast_name&quot;,&#xd;
		&quot;email&quot;:&quot;PUTemail@m.com&quot;,&#xd;
		&quot;phone&quot;:&quot;1234567890&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="pickup" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;pickup&quot;:&quot;PUTpickup&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="dropoff" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;dropoff&quot;:&quot;PUTdropoff&quot;&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="joint" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;joint&quot;:0&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="time_window_" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;time_window_start&quot;:50000,&#xd;
		&quot;time_window_end&quot;:54000,&#xd;
		&quot;time_window_start_2&quot;:70000,&#xd;
		&quot;time_window_end_2&quot;	:74000&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="time" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;time&quot;:1800&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="custom_fields" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;custom_fields&quot;:{&quot;a&quot;:&quot;1&quot;,&quot;b&quot;:2,&quot;c&quot;:&quot;true&quot;}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="required_skills" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;required_skills&quot;:[&quot;req&quot;,&quot;req2&quot;]&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="is_depot" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForPUT}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">PUT</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
		&quot;is_depot&quot;:true&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Added Route" enabled="false">
              <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=3BB4AEB65B6F46FE888AD839408E8901</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;.&apos;route_id&apos;
println a.&apos;addresses&apos;.&apos;route_id&apos;
for (i in 0..b.size() - 1){
	if (b[i] !=null){
		vars.put(&apos;RouteID&apos;, b[i].toString())
		break}}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Added Route" enabled="false">
              <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationID}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;.&apos;route_id&apos;

for (i in 0..b.size() - 1){
	if (b[i] !=null){
		vars.put(&apos;RouteID&apos;, b[i].toString())
		break}}</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE Route" enabled="false">
              <stringProp name="TestPlan.comments">${RouteId}</stringProp>
              <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}?route_id=08CB299C3C564A968E6AEEBFB89E0CCD</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">DELETE</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
n = &apos;${CreatedRouteName}&apos;
println a.size()
println a.&apos;route_id&apos;
for (i in a.size() - 1){if (a.&apos;parameters&apos;[i].&apos;route_name&apos;== n){
	println a.&apos;route_id&apos;;break}}

//c = a.&quot;addresses&quot;.&quot;route_destination_id&quot;[b - 2]
</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&quot;addresses&quot;.&quot;route_destination_id&quot;.size()
c = a.&quot;addresses&quot;.&quot;route_destination_id&quot;[b - 2]
vars.put(&apos;DepotForPUT&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[0].toString())
vars.put(&apos;StopForPUT&apos;, c.toString())
vars.put(&apos;AddressesLat&apos;, (a.&quot;addresses&quot;.&quot;lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesLng&apos;, (a.&quot;addresses&quot;.&quot;lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLat&apos;, (a.&quot;addresses&quot;.&quot;curbside_lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLnt&apos;, (a.&quot;addresses&quot;.&quot;curbside_lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;SequenceNo&apos;, a.&quot;addresses&quot;.&quot;sequence_no&quot;[b - 2].toString())
vars.put(&apos;StopForDelete&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[2].toString())</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
            </hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="route_id" enabled="false">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">vars.put(&apos;RouteID&apos;, &apos;6647429856DA498439C6F926064B111C&apos;)</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="DELETE" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE" enabled="true">
                <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${StopForDelete}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="!Add New Route v5 with &quot;address&quot;" enabled="false">
              <stringProp name="TestPlan.comments">Worked before RR-20 wqs fixed</stringProp>
              <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">{&#xd;
&quot;parameters&quot;:{&#xd;
	&quot;route_name&quot;:&quot;${RouteName}&quot;,&#xd;
	&quot;route_date&quot;:${RouteDate},&#xd;
	&quot;rt&quot;:true,&#xd;
	&quot;algorithm_type&quot;:100},&#xd;
&quot;addresses&quot;:[${Addresses}]&#xd;
}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random Values" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="-2123533228">RouteName</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="11884269">
                    <stringProp name="1513857054">${__RandomString(32, ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,)}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Addesses Generation" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">b = &apos;{&quot;address&quot;:&quot;Depot&quot;,&quot;alias&quot;:&quot;Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..${NumberOfStops}){
a = &apos;{&quot;address&quot;:&quot;Address&apos; + i + &apos;&quot;,&quot;alias&quot;:&quot;Stop &apos; + i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
b = (i == ${NumberOfStops})? b + a: b + a + &apos;,\n&apos;}

vars.put(&apos;Addresses&apos;, b)
vars.put(&apos;RouteDate&apos;, a = (new Date().getTime() + 86400000).toString()[0..9])</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new groovy.json.JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;OptimizationID&apos;, a.&apos;optimization_id&apos;.toString())</stringProp>
                <stringProp name="TestPlan.comments">100%works</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5 Added Route" enabled="false">
              <stringProp name="TestPlan.comments">route_id Getting</stringProp>
              <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationID}&amp;wait_for_final_state=1</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id Getting" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;[0]
vars.put(&apos;RouteID&apos;, b.toString())</stringProp>
                <stringProp name="TestPlan.comments">100%works</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">sleep(30000)</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5 Added Route" enabled="false">
              <stringProp name="TestPlan.comments">route_id Getting</stringProp>
              <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=2A8783DDF6334A509E0431E7527ECF43</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
            </HTTPSamplerProxy>
            <hashTree>
              <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id Getting" enabled="true">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;[0]//.&apos;route_id&apos;
if (&apos;route_id&apos; in b.keySet()){println &apos;Y&apos;}else{println &apos;N&apos;}
//println b.keySet()
vars.put(&apos;RouteID&apos;, b.toString())</stringProp>
                <stringProp name="TestPlan.comments">100%works</stringProp>
              </JSR223PostProcessor>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
                <stringProp name="scriptLanguage">groovy</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">true</stringProp>
                <stringProp name="script">sleep(30000)</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="Delete" enabled="true"/>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">X-Api-Key</stringProp>
                    <stringProp name="Header.value">${APIKey}</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Add New Route" enabled="true">
                <boolProp name="LoopController.continue_forever">true</boolProp>
                <stringProp name="LoopController.loops">${NumberOfRoutes}</stringProp>
              </LoopController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add New Route" enabled="true">
                  <stringProp name="TestPlan.comments">OK</stringProp>
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4OptimizationProblem}?redirect=0</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">POST</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
&quot;parameters&quot;:{&#xd;
	&quot;route_name&quot;:&quot;${RouteName}-${RNN}&quot;,&#xd;
	&quot;route_date&quot;:${RouteDate},&#xd;
	&quot;rt&quot;:true,&#xd;
	&quot;algorithm_type&quot;:${AlgorithmType}},&#xd;
&quot;addresses&quot;:[${Addresses}]&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Addesses Generation" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..${NumberOfStops}){
a = &apos;{&quot;alias&quot;:&quot;Stop &apos; +	i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
b = (i == ${NumberOfStops})? b + a: b + a + &apos;,\n&apos;}

FileName = new File(&apos;${MainDrive}/${MainDir}/${TestDir}/AddedRoutes.csv&apos;)
if (FileName.exists())
{
	FileContent = new File(&apos;${MainDrive}/${MainDir}/${TestDir}/AddedRoutes.csv&apos;).text
	NumberForRoute = (FileContent.count(&apos;,&apos;) + 1).toString()
	n = NumberForRoute.length()
			switch(n){
			case &apos;1&apos;: r = &apos;00&apos; + NumberForRoute;break
			case &apos;2&apos;: r = &apos;0&apos; + NumberForRoute;break
			default: r = &apos;&apos;;break}}
else{r = &apos;001&apos;}

vars.put(&apos;Addresses&apos;, b)
vars.put(&apos;RouteDate&apos;, a = (new Date().getTime() + 86400000).toString()[0..9])
vars.put(&apos;RNN&apos;, r)</stringProp>
                  </JSR223PreProcessor>
                  <hashTree/>
                  <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="AlgorithmType" enabled="true">
                    <stringProp name="filename">D:/Route4Me/Config/AlgorithmTypes.csv</stringProp>
                    <stringProp name="fileEncoding"></stringProp>
                    <stringProp name="variableNames">AlgorithmType</stringProp>
                    <boolProp name="ignoreFirstLine">false</boolProp>
                    <stringProp name="delimiter">,</stringProp>
                    <boolProp name="quotedData">false</boolProp>
                    <boolProp name="recycle">true</boolProp>
                    <boolProp name="stopThread">false</boolProp>
                    <stringProp name="shareMode">shareMode.all</stringProp>
                  </CSVDataSet>
                  <hashTree/>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="RouteID" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">a = new groovy.json.JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;OptimizationProblemID&apos;, a.&apos;optimization_problem_id&apos;)</stringProp>
                    <stringProp name="TestPlan.comments">100%works</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Added Route" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemID}&amp;wait_for_final_state=1</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="File with RouteID Added" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">FileName = new File(&apos;${MainDrive}/${MainDir}/${TestDir}/AddedRoutes.csv&apos;)
a = new groovy.json.JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;.&apos;route_id&apos;
for (i in 0..b.size() - 1){
	if (b[i] !=null){
		FileName.append(b[i].toString() + &apos;,&apos;)
		break}}</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Delete a Route" enabled="true">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">DELETE</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="RouteID for Delete" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">FileName = new File(&apos;${MainDrive}/${MainDir}/${TestDir}/AddedRoutes.csv&apos;)
FileContent = FileName.text
vars.put(&apos;RouteID&apos;, FileContent[0..FileContent.length()-2])
FileName.delete()</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="001" enabled="false"/>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add New Route" enabled="true">
                <stringProp name="TestPlan.comments">OK</stringProp>
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4OptimizationProblem}?redirect=0</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
&quot;parameters&quot;:{&#xd;
	&quot;route_name&quot;:&quot;${RouteName}-${RNN}&quot;,&#xd;
	&quot;route_date&quot;:${RouteDate},&#xd;
	&quot;rt&quot;:true,&#xd;
	&quot;algorithm_type&quot;:${AlgorithmType}},&#xd;
&quot;addresses&quot;:[${Addresses}]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Addesses Generation" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..${NumberOfStops}){
a = &apos;{&quot;alias&quot;:&quot;Stop &apos; +	i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
b = (i == ${NumberOfStops})? b + a: b + a + &apos;,\n&apos;}

FileName = new File(&apos;${MainDrive}/${MainDir}/${TestDir}/AddedRoutes.csv&apos;)
if (FileName.exists())
{
	FileContent = new File(&apos;${MainDrive}/${MainDir}/${TestDir}/AddedRoutes.csv&apos;).text
	NumberForRoute = (FileContent.count(&apos;,&apos;) + 1).toString()
	n = NumberForRoute.length()
			switch(n){
			case &apos;1&apos;: r = &apos;00&apos; + NumberForRoute;break
			case &apos;2&apos;: r = &apos;0&apos; + NumberForRoute;break
			default: r = &apos;&apos;;break}}
else{r = &apos;001&apos;}

vars.put(&apos;Addresses&apos;, b)
vars.put(&apos;RouteDate&apos;, a = (new Date().getTime() + 86400000).toString()[0..9])
vars.put(&apos;RNN&apos;, r)</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="AlgorithmType" enabled="true">
                  <stringProp name="filename">D:/Route4Me/Config/AlgorithmTypes.csv</stringProp>
                  <stringProp name="fileEncoding"></stringProp>
                  <stringProp name="variableNames">AlgorithmType</stringProp>
                  <boolProp name="ignoreFirstLine">false</boolProp>
                  <stringProp name="delimiter">,</stringProp>
                  <boolProp name="quotedData">false</boolProp>
                  <boolProp name="recycle">true</boolProp>
                  <boolProp name="stopThread">false</boolProp>
                  <stringProp name="shareMode">shareMode.all</stringProp>
                </CSVDataSet>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="OptimizationProblemID for GET" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">a = new groovy.json.JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;OptimizationProblemID&apos;, a.&apos;optimization_problem_id&apos;)</stringProp>
                  <stringProp name="TestPlan.comments">100%works</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Get Added Route" enabled="true">
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemID}&amp;wait_for_final_state=1</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;.&apos;route_id&apos;

for (i in 0..b.size() - 1){
	if (b[i] !=null){
		vars.put(&apos;RouteID&apos;, b[i].toString())
		break}}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Route" enabled="true">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;RouteDestinationID&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[0].toString())</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Address" enabled="true">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Address}?route_id=${RouteID}&amp;route_destination_id=${RouteDestinationID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree/>
            </hashTree>
            <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="!!!!!!!!!!!!!!!!!!!!!!!Address v5" enabled="false">
              <stringProp name="TestPlan.comments">Template of Add&amp; Addesses Generation</stringProp>
            </GenericController>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Authorization</stringProp>
                    <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add New Route v5" enabled="true">
                <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_name&quot;:&quot;${RouteName}&quot;,&#xd;
		&quot;route_date&quot;:${RouteDate},&#xd;
		&quot;rt&quot;:true,&#xd;
		&quot;algorithm_type&quot;:100},&#xd;
	&quot;addresses&quot;:[&#xd;
		${Addresses}]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Authorization</stringProp>
                      <stringProp name="Header.value">Bearer ${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random Values" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="-2123533228">RouteName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="11884269">
                      <stringProp name="1513857054">${__RandomString(32, ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,)}</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Addesses Generation" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..${NumberOfStops}){
a = &apos;\t\t{&quot;alias&quot;:&quot;Stop &apos; + i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
b = (i == ${NumberOfStops})? b + a : b + a + &apos;,\n&apos;}

vars.put(&apos;Addresses&apos;, b)
vars.put(&apos;RouteDate&apos;, a = (new Date().getTime() + 86400000).toString()[0..9])</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_id Getting" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new groovy.json.JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;OptimizationID&apos;, a.&apos;optimization_id&apos;.toString())
//vars.put(&apos;a1&apos;, &apos;0&apos;)</stringProp>
                  <stringProp name="TestPlan.comments">100%works</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="false">
                <stringProp name="WhileController.condition">${__groovy(${a1} == &apos;1&apos;)}</stringProp>
              </WhileController>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5 Added Route" enabled="true">
                  <stringProp name="TestPlan.comments">route_id Getting &amp;wait_for_final_state=1</stringProp>
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationID}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="Wait for route_id" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">true</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;[0]
if (&apos;route_id&apos; in b.keySet()){
	println a.&apos;addresses&apos;[0].&apos;route_id&apos;
	vars.put(&apos;RouteID&apos;, a.&apos;addresses&apos;[0].&apos;route_id&apos;.toString())
	vars.put(&apos;a1&apos;, &apos;1&apos;)
}</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET Route" enabled="false">
                <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}?route_id=${RouteID}</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_destination_id" enabled="false">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&quot;addresses&quot;.&quot;route_destination_id&quot;.size()
c = a.&quot;addresses&quot;.&quot;route_destination_id&quot;[b - 2]
vars.put(&apos;DepotForPUT&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[0].toString())
vars.put(&apos;StopForPUT&apos;, c.toString())
vars.put(&apos;AddressesLat&apos;, (a.&quot;addresses&quot;.&quot;lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesLng&apos;, (a.&quot;addresses&quot;.&quot;lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLat&apos;, (a.&quot;addresses&quot;.&quot;curbside_lat&quot;[b - 2] + 0.005).toString())
vars.put(&apos;AddressesCurbsideLnt&apos;, (a.&quot;addresses&quot;.&quot;curbside_lng&quot;[b - 2] + 0.005).toString())
vars.put(&apos;SequenceNo&apos;, a.&quot;addresses&quot;.&quot;sequence_no&quot;[b - 2].toString())
vars.put(&apos;StopForDelete&apos;, a.&quot;addresses&quot;.&quot;route_destination_id&quot;[2].toString())</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Add New Route v4" enabled="false">
                <stringProp name="TestPlan.comments">OK</stringProp>
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4OptimizationProblem}?redirect=0</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">{&#xd;
	&quot;parameters&quot;:{&#xd;
		&quot;route_name&quot;:&quot;${RouteName}&quot;,&#xd;
		&quot;route_date&quot;:${RouteDate},&#xd;
		&quot;rt&quot;:true,&#xd;
		&quot;algorithm_type&quot;:100},&#xd;
	&quot;addresses&quot;:[&#xd;
		${Addresses}]&#xd;
}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Api-Key</stringProp>
                      <stringProp name="Header.value">${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="Random Values" enabled="true">
                  <collectionProp name="UserParameters.names">
                    <stringProp name="-2123533228">RouteName</stringProp>
                  </collectionProp>
                  <collectionProp name="UserParameters.thread_values">
                    <collectionProp name="11884269">
                      <stringProp name="1513857054">${__RandomString(32, ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,)}</stringProp>
                    </collectionProp>
                  </collectionProp>
                  <boolProp name="UserParameters.per_iteration">false</boolProp>
                </UserParameters>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Addesses Generation" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">b = &apos;{&quot;alias&quot;:&quot;Depot&quot;,&quot;lat&quot;:27.992839,&quot;lng&quot;:-82.505879,&quot;is_depot&quot;:true},\n&apos;
for (i in 1..${NumberOfStops}){
a = &apos;\t\t{&quot;alias&quot;:&quot;Stop &apos; + i + &apos;&quot;,&quot;lat&quot;:27.&apos; + new Random().ints(965,995).findFirst().getAsInt() + &apos;,&quot;lng&quot;:-82.&apos; + new Random().ints(370,500).findFirst().getAsInt() + &apos;}&apos;
b = (i == ${NumberOfStops})? b + a : b + a + &apos;,\n&apos;}

vars.put(&apos;Addresses&apos;, b)
vars.put(&apos;RouteDate&apos;, a = (new Date().getTime() + 86400000).toString()[0..9])</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="OptimizationProblemID for GET" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new groovy.json.JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;OptimizationProblemID&apos;, a.&apos;optimization_problem_id&apos;)</stringProp>
                  <stringProp name="TestPlan.comments">100%works</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4 Added Route" enabled="false">
                <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.path">${v4APIPath}/${v4OptimizationProblem}?optimization_problem_id=${OptimizationProblemID}&amp;wait_for_final_state=1</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">X-Api-Key</stringProp>
                      <stringProp name="Header.value">${APIKey}</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">true</stringProp>
                  <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
b = a.&apos;addresses&apos;.&apos;route_id&apos;

for (i in 0..b.size() - 1){
	if (b[i] !=null){
		vars.put(&apos;RouteID&apos;, b[i].toString())
		break}}</stringProp>
                </JSR223PostProcessor>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="GETv5/v4" enabled="false"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5/Optimizations" enabled="true">
                  <stringProp name="TestPlan.comments">route_id Getting</stringProp>
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}?limit=100</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4/Optimizations" enabled="true">
                  <stringProp name="TestPlan.comments">route_id Getting</stringProp>
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4OptimizationProblem}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Api-Key</stringProp>
                        <stringProp name="Header.value">${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv5/Route" enabled="true">
                  <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}?limit=100</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GETv4/Route" enabled="true">
                  <stringProp name="TestPlan.comments">${RouteId}</stringProp>
                  <stringProp name="HTTPSampler.domain">${v4URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v4APIPath}/${v4Routes}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="Header" enabled="true">
                    <collectionProp name="HeaderManager.headers">
                      <elementProp name="" elementType="Header">
                        <stringProp name="Header.name">X-Api-Key</stringProp>
                        <stringProp name="Header.value">${APIKey}</stringProp>
                      </elementProp>
                    </collectionProp>
                  </HeaderManager>
                  <hashTree/>
                </hashTree>
                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>false</responseData>
                      <samplerData>false</samplerData>
                      <xml>false</xml>
                      <fieldNames>true</fieldNames>
                      <responseHeaders>false</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                      <sentBytes>true</sentBytes>
                      <url>true</url>
                      <threadCounts>true</threadCounts>
                      <idleTime>true</idleTime>
                      <connectTime>true</connectTime>
                    </value>
                  </objProp>
                  <stringProp name="filename"></stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="optimization_problem.php" enabled="false"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="optimization_problem_id Getting" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;OptimizationProblemIDsForDelete&apos;, JsonOutput.toJson(a.&apos;optimizations&apos;.&apos;optimization_problem_id&apos;).toString())</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE" enabled="true">
                  <stringProp name="TestPlan.comments">route_id Getting</stringProp>
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;optimization_problem_ids&quot;: ${OptimizationProblemIDsForDelete}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OPTIONS" enabled="true">
                  <stringProp name="TestPlan.comments">route_id Getting</stringProp>
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4OptimizationProblem}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>false</responseData>
                      <samplerData>false</samplerData>
                      <xml>false</xml>
                      <fieldNames>true</fieldNames>
                      <responseHeaders>false</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                      <sentBytes>true</sentBytes>
                      <url>true</url>
                      <threadCounts>true</threadCounts>
                      <idleTime>true</idleTime>
                      <connectTime>true</connectTime>
                    </value>
                  </objProp>
                  <stringProp name="filename"></stringProp>
                </ResultCollector>
                <hashTree/>
              </hashTree>
              <GenericController guiclass="LogicControllerGui" testclass="GenericController" testname="route.php" enabled="false"/>
              <hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">GET</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree>
                  <JSR223PostProcessor guiclass="TestBeanGUI" testclass="JSR223PostProcessor" testname="route_id Getting" enabled="true">
                    <stringProp name="scriptLanguage">groovy</stringProp>
                    <stringProp name="parameters"></stringProp>
                    <stringProp name="filename"></stringProp>
                    <stringProp name="cacheKey">false</stringProp>
                    <stringProp name="script">import groovy.json.*

a = new JsonSlurper().parse(prev.getResponseData())
vars.put(&apos;RouteIDsForDelete1&apos;, JsonOutput.toJson(a.&apos;route_id&apos;).toString())

b = a.&apos;route_id&apos;.toString()
b = b.replace(&apos;[&apos;, &apos;&quot;&apos;)
b = b.replace(&apos;]&apos;, &apos;&quot;&apos;)
vars.put(&apos;RouteIDsForDelete2&apos;, b)

b = b.replace(&apos;&quot;&apos;, &apos;&apos;)
b = b.replace(&apos; &apos;, &apos;&apos;)
vars.put(&apos;RouteIDsForDelete3&apos;, b)</stringProp>
                  </JSR223PostProcessor>
                  <hashTree/>
                </hashTree>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE1" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;route_id&quot;: ${RouteIDsForDelete2}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE2" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                    <collectionProp name="Arguments.arguments">
                      <elementProp name="" elementType="HTTPArgument">
                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
                        <stringProp name="Argument.value">{&#xd;
  &quot;route_id&quot;: ${RouteIDsForDelete1}&#xd;
}</stringProp>
                        <stringProp name="Argument.metadata">=</stringProp>
                      </elementProp>
                    </collectionProp>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DELETE3" enabled="true">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}?route_id=${RouteIDsForDelete3}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">DELETE</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
                  <boolProp name="ResultCollector.error_logging">false</boolProp>
                  <objProp>
                    <name>saveConfig</name>
                    <value class="SampleSaveConfiguration">
                      <time>true</time>
                      <latency>true</latency>
                      <timestamp>true</timestamp>
                      <success>true</success>
                      <label>true</label>
                      <code>true</code>
                      <message>true</message>
                      <threadName>true</threadName>
                      <dataType>true</dataType>
                      <encoding>false</encoding>
                      <assertions>true</assertions>
                      <subresults>true</subresults>
                      <responseData>false</responseData>
                      <samplerData>false</samplerData>
                      <xml>false</xml>
                      <fieldNames>true</fieldNames>
                      <responseHeaders>false</responseHeaders>
                      <requestHeaders>false</requestHeaders>
                      <responseDataOnError>false</responseDataOnError>
                      <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                      <assertionsResultsToSave>0</assertionsResultsToSave>
                      <bytes>true</bytes>
                      <sentBytes>true</sentBytes>
                      <url>true</url>
                      <threadCounts>true</threadCounts>
                      <idleTime>true</idleTime>
                      <connectTime>true</connectTime>
                    </value>
                  </objProp>
                  <stringProp name="filename"></stringProp>
                </ResultCollector>
                <hashTree/>
                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="OPTIONS" enabled="false">
                  <stringProp name="HTTPSampler.domain">${v5URL}</stringProp>
                  <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                  <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                  <stringProp name="HTTPSampler.path">${v5APIPath}/${v5RoutesPlatformAPI}/${v5LegacyAdapterAPI}/${v4APIPath}/${v4Routes}</stringProp>
                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                  <stringProp name="HTTPSampler.method">OPTIONS</stringProp>
                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                  <boolProp name="HTTPSampler.postBodyRaw">false</boolProp>
                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
                    <collectionProp name="Arguments.arguments"/>
                  </elementProp>
                </HTTPSamplerProxy>
                <hashTree/>
              </hashTree>
              <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="Results" enabled="true">
                <boolProp name="ResultCollector.error_logging">false</boolProp>
                <objProp>
                  <name>saveConfig</name>
                  <value class="SampleSaveConfiguration">
                    <time>true</time>
                    <latency>true</latency>
                    <timestamp>true</timestamp>
                    <success>true</success>
                    <label>true</label>
                    <code>true</code>
                    <message>true</message>
                    <threadName>true</threadName>
                    <dataType>true</dataType>
                    <encoding>false</encoding>
                    <assertions>true</assertions>
                    <subresults>true</subresults>
                    <responseData>false</responseData>
                    <samplerData>false</samplerData>
                    <xml>false</xml>
                    <fieldNames>true</fieldNames>
                    <responseHeaders>false</responseHeaders>
                    <requestHeaders>false</requestHeaders>
                    <responseDataOnError>false</responseDataOnError>
                    <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
                    <assertionsResultsToSave>0</assertionsResultsToSave>
                    <bytes>true</bytes>
                    <sentBytes>true</sentBytes>
                    <url>true</url>
                    <threadCounts>true</threadCounts>
                    <idleTime>true</idleTime>
                    <connectTime>true</connectTime>
                  </value>
                </objProp>
                <stringProp name="filename"></stringProp>
              </ResultCollector>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
